[{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"figure-2-of-hofer-langmann-burkart-and-neubauer-2022-","dir":"Articles","previous_headings":"","what":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","title":"Customizing `superb` plots","text":"study, Hofer, Langmann, Burkart, & Neubauer (2022) examined best judges one’s abilities. Examining self-ratings vs.  -ratings six domain, found always best judges. present Figure 2 rain-cloud plot (Allen, Poggiali, Whitaker, Marshall, & Kievit (2019)) illustrating ratings. follow, discuss plot customized initial creation superb. six domains within-subject ratings, data must composed 6 columns (least, can additional columns; won’t illustrated herein). case data, following subsection generates mock data.","code":""},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"generating-mock-data","dir":"Articles","previous_headings":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","what":"Generating mock data","title":"Customizing `superb` plots","text":"generate two sets mock data six sets means standard deviations: datasets data.frames called dtaA dtaB. columns names dependent variables, e.g., “Verbal”, “Numerical”, “Spatial”, “Creativity”, “Intrapersonal”, “Interpersonal”.","code":"Astats <- data.frame(     MNs = c(6.75, 6.00, 5.50, 6.50, 8.00, 8.75),     SDs = c(2.00, 3.00, 3.50, 3.50, 1.25, 1.25) ) dtaA <- apply(Astats, 1,      function(stat) {rnorm(100, mean=stat[1], sd=stat[2])}  ) dtaA <- data.frame(dtaA) colnames(dtaA) <- c(\"Verbal\", \"Numerical\", \"Spatial\", \"Creativity\", \"Intrapersonal\", \"Interpersonal\")  Bstats <- data.frame(     MNs = c(3.33, 3.00, 2.50, 3.00, 2.75, 3.50),     SDs = c(0.25, 0.50, 0.66, 0.50, 0.25, 0.25) ) dtaB <- apply(Bstats, 1,      function(stat) {rnorm(100, mean=stat[1], sd=stat[2])}  ) dtaB <- data.frame(dtaB) colnames(dtaB) <- c(\"Verbal\", \"Numerical\", \"Spatial\", \"Creativity\", \"Intrapersonal\", \"Interpersonal\")"},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"making-the-top-row-plot","dir":"Articles","previous_headings":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","what":"Making the top-row plot","title":"Customizing `superb` plots","text":"convenience, make lists desired colors labels want appear x-axis: ready make plot desired adjustments: Figure 2, preliminary version seen, plot standard, colorless, plot. contains needed; just plain drab labels generic ones (vertical axis horizontal axis).","code":"mycolors <- c(\"seagreen\",\"chocolate2\",\"mediumpurple3\",\"deeppink\",\"chartreuse4\", \"darkgoldenrod1\") mylabels <- c(\"Verbal\", \"Numerical\", \"Spatial\", \"Creativity\", \"Intrapersonal\", \"Interpersonal\") pltA <- superb(     crange(Verbal, Interpersonal) ~ ., # no between-subject factors     dtaA,                       # plot for the first data set...     WSFactors   = \"Domain(6)\",  # ...a within-subject design with 6 levels     adjustments = list(         purpose = \"difference\", # we want to compare means         decorrelation = \"CM\"    # and error bars are correlated-adjusted     ),     plotLayout  = \"raincloud\",      # the following (optional) arguments are adjusting some of the visuals     pointParams    = list(size = 0.75),     jitterParams   = list(width =0.1, shape=21,size=0.05,alpha=1), # less dispersed jitter dots,     violinParams   = list(trim=TRUE, alpha=1),                     # not transparent,     errorbarParams = list(width = 0.1, linewidth=0.5)              # wider bars, thicker lines. ) pltA"},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"adding-a-color-layer-to-the-plot","dir":"Articles","previous_headings":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","what":"Adding a color layer to the plot","title":"Customizing `superb` plots","text":"Using superb, one factor, superb consider one x-axis therefore layers plot. current plot colorless. possible, post-hoc, indicate wish additional layers plot. present, want add fill color dots layers. layers “connected” sole factor present example (, Domain). Consequently, x-axis labels, fill color dot color redondant information identifying condition. , simply add aesthetic graphic directive pltA : Figure 2, version colors","code":"pltA + aes(fill = factor(Domain), colour = factor(Domain))"},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"adding-graphic-directives-for-fine-tuning-the-plot","dir":"Articles","previous_headings":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","what":"Adding graphic directives for fine-tuning the plot","title":"Customizing `superb` plots","text":"can customize superb plot adding graphic directives one--one using operator +, can collect directives list, add list . two plots mostly directives, use second approach. Typically, plot customized picking theme. default theme_bw() grayish, move theme_classic(). also customize specific aspects theme theme() directives. changes collected within list commonstyle : also changed vertical scale (tick marks designated positions) horizontal scale names tick marks (sadly, superb replaces consecutive numbers…) colors fill clouds (fill) borders (colour) well rain drop colors. Examining plot commonstyle added, get Figure 2, final version","code":"commonstyle <- list(     theme_classic(),                             # It has no background, no bounding box.      # We customize this theme further:     theme(axis.line=element_line(linewidth=0.50), # We make the axes thicker...         axis.text = element_text(size = 10),      # their text bigger...         axis.title = element_text(size = 12),     # their labels bigger...         plot.title = element_text(size = 10),     # and the title bigger as well.         panel.grid = element_blank(),             # We remove the grid lines         legend.position = \"none\"                  # ... and we hide the side legend.     ),      # Finally, we place tick marks on the units     scale_y_continuous( breaks=1:10 ),      # set the labels to be displayed      scale_x_discrete(name=\"Domain\", labels = mylabels),      # and set colours to both colour and fill layers     scale_discrete_manual(aesthetic =c(\"fill\",\"colour\"), values = mycolors) ) finalpltA <- pltA + aes(fill = factor(Domain), colour = factor(Domain)) +      commonstyle +                           # all the above directive are added;     coord_cartesian( ylim = c(1,10) ) +     # the y-axis bounds are given ;     labs(title=\"A\") +                       # the plot is labeled \"A\"...     ylab(\"Self-worth relevance\")            # and the y-axis label given. finalpltA"},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"making-the-second-row-of-the-figure","dir":"Articles","previous_headings":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","what":"Making the second row of the figure","title":"Customizing `superb` plots","text":"exactly second plot. just change data set dtaB last graphic directives, using options tailored specifically second data set (smaller y-axis range, different label, etc.): Figure 2, bottom row","code":"pltB <- superb(     crange(Verbal, Interpersonal) ~ ., # no between-subject factors     dtaB,                       # the second data set...     WSFactors = \"Domain(6)\",    # ...a within-subject design with 6 levels     adjustments = list(         purpose = \"difference\", # we want to compare means         decorrelation = \"CM\"    # and error bars are correlated-adjusted     ),     plotLayout   = \"raincloud\",     # the following (optional) arguments are adjusting some of the visuals     pointParams  = list(size = 0.75),     jitterParams = list(width =0.1, shape=21,size=0.05,alpha=1), # less dispersed jitter dots,     violinParams = list(trim=TRUE, alpha=1,adjust=3),            # not semi-transparent, smoother     errorbarParams = list(width = 0.1, linewidth=0.5)                 # wider bars, thicker lines. ) finalpltB <- pltB + aes(fill = factor(Domain), colour = factor(Domain)) +      commonstyle +                           # the following three lines are the differences:     coord_cartesian( ylim = c(1,5) ) +      # the limits, 1 to 5, are different      labs(title=\"B\") +                       # the plot is differently-labeled     ylab(\"Judgment certainty\")              # and the y-axis label differns. finalpltB"},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"combining-and-saving-both-plots","dir":"Articles","previous_headings":"Figure 2 of Hofer, Langmann, Burkart and Neubauer, 2022.","what":"Combining and saving both plots","title":"Customizing `superb` plots","text":"Finally, assemble two plots together Figure 2, final version can saved high-resolution desired ’s !","code":"finalplt <- grid.arrange(finalpltA, finalpltB, ncol=1) ggsave( \"Figure2.png\",     plot=finalplt,     device = \"png\",     dpi = 320,          # pixels per inche     units = \"cm\",       # or \"in\" for dimensions in inches     width = 17,         # as found in the article     height = 13 )"},{"path":"http://dcousin3.github.io/superb/articles/CustomizingSuperbPlots.html","id":"figure-2-of-ma-and-abrams-2023-","dir":"Articles","previous_headings":"","what":"Figure 2 of Ma and Abrams, 2023.","title":"Customizing `superb` plots","text":"study, Ma & Abrams (2023) examined whether participants can suppress attentional deployment unpredictable visual distractor attributes. found first time observers can indeed suppress salient, unique colored, distractors even color known hand. proceed, first get authors’ OSF https://osf.io/r52db follow instructions obtain dataframe cleandata. response times (RTs) recorded second, convert milisecond: check, first six lines data frame: Please select colors desired bars: addition libraries, also need scales library can modify vertical axis plot. Indeed, bar charts default start zero, present data (response times mean accuracies), scales start zero appropriate. create shift transformation function non-zero start dd: ’re set! ready make first plot, RTs, function presence absence colored distractor. () want compare bars, use difference-adjusted confidence intervals; (b) data collected within-subject design, use correlation-adjusted confidence intervals. Figure 1, preliminary version default, vertical axis starts zero. Let’s add shift_trans scale, limit range 720-900, show breaks every 20 units: Figure 2, version adequate vertical scale can better: changing default fonts, remove legend, etc. store graphic directives list used accuracy plot: Figure 3, version theme details adjusted Finally, put indication regarding significant result: Figure 4, final version RTs need go details mean accuracy plot. steps single command: Figure 5, final version mean accuracies Put two plots side--side save work! Figure 6, final version Regarding information provided superb: note two repeated measures, sphericity always met (Epsilon = 1.00) nothing comment. Compound symmetry weaker form sphericity assumption. compound symmetry met, can decorrelate data using either CM CA. won’t see much differences two techniques, may well ignore comment. Enjoy!","code":"cleandata$absentrt = cleandata$absentrt*1000 cleandata$presentrt = cleandata$presentrt*1000 head(cleandata) ##   subject absentrt presentrt absentacc presentacc ## 1     201 906.9648  880.5836  0.984375  0.9843750 ## 2     202 750.1645  722.7798  0.937500  0.9921875 ## 3     203 814.3321  717.3632  0.953125  0.9765625 ## 4     204 985.0208  908.4251  0.984375  0.9921875 ## 5     205 927.9098  859.6929  0.875000  0.9375000 ## 6     206 962.0722  848.8763  0.859375  0.9140625 mycolors = c(\"black\",\"lightgray\") library(scales)     # for a translated scale using trans_new()  shift_trans = function(d = 0) {   scales::trans_new(\"shift\", transform = function(x) x - d, inverse = function(y) y + d) } # defaults are means with 95% confidence intervals, so not specified pltA <- superbPlot( cleandata,     WSFactors = \"target(2)\",     variables = c(\"absentrt\", \"presentrt\"),     adjustments = list(         purpose = \"difference\",          decorrelation = \"CM\"),     plotLayout  = \"bar\",     errorbarParams = list(colour = \"gray35\", width = 0.05) ) ## superb::FYI: The HyunhFeldtEpsilon measure of sphericity per group are  1.000 pltA # attached the shifted scale to it pltA <- pltA + scale_y_continuous(     trans = shift_trans(720),      # use translated bars     limits = c(720,899),           # limit the plot range     breaks = seq(720,880,20),      # define major ticks     expand = c(0,0) )              # no expansions over the plotting area pltA ornaments <- list(     theme_classic(base_size = 14) + theme( legend.position = \"none\" ),     aes(width = 0.5, fill = factor(target), colour = factor(target) ),     scale_discrete_manual(aesthetic =c(\"fill\",\"colour\"), values = mycolors),     scale_x_discrete(name=\"Color Singleton\\nDistractor\", labels = c(\"Absent\",\"Present\")) ) pltA <- pltA + ornaments + ylab(\"Reaction time (ms)\") pltA pltA <- pltA + showSignificance( c(1,2), 870, -8,      \"Singleton presence\\nbenefit, p < .001\",     segmentParams = list(linewidth = 1))  # this is it! Check the result    pltA pltB <- superbPlot( cleandata,     WSFactors = \"target(2)\",     variables = c(\"absentacc\", \"presentacc\"),     adjustments = list(         purpose = \"difference\",          decorrelation = \"CM\"),     plotLayout  = \"bar\",     errorbarParams = list(colour = \"gray35\", width = 0.05) ) +  scale_y_continuous(     trans = shift_trans(0.9),           # use translated bars     limits = c(0.9, 1.0),               # limit the plot range     breaks = seq(0.90, 1.00, 0.01),     # define major ticks     expand = c(0,0) ) +                 # remove empty space around plotting surface ornaments +  ylab(\"Accuracy (proportion correct)\") + showSignificance( c(1,2), 0.985, -0.005,      \"Singleton presence\\nbenefit, p = .010\",      segmentParams = list(linewidth = 1) ) ## superb::FYI: The HyunhFeldtEpsilon measure of sphericity per group are  1.000 ## superb::FYI: All the groups' data are compound symmetric. Consider using CA or UA. # this is it! Check the result    pltB finalplt <- grid.arrange(pltA, pltB, ncol=2) #ggsave( \"Figure2b.png\", #    plot=finalplt, #    device = \"png\", #    dpi = 320,          # pixels per inche #    units = \"cm\",       # or \"in\" for dimensions in inches #    width = 20,         # as found in the article #    height = 15 #) ## superb::FYI: The HyunhFeldtEpsilon measure of sphericity per group are  1.000 ## superb::FYI: All the groups' data are compound symmetric. Consider using CA."},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/TheMakingOf.html","id":"making-figure-1","dir":"Articles","previous_headings":"","what":"Making Figure 1","title":"The making-of the figures in the article","text":"purpose Figure 1 illustrate difference error bars purpose measures precision perform pair-wise comparisons. based data dataFigure1, whose columns id just participant identifier, grp indicate group membership (group 1 group 2), finally, score dependent variable. first panel left based stand-alone confidence intervals obtained : Figure 1a. Left panel Figure 1. Note stand-alone error bars obtained adding argument adjustments = list(purpose = \"single\") default value, can omitted. default theme ggplots attractive. Let’s decorate plot bit! end, collected additional ggplot directives list: first plot, ornaments title, : Figure 1b. Decorating left panel Figure 1. second plot obtained simar fashion just one additional argument requesting difference-adjusted confidence intervals: Figure 1c. Making decorating central panel Figure 1. Finally, raincloud plot obtained changing plotLayout argument: Figure 1d. Making decorating right panel Figure 1. three plots shown side--side : Figure 1. complete Figure 1. exported file, , e.g.: can change smooth density estimator (kernel function) adding violinParams list following attribute: kernel = \"rectangular\" example ragged density estimator. end, error bars correct? Remember golden rule adjusted confidence intervals look inclusion: example, mean second group part possible results suggested first group’s confidence interval? yes central plot. central plot therefore indicate absence signficant difference. confidence intervals 95%, conclusion statistically significant 5% level. Still convinced? Let’s t test (actually, Welch test; add var.equal = TRUE regular t test; Delacre, Lakens, & Leys (2017)): significant difference data .05 level, error bar 95% confidence interval contain result, case central panel. Finally, try Tryon’s adjustments (changing adjustments = list(purpose = \"tryon\")). However, notice difference . Indeed, variances almost identical two groups (9.99 vs.  10.08).","code":"head(dataFigure1) ##   id grp score ## 1  1   1   117 ## 2  2   1   103 ## 3  3   1   113 ## 4  4   1   101 ## 5  5   1   104 ## 6  6   1   114 plt1a <- superb( score ~ grp,             dataFigure1,              plotLayout   = \"line\" )  plt1a ornateBS <- list(     xlab(\"Group\"),      ylab(\"Attitude towards class activities\"),     scale_x_discrete(labels = c(\"Collaborative\\ngames\", \"Unstructured\\nactivities\")), #new!     coord_cartesian( ylim = c(70,130) ),     geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2),     theme_light(base_size = 10) +     theme( plot.subtitle = element_text(size=12)) ) plt1a <- plt1a + ornateBS + labs(subtitle=\"(stand-alone)\\n95% CI\") plt1a plt1b <- superb( score ~ grp,             dataFigure1,              adjustments  = list(purpose = \"difference\"), #new!             plotLayout   = \"line\" ) plt1b <- plt1b + ornateBS + labs(subtitle=\"Difference-adjusted\\n95% CI\")  plt1b plt1c <- superb(             score ~ grp,             dataFigure1,              adjustments  = list(purpose = \"difference\"),             plotLayout   = \"raincloud\",                         # new layout!             violinParams = list(fill = \"green\", alpha = 0.2) ) # changed color to the violin plt1c <- plt1c + ornateBS + labs(subtitle=\"Difference-adjusted\\n95% CI\")  plt1c grid.arrange(plt1a, plt1b, plt1c, ncol=3) png(filename = \"Figure1.png\", width = 640, height = 320) grid.arrange(plt1a, plt1b, plt1c, ncol=3) dev.off() t.test(dataFigure1$score[dataFigure1$grp==1],        dataFigure1$score[dataFigure1$grp==2],         ) ##  ##  Welch Two Sample t-test ##  ## data:  dataFigure1$score[dataFigure1$grp == 1] and dataFigure1$score[dataFigure1$grp == 2] ## t = 1.7612, df = 47.996, p-value = 0.08458 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ##  -0.7082323 10.7082323 ## sample estimates: ## mean of x mean of y  ##       105       100"},{"path":"http://dcousin3.github.io/superb/articles/TheMakingOf.html","id":"making-figure-2","dir":"Articles","previous_headings":"","what":"Making Figure 2","title":"The making-of the figures in the article","text":"Figure 2 made similar fashion, using decorations ornate just different name variable horizontal axis: difference present example data within-subject design two repeated measures. dataset must wide format, e.g., makes left panel: Figure 2a. Making left panel Figure 2. … makes central panel, specifying CA (correlation-adjusted) decorelation technique: Figure 2b. Making central panel Figure 2. seen, superbPlot issues relevant information (indicated FYI messages), correlation. get sense general trends data, can examine data participants per participants, joining results line. seen , participants, trend upward, suggesting strongly reliable effect moment: Figure 2c. Making third panel Figure 2. Just exercice, also compute plot difference scores. end, need different labels x-axis different range: compute differences make plot: Figure 2d. Making right panel Figure 2. last plot require decorrelation adjusted difference. Decorrelation anything diff single column; difference-adjustment inadequate difference compared fix value (namely 0, zero improvement) Assembling four panels, get: Figure 2. complete Figure 2. … can exported file usual: error bars depicting significance result aptly? adjusted ones seen central panel, confirmed t-test paired data: confidence interval one moment include result moment, indicating significant difference two moments.","code":"ornateWS <- list(     xlab(\"Moment\"),                                                #different!     scale_x_discrete(labels=c(\"Pre\\ntreatment\", \"Post\\ntreatment\")),      ylab(\"Statistics understanding\"),     coord_cartesian( ylim = c(75,125) ),     geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2),     theme_light(base_size = 10) +     theme( plot.subtitle = element_text(size=12)) ) head(dataFigure2) ##   id pre post ## 1  1 105  128 ## 2  2  96   96 ## 3  3  88  102 ## 4  4  80   88 ## 5  5  90   83 ## 6  6  86   99 plt2a <- superb(             cbind(pre,post) ~ . ,             dataFigure2,              WSFactors    = \"Moment(2)\",              adjustments  = list(purpose = \"single\"),             plotLayout   = \"line\" )  plt2a <- plt2a + ornateWS + labs(subtitle=\"Stand-alone\\n95% CI\") plt2a plt2b <- superb(             cbind(pre, post) ~ . ,             dataFigure2,              WSFactors    = \"Moment(2)\",              adjustments  = list(purpose = \"difference\", decorrelation = \"CA\"), #new             plotLayout   = \"line\" ) ## superb::FYI: The average correlation per group is  0.8366 plt2b <- plt2b + ornateWS + labs(subtitle=\"Correlation and difference-\\nadjusted 95% CI\")  plt2b plt2c <- superb(             cbind(pre, post) ~ .,              dataFigure2,              WSFactors    = \"Moment(2)\",              adjustments  = list(purpose = \"difference\", decorrelation = \"CA\"),             plotLayout   = \"pointindividualline\" )   #new plt2c <- plt2c + ornateWS + labs(subtitle=\"Correlation and difference-\\nadjusted 95% CI\") plt2c ornateWS2 <- list(     xlab(\"Difference\"),                                           scale_x_discrete(labels=c(\"Post minus Pre\\ntreatment\")),      ylab(\"Statistics understanding\"),     coord_cartesian( ylim = c(-25,+25) ),     geom_hline(yintercept = 0, colour = \"black\", linewidth = 0.5, linetype=2),     theme_light(base_size = 10) +     theme( plot.subtitle = element_text(size=12)) ) dataFigure2$diff <- dataFigure2$post - dataFigure2$pre plt2d <- superb(             diff ~ .,             dataFigure2,              WSFactor     = \"Moment(1)\",              adjustments  = list(purpose = \"single\", decorrelation = \"none\"),             plotLayout   = \"raincloud\",             violinParams = list(fill = \"green\") )  #new plt2d <- plt2d + ornateWS2 + labs(subtitle=\"95% CI \\nof the difference\") plt2d grid.arrange(plt2a, plt2b, plt2c, plt2d,  ncol=4) png(filename = \"Figure2.png\", width = 850, height = 320) grid.arrange(plt2a, plt2b, plt2c, plt2d,  ncol=4) dev.off() t.test(dataFigure2$pre, dataFigure2$post, paired=TRUE) ##  ##  Paired t-test ##  ## data:  dataFigure2$pre and dataFigure2$post ## t = -2.9046, df = 24, p-value = 0.007776 ## alternative hypothesis: true mean difference is not equal to 0 ## 95 percent confidence interval: ##  -8.552864 -1.447136 ## sample estimates: ## mean difference  ##              -5"},{"path":"http://dcousin3.github.io/superb/articles/TheMakingOf.html","id":"making-figure-3","dir":"Articles","previous_headings":"","what":"Making Figure 3","title":"The making-of the figures in the article","text":"novel element Figure 3 fact participants recruited clusters participants. first adapt ornaments example: , get unadjusted plot usual: Figure 3a. left panel Figure 3. , option samplingDesign = \"SRS\" default can omitted. indicate presence cluster-randomized sampling, samplingDesign option set \"CRS\" additional information, clusterColumn indicated identify column containing cluster membership information: Figure 3b. central panel Figure 3. inspection distribution make cluster structure evident therefore raincloud plot maybe little informative context cluster randomized sampling… complete Figure 3: Figure 3. complete Figure 3. figure saved make correct t test present case, need correction factor called λ\\lambda. easy way following (see Cousineau & Laurencelle, 2016 ) seen, proper test returning coherent decision proper error bars.","code":"ornateCRS <- list(     xlab(\"Group\"),      ylab(\"Quality of policies\"),     scale_x_discrete(labels=c(\"From various\\nfields\", \"From the\\nsame field\")), #new!     coord_cartesian( ylim = c(75,125) ),     geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2),     theme_light(base_size = 10) +     theme( plot.subtitle = element_text(size=12)) ) plt3a <- superb(     VD ~ grp,     dataFigure3,      adjustments   = list(purpose = \"single\", samplingDesign = \"SRS\"),     plotLayout    = \"line\" ) plt3a <- plt3a + ornateCRS + labs(subtitle=\"Stand-alone\\n95% CI\")  plt3a plt3b <- superb(     VD ~ grp,     dataFigure3,      adjustments   = list(purpose = \"difference\", samplingDesign = \"CRS\"), #new     plotLayout    = \"line\",      clusterColumn = \"cluster\" )                                           #new ## superb::FYI: The ICC1 per group are  0.491 0.204 plt3b <- plt3b + ornateCRS + labs(subtitle=\"Cluster and difference-\\nadjusted 95% CI\") plt3b plt3c <- superb(     VD ~ grp,     dataFigure3,      adjustments   = list(purpose = \"difference\", samplingDesign = \"CRS\"),     plotLayout    = \"raincloud\",      violinParams  = list(fill = \"green\", alpha = 0.2),     clusterColumn = \"cluster\" ) plt3c <- plt3c + ornateCRS + labs(subtitle=\"Cluster and difference-\\nadjusted 95% CI\") grid.arrange(plt3a, plt3b, plt3c, ncol=3) png(filename = \"Figure3.png\", width = 640, height = 320) grid.arrange(plt3a, plt3b, plt3c, ncol=3) dev.off() res    <- t.test( dataFigure3$VD[dataFigure3$grp==1],                    dataFigure3$VD[dataFigure3$grp==2],                  ) # mean ICCs per group, as given by superbPlot micc   <- mean(c(0.491335, 0.203857))  # lambda from five clusters of 5 participants each lambda <- CousineauLaurencelleLambda(c(micc, 5, 5, 5, 5, 5, 5))  tcorrected  <- res$statistic / lambda pcorrected  <- 1 - pt(tcorrected, 4)  cat(paste(\"t-test corrected for cluster-randomized sampling: t(\",     2*(dim(dataFigure3)[1]-2),\") = \", round(tcorrected, 3),     \", p = \", round(pcorrected, 3),\"\\n\", sep= \"\")) ## t-test corrected for cluster-randomized sampling: t(96) = 1.419, p = 0.114"},{"path":"http://dcousin3.github.io/superb/articles/TheMakingOf.html","id":"making-figure-4","dir":"Articles","previous_headings":"","what":"Making Figure 4","title":"The making-of the figures in the article","text":"Figure 4 illustration impact sampling among finite population. Lets Figure 4 (see plot single figure). option popSize = Inf default; indicates population presumed infinite size. finite size can given, illustrate plot along distribution information violin plot: reunited usual: Figure 4. complete Figure 4. …saved : corrected t test, performed adjusting proportion population examined (see Thompson, 2012), confirms presence significant difference:","code":"ornateBS <- list(     xlab(\"\"),      ylab(\"Metabolic score\"),     scale_x_discrete(labels=c(\"Response to treatment\")), #new!     coord_cartesian( ylim = c(75,125) ),     geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2),     theme_light(base_size = 10) +     theme( plot.subtitle = element_text(size=12)) ) plt4a <- superb(     score ~ group,     dataFigure4,      adjustments = list(purpose = \"single\", popSize = Inf),     plotLayout  = \"line\" )  plt4a <- plt4a + ornateBS + labs(subtitle=\"Stand-alone\\n95% CI\") plt4b <- superb(     score ~ group,      dataFigure4,      adjustments = list(purpose = \"single\", popSize = 50 ), # new!     plotLayout  = \"line\" )  plt4b <- plt4b + ornateBS + labs(subtitle=\"Population size-\\nadjusted 95% CI\") plt4c <- superb(     score ~ group,     dataFigure4,      adjustments = list(purpose = \"single\", popSize = 50 ), # new!     plotLayout  = \"pointjitterviolin\",     violinParams = list(fill = \"green\", alpha = 0.2)  )  plt4c <- plt4c + ornateBS + labs(subtitle=\"Population size-\\nadjusted 95% CI\") plt4 <- grid.arrange(plt4a, plt4b, plt4c, ncol=3) png(filename = \"Figure4.png\", width = 640, height = 320) grid.arrange(plt4a, plt4b, plt4c, ncol=3) dev.off() res <- t.test(dataFigure4$score, mu=100) tcorrected <- res$statistic /sqrt(1-nrow(dataFigure4) / 50) pcorrected <- 1-pt(tcorrected, 24)  cat(paste(\"t-test corrected for finite-population size: t(\",     nrow(dataFigure4)-1,\") = \", round(tcorrected, 3),     \", p = \", round(pcorrected, 3),\"\\n\", sep= \"\")) ## t-test corrected for finite-population size: t(24) = 2.644, p = 0.007"},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette1.html","id":"data-format","dir":"Articles","previous_headings":"","what":"Data format","title":"Three steps to make your plot","text":"data make plot must contained within data.frame named columns. (can also tibble related format long convert data.frame()) format data can two forms, long format wide format. wide format, general convention “1 subject = 1 line”, , information regarding given participant must stand single line. SPSS, SAS statistics software, standard data organization. can convert wide format long format, superbToWide() Navarro’s wideToLong’s excellent function (Navarro, 2015). multiple measures data, can used using cbind() crange() notations: cbind(), must name variables whereas crange() name range column first last column name range. long format, line contains single measure. repated measures, consecutive lines, can assigned participant ID column. formula must include | indicate data nested participants’ ID. illustration, use following ficticious data set showing performance 15 participants motivation scores Week 1, Week 2 Week 3 program stop smoking (long format). mean scores per week illustrated : Figure 1. Mean scores along 95% confidence interval per week program stop smoking. Instead cbind(`Week 1`, `Week 2`, `Week 3`), used crange(`Week 1`, `Week 3`) refer columns Week 1 `Week3. Note , default, missing data handled superb. Ideally, cells NA must removed imputed prior perform plot. Alternatively, can look summary statistic meanNArm(). made purpose difficult make plot missing data handled prior making summary plot.","code":"#Motivation data for 15 participants over three weeks in wide format: dta <- matrix( c(     45, 50,  59,     47, 58,  64,     53, 63,  72,     57, 64,  81,     58, 67,  86,     61, 70,  98,     61, 75, 104,     63, 79, 100,     63, 79,  84,     71, 81,  96,     72, 83,  82,     74, 84,  82,     76, 86,  93,     84, 90,  85,     90, 96,  89 ), ncol=3, byrow=T)  # put column names and convert to data.frame: colnames(dta) <- c(\"Week 1\", \"Week 2\", \"Week 3\") dta           <- as.data.frame(dta)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette1.html","id":"step-1-decide-of-the-purpose-of-the-plot","dir":"Articles","previous_headings":"","what":"Step 1: Decide of the purpose of the plot","title":"Three steps to make your plot","text":"Figure 1 , look result , say, Week 1, isolation? compare results obtained weeks? second perspective actually look difference results. case, error bar shown plot actually misleading short. reason explored Vignette 2. experiments, one condition compared conditions. case, interested pair-wise differences means, single results isolation. Yet, regular confidence intervals valid results isolation. Whenever wish compare result results, examine differences conditions (, time), need adjust confidence interval lengths remain adequate inference tools. superb, obtain adjustment error bar length option purpose plot. default purpose = \"single\" returns stand-alone error bars (Figure 1); purpose = \"difference\" returns error bars valid pair-wise comparisons. minimum specification data frame therefore Figure 2. Mean scores along difference-adjusted 95% confidence interval per week program stop smoking. first argument formula describing left-hand side measurements, right-hand side, betwee- subject conditions. second argument data.frame, wide format. data frame dta. multiple dependent variables (collected cbind(), third argument describe within-subject experimental factor(s). , single within-subject factor (WSFactors), called Moment. within-subject factors, necessary indicate many level factor (3). column named formula must match column names data.frame. unsure, check Note measurements named using crange() instead cbind(). specification crange() used refer range variables first given last given. , formula given crange(`Week 1`, `Week 3`) ~ . argument adjustments listed called adjustments list —moment— adjustment purpose plot: purpose =  \"difference\". standalone CI default (can obtained explicitly purpose= \"single\"). two expressions, single difference, Baguley (2012). Note plot obtained ggplot object additional graphic directives can added. Figure 2 actually obtained commands: graphic directives applied whole plot. reader referred package ggplot2 graphic directives.","code":"superb(     cbind(`Week 1`, `Week 2`, `Week 3`) ~ .,     dta,      WSFactors = \"Moment(3)\",     adjustments = list(purpose = \"difference\"),     plotLayout = \"line\"     ) head(dta) ##   Week 1 Week 2 Week 3 ## 1     45     50     59 ## 2     47     58     64 ## 3     53     63     72 ## 4     57     64     81 ## 5     58     67     86 ## 6     61     70     98 superb(     cbind(`Week 1`, `Week 2`, `Week 3`) ~ .,     dta,      WSFactors = \"Moment(3)\",     statistic = \"mean\", errorbar = \"CI\",     adjustments = list(purpose = \"difference\"),     plotLayout = \"line\" ) +  coord_cartesian( ylim = c(50,100) ) + ylab(\"Mean +- 95% CI\") + labs(title=\"Difference-adjusted\\n95% confidence interval\")+ theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Week 1\", \"2\" = \"Week 2\", \"3\"=\"Week 3\"))"},{"path":"http://dcousin3.github.io/superb/articles/Vignette1.html","id":"step-2-decide-how-to-handle-the-within-subject-measures","dir":"Articles","previous_headings":"","what":"Step 2: Decide how to handle the within-subject measures","title":"Three steps to make your plot","text":"known within-subject designs generally powerful detecting differences. implication afford statistical power consequently error bars shorter. stand-alone CI oblivious fact; however possible inform used within-subject design. method handle within-subject data comes observation repeated measures tend correlated (e.g., Goulet & Cousineau, 2019). Informing CI correlation process called decorrelation. day, exists three methods decorrelation: CM: method, called two authors Cousineau Morey (Cousineau, 2005; Morey, 2008), decorrelate data measurement may different adjustments; LM: method, first developed Loftus Masson (1994), make error bars length; CA: method, called correlation-based adjustment proposed Cousineau (2019). per CM, error bars can different length. three methods compared Cousineau (2019) shown mathematically based concepts estimating precision. therefore matter personal preference one use. Figure 2 become Figure 3 add decorrelation adjustment:  Unless change options options(superb.feedback = 'none'), command issue additional information. present data set, ε\\varepsilon 0.54 low. Mauchly test sphericity indicates rejection sphericity, interpret error bars caution. messages issued beginning \"FYI\" just information. Hereafter, warnings inhibited.","code":"superb(     cbind(`Week 1`, `Week 2`, `Week 3`) ~ .,     dta,      WSFactors = \"Moment(3)\",     statistic = \"mean\", errorbar = \"CI\",     adjustments = list(purpose = \"difference\", decorrelation = \"CM\"), #new!     plotLayout = \"line\",     errorbarParams = list(width = .2) ) +  coord_cartesian( ylim = c(50,100) ) + ylab(\"Mean +- 95% CI\") + labs(title=\"Correlation- and Difference-adjusted\\n95% confidence interval\")+ theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Week 1\", \"2\" = \"Week 2\", \"3\"=\"Week 3\")) ## superb::FYI: The HyunhFeldtEpsilon measure of sphericity per group are  0.545 ## superb::FYI: Some of the groups' data are not spherical. Use error bars with caution."},{"path":"http://dcousin3.github.io/superb/articles/Vignette1.html","id":"step-3-specify-the-sampling-procedure-and-the-population-size","dir":"Articles","previous_headings":"","what":"Step 3: Specify the sampling procedure and the population size","title":"Three steps to make your plot","text":"stand-alone confidence intervals appropriate sample obtained randomly, method formally called Simple Randomize Sampling (SRS). However, sampling method possible. Another commonly employed sampling procedure cluster sampling (formally Cluster Randomized Sampling, CRS). CRS one (beyond SRS) exact adjustment known (Cousineau & Laurencelle, 2016) thus SRS (adjustment) CRS (adjustments tend widen error bars) two sampling adjustments currently implemented superb. sampling methods includes Stratified Sampling, Snowball Sampling, Convenience Sampling, etc., none known impact precision measures. Also, determine population size finite infinite. population scrutiny finite, may sizeable proportion population sample, improves precision. case, error bars shortened. adjustments implemented superb additional adjustments,  can see, adjustments can obtained single option inside adjustments list. cumulative, .e., one adjustment can used, depending situation.","code":"# add (ficticious) cluster membership for each participant in the column \"cluster\" dta$cluster <- sort(rep(1:5, 3))  superb(     cbind(`Week 1`, `Week 2`, `Week 3`) ~ .,     dta,      WSFactors = \"Moment(3)\",     adjustments = list(purpose = \"difference\", decorrelation = \"CM\",                        samplingDesign = \"CRS\", popSize = 100),        #new!     plotLayout = \"line\",     clusterColumn = \"cluster\",  # identify the column containing cluster membership     errorbarParams = list(width = .2) ) +  coord_cartesian( ylim = c(50,100) ) + ylab(\"Mean +- 95% CI\") + labs(title=\"Cluster- Correlation, and Difference-adjusted\\n95% confidence interval\")+ theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Week 1\", \"2\" = \"Week 2\", \"3\"=\"Week 3\"))"},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette2.html","id":"a-paradoxical-example","dir":"Articles","previous_headings":"","what":"A paradoxical example","title":"Why use difference-adjusted confidence intervals?","text":"Imagine study school examining impact playing collaborative games beginning classes. study likely two groups, one students playing collaborative games one students non- structured activities prior classes. objective study compare two groups. Consider results obtained. measurement instrument tends return scores near 100. Figure 1. Mean scores along 95% confidence interval two groups students quality learning behavior. seen, seems better score students playing collaborative games. Taking account confidence interval, manipulation seems improve significantly learning behavior lower end Collaborative games interval Unstructured activity mean (vice versa). surprise discover t test confirm impression (t(48) = 1.76, p = .085):","code":"t.test(dataFigure1$score[dataFigure1$grp==1],          dataFigure1$score[dataFigure1$grp==2],         var.equal=T) ##  ##  Two Sample t-test ##  ## data:  dataFigure1$score[dataFigure1$grp == 1] and dataFigure1$score[dataFigure1$grp == 2] ## t = 1.7612, df = 48, p-value = 0.08458 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ##  -0.7082201 10.7082201 ## sample estimates: ## mean of x mean of y  ##       105       100"},{"path":"http://dcousin3.github.io/superb/articles/Vignette2.html","id":"the-origin-of-the-paradox","dir":"Articles","previous_headings":"","what":"The origin of the paradox","title":"Why use difference-adjusted confidence intervals?","text":"reason confidence intervals used “stand-alone”: can used examine, say, first group value 100. value outside interval, correct concluding first group’s mean significantly different 100 (level α\\alpha .05) 100, confirmed single-group t test: Likewise, second group’ mean significantly different 105 (happens first group’s mean): precisely purpose stand-alone confidence intervals: compare single result fix value. fix value (100 first group 105 second group) uncertainty, constant. contrast, two-group t test compares two means, two uncertain. Therefore, making confidence interval, necessary basic, stand-alone, confidence interval informed going compared —fix value— second quantity uncertain. Using language analyse variances, can say purpose plot compare means means, variances comparisons single groups isolation.","code":"t.test(dataFigure1$score[dataFigure1$grp==1], mu=100) ##  ##  One Sample t-test ##  ## data:  dataFigure1$score[dataFigure1$grp == 1] ## t = 2.5021, df = 24, p-value = 0.01956 ## alternative hypothesis: true mean is not equal to 100 ## 95 percent confidence interval: ##  100.8756 109.1244 ## sample estimates: ## mean of x  ##       105 t.test(dataFigure1$score[dataFigure1$grp==2], mu=105) ##  ##  One Sample t-test ##  ## data:  dataFigure1$score[dataFigure1$grp == 2] ## t = -2.4794, df = 24, p-value = 0.02057 ## alternative hypothesis: true mean is not equal to 105 ## 95 percent confidence interval: ##   95.83795 104.16205 ## sample estimates: ## mean of x  ##       100"},{"path":"http://dcousin3.github.io/superb/articles/Vignette2.html","id":"adjusting-the-error-bars","dir":"Articles","previous_headings":"","what":"Adjusting the error bars","title":"Why use difference-adjusted confidence intervals?","text":"Assuming variances roughly homogeneous group (assumption made t test, see ), simple adjustment can brought error bars: just increase length 2\\sqrt{2}. 2≈1.41\\sqrt{2} \\approx 1.41 means increasing length 41%. superbPlot, -called difference adjustment (Baguley, 2012) obtained easily adding adjustment list adjustments adjustments = list(purpose =  \"difference\"), seen . Figure 2. Mean scores along difference-adjusted 95% confidence interval two groups students quality learning behavior. usefulness superb apparent: required option mutate plot plot showing means stand-alone confidence intervals plot showing means difference-adjusted confidence intervals (Cousineau, Goulet, & Harding, 2021).","code":"superb(     score ~ grp,      dataFigure1,      adjustments= list(purpose = \"difference\"),  # the only new thing here     plotLayout = \"line\" ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"Difference-adjusted\\n95% confidence intervals\") + coord_cartesian( ylim = c(85,115) ) +  theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative\\ngames\", \"2\" = \"Unstructured\\nactivity\"))"},{"path":"http://dcousin3.github.io/superb/articles/Vignette2.html","id":"illustrating-the-impact-of-the-adjustments","dir":"Articles","previous_headings":"","what":"Illustrating the impact of the adjustments","title":"Why use difference-adjusted confidence intervals?","text":"Just comparison purposes, let’s show plots side--side. Figure 3. Two representation data unadjusted (left) adjusted (right) 95% confidence intervals second way compare two plots superimpose , Figure 4: Figure 4. Two representations results adjusted unadjusted error bars plot seen, difference-adjusted error bars wider. expected: purposes (comparing two means) introduces variability, variability always reduces precision.","code":"library(gridExtra) plt1 <- superb(     score ~ grp,      dataFigure1,      plotLayout = \"line\" ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"(stand-alone)\\n95% confidence intervals\") + coord_cartesian( ylim = c(85,115) ) + theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative\\ngames\", \"2\" = \"Unstructured\\nactivity\"))   plt2 <- superb(     score ~ grp,      dataFigure1,      adjustments= list(purpose = \"difference\"),      plotLayout = \"line\" ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"Difference-adjusted\\n95% confidence intervals\") + coord_cartesian( ylim = c(85,115) ) +  theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative\\ngames\", \"2\" = \"Unstructured\\nactivity\"))   plt <- grid.arrange(plt1, plt2, ncol=2) # generate the two plots, nudging the error bars, using distinct colors, and  # having the second plot's background transparent (with ``makeTransparent()`` ) plt1 <- superb(     score ~ grp,     dataFigure1,      errorbarParams = list(color=\"blue\",position = position_nudge(-0.05) ),     plotLayout = \"line\" ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"(red) Difference-adjusted 95% confidence intervals\\n(blue) (stand-alone) 95% confidence intervals\") + coord_cartesian( ylim = c(85,115) ) + theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative\\ngames\", \"2\" = \"Unstructured\\nactivity\"))    plt2 <- superb(     score ~ grp,     dataFigure1,      adjustments=list(purpose = \"difference\"),      errorbarParams = list(color=\"red\",position = position_nudge(0.05) ),     plotLayout = \"line\" ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"(red) Difference-adjusted 95% confidence intervals\\n(blue) (stand-alone) 95% confidence intervals\") + coord_cartesian( ylim = c(85,115) ) +  theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative\\ngames\", \"2\" = \"Unstructured\\nactivity\"))  # transform the ggplots into \"grob\" so that they can be manipulated plt1g <- ggplotGrob(plt1) plt2g <- ggplotGrob(plt2 + makeTransparent() )  # put the two grob onto an empty ggplot (as the positions are the same, they will be overlayed) ggplot() +      annotation_custom(grob=plt1g) +      annotation_custom(grob=plt2g)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette2.html","id":"two-options","dir":"Articles","previous_headings":"","what":"Two options","title":"Why use difference-adjusted confidence intervals?","text":"two methods adjust purpose error bars: \"difference\": method simplest. increases error bars factor 2\\sqrt{2} premise variances homogeneous \"tryon\": method, proposed Tryon (2001), used variances inhomogeneous. replaces 2\\sqrt{2} correction factor factor 2×E2 \\times E based heterogeneity variances. case error bars roughly homogeneous, visible difference \"difference\". See[Vignette 7] (https://dcousin3.github.io/superb/articles/Vignette7.html) option \"single\" used purpose obtain “stand-alone” error bars error bars compared priori determine value. error bars inapt perform pair-wise comparisons.","code":""},{"path":"http://dcousin3.github.io/superb/articles/Vignette2.html","id":"in-conclusion","dir":"Articles","previous_headings":"","what":"In conclusion","title":"Why use difference-adjusted confidence intervals?","text":"Adjusting confidence intervals important coherence test figure. claim difference show Figure 1, examinator (know, reviewer) may raise red flag cast doubt conclusions (opening door many rounds reviews rejection submitted work). coherence figures tests reported document one way improve clarity work. Coherence comes cheap: just need add figure caption “Difference-adjusted” “95% confidence intervals”.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"Why use correlation-adjusted confidence intervals?","text":"Consider study trying establish benefit using exercises improve visuo-spatial abilities onto scores statistics reasoning, measured standardized test scores ranging 50 150. design within-subject design, specifically pre-exercises measure post-exercises measure statistics reasoning. data available dataFigure2; snapshot large variation scores obtained t test scores treated independent fail detect difference: However, proper, paired-sample t-test used, find difference quite important: going ? can make plot properly display difference?","code":"head(dataFigure2) ##   id pre post ## 1  1 105  128 ## 2  2  96   96 ## 3  3  88  102 ## 4  4  80   88 ## 5  5  90   83 ## 6  6  86   99 t.test(dataFigure2$pre, dataFigure2$post, var.equal=TRUE) ##  ##  Two Sample t-test ##  ## data:  dataFigure2$pre and dataFigure2$post ## t = -1.1741, df = 48, p-value = 0.2462 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ##  -13.562724   3.562724 ## sample estimates: ## mean of x mean of y  ##       100       105 t.test(dataFigure2$pre, dataFigure2$post, var.equal=TRUE, paired = TRUE) ##  ##  Paired t-test ##  ## data:  dataFigure2$pre and dataFigure2$post ## t = -2.9046, df = 24, p-value = 0.007776 ## alternative hypothesis: true mean difference is not equal to 0 ## 95 percent confidence interval: ##  -8.552864 -1.447136 ## sample estimates: ## mean difference  ##              -5"},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"a-few-words-on-the-underlying-theory-optional","dir":"Articles","previous_headings":"","what":"A few words on the underlying theory (optional)","title":"Why use correlation-adjusted confidence intervals?","text":"Let’s examine data using plot participant’s scores shown line. get following: Figure 1. Representation individual participants seen, except 5 participants, vast majority participants upward trend results. Thus, upward trend probably reality dataset.","code":"library(reshape2)  # first transform the data in long format; the pre-post scores will go into column \"variable\" dataFigure2long <- melt(dataFigure2, id=\"id\")  # add transparency when pre is smaller or equal to post dataFigure2long$trans = ifelse(dataFigure2$pre <= dataFigure2$post,0.9,1.0)  # make a plot, with transparent lines when the score increased ggplot(data=dataFigure2long, aes(x=variable, y=value, group=id, alpha = trans)) +      geom_line( ) +     coord_cartesian( ylim = c(70,150) ) +     geom_abline(intercept = 102.5, slope = 0, colour = \"red\", linetype=2)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"centering-the-participants-to-better-see-the-trend","dir":"Articles","previous_headings":"A few words on the underlying theory (optional)","what":"Centering the participants to better see the trend","title":"Why use correlation-adjusted confidence intervals?","text":"One solution used Cousineau (2005) center participants’ data participants’ mean. consists computing participant mean score replace participant’s mean score overall mean. manipulation, participants now hover around overall mean (102.5, shown red dashed line). following realizes subject-centered plot participant. Figure 2. Representation subject-centered individual participants , see 5 participants, scores went . 20 remaining ones, trend upward. Thus, clear tendency exercices beneficial. Running adequate paired t test, find indeed difference strongly significant (t(24) = 2.9, p = .008):","code":"# use subjectCenteringTransform function  library(superb) df2 <- subjectCenteringTransform(dataFigure2, c(\"pre\",\"post\"))  # tranform into long format library(reshape2) dl2 <- melt(df2, id=\"id\")  # make the plot ggplot(data=dl2, aes(x=variable, y=value, colour=id, group=id)) + geom_line()+     coord_cartesian( ylim = c(70,150) ) +     geom_abline(intercept = 102.5, slope = 0, colour = \"red\", size = 0.5, linetype=2) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. t.test(dataFigure2$pre, dataFigure2$post, paired=TRUE) ##  ##  Paired t-test ##  ## data:  dataFigure2$pre and dataFigure2$post ## t = -2.9046, df = 24, p-value = 0.007776 ## alternative hypothesis: true mean difference is not equal to 0 ## 95 percent confidence interval: ##  -8.552864 -1.447136 ## sample estimates: ## mean difference  ##              -5"},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"what-is-the-impact-on-confidence-intervals","dir":"Articles","previous_headings":"A few words on the underlying theory (optional)","what":"What is the impact on confidence intervals?","title":"Why use correlation-adjusted confidence intervals?","text":"suggests within-subject designs can much powerful - subject design. long general trend visible participants, paired design afford statistical power. know general trend? easy solution compute correlation across pairs scores. R, can run following: find present dataset, correlation actually quite high, r≈.8r \\approx .8. Whenever correlation positive, statistical power benefits correlation. increased power means higher level precision, error bars shortened positive correlation. Estimating adjusted length error bars correlation process called decorrelation (Cousineau, 2019). date, three techniques proposed decorrelate measures. CM: method uses subject-centering followed bias-correction step (otherwise error bars slightly overestimated) (Cousineau, 2005; Morey, 2008). LM: method also uses subject-centering bias-correction two measurements, also equalizes length error bars using technique akin pooled standard deviation measure (Loftus & Masson, 1994). CA: newest proposal. directly uses correlation (mean pairwise correlation two measurement) adjust error bar length. nutshell, error bar length adjusted using multiplicative term 1−r\\sqrt{1-r}. example, $ r = .8$, adjustment 1−.8=0.44\\sqrt{1-.8} = 0.44. means error bars 44% length unadjusted error bars (, less half). Whichever method choose little bearing actual result. shown Cousineau (2019), three methods based general concepts generate little difference amount adjustments. present dataset, error bar shorten half! clearly shows benefit within-subject design precision.","code":"cor(dataFigure2$pre, dataFigure2$post) ## [1] 0.836611"},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"making-it-simple","dir":"Articles","previous_headings":"Getting a plot","what":"Making it simple","title":"Why use correlation-adjusted confidence intervals?","text":"suberb, decorrelation techniques available using adjustment decorrelation (Cousineau, Goulet, & Harding, 2021). simplest code following: Figure 3a. Means difference correlation-adjusted 95% confidence intervals Alternatively, data available long form, can specify measurements nested within subject identifier, id columm, result basic plot, matters confidence intervals adjusted can compare bars even repeated measures. Note confidence interval one point contain point, suggesting, , significant differencee.","code":"superb(     cbind(pre, post)~ ., # no between-group factor     dataFigure2,      WSFactors    = \"Moment(2)\",      adjustments = list(                     purpose = \"difference\",                      decorrelation = \"CA\"    ## NEW! use a decorrelation technique     ),      plotLayout  = \"line\" ) superb(     value ~ variable | id, # id identifies the within-subject measurements     dataFigure2long,      adjustments = list(                     purpose = \"difference\",                      decorrelation = \"CA\"    ## NEW! use a decorrelation technique     ),      plotLayout  = \"line\" )"},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"refining-the-plots","dir":"Articles","previous_headings":"Getting a plot","what":"Refining the plots","title":"Why use correlation-adjusted confidence intervals?","text":"following code, can decorate plot little bit, show side--side unadjusted plot (give erroneous result) adjusted plot. Figure 3b. Means 95% confidence intervals raw data (left) decorrelated data (right) plot, used decorrelation = \"CA\". Alternatively, use decorrelation = \"UA\" ``decorrelation = “CM”). two conditions, techniques return identical error bars.","code":"options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages library(gridExtra)  ## realize the plot with unadjusted (left) and ajusted (right) 95\\% confidence intervals plt2a <- superb(         cbind(pre, post) ~ .,         dataFigure2,          WSFactors    = \"Moment(2)\",          adjustments = list(purpose = \"difference\"),          plotLayout  = \"line\" ) +      xlab(\"Group\") + ylab(\"Score\") +      labs(title=\"Difference-adjusted\\n95% confidence intervals\") +     coord_cartesian( ylim = c(85,115) ) +     theme_gray(base_size=10) +      scale_x_discrete(labels=c(\"1\" = \"Collaborative games\", \"2\" = \"Unstructured activity\")) plt2b <- superb(         cbind(pre, post) ~ .,         dataFigure2,          WSFactors    = \"Moment(2)\",          adjustments = list(purpose = \"difference\", decorrelation = \"CA\"),  #only difference         plotLayout  = \"line\" ) +      xlab(\"Group\") + ylab(\"Score\") +      labs(title=\"Correlation and difference-adjusted\\n95% confidence intervals\") +     coord_cartesian( ylim = c(85,115) ) +      theme_gray(base_size=10) +     scale_x_discrete(labels=c(\"1\" = \"Collaborative games\", \"2\" = \"Unstructured activity\")) plt2  <- grid.arrange(plt2a,plt2b,ncol=2)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"illustrating-the-various-decorrelatin-techniques-","dir":"Articles","previous_headings":"Getting a plot","what":"Illustrating the various decorrelatin techniques.","title":"Why use correlation-adjusted confidence intervals?","text":"another example illustrating differences techniques, generated random data 5 measures amount correlation 0.8 population. Figure 4 , error bars superimposed plot. seen, minor differences three techniques. green lines length; main characteristic Loftus Masson approach, contrast two techniques. Figure 4. three decorelation techniques plot along un-decorrelated error bars","code":""},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"illustrating-individual-differences","dir":"Articles","previous_headings":"Getting a plot","what":"Illustrating individual differences","title":"Why use correlation-adjusted confidence intervals?","text":"superb, possible ask certain type plot. plotLayout used far \"line\" (default \"bar\"). Another basic style \"point\" (line connecting means). types plot exists apt showing summary statistics also individual scores ([6th Vignette] (https://dcousin3.github.io/superb/articles/Vignette6.html) shows develop custom-made layouts). illustrating individual differences, style proposed pointindividualline — per Figure 1— show individual scores along summary statistics error bars. example: Figure 5. Means 95% confidence intervals along individual scores depicted lines repeated-measure design involves two measurements, nice plot corset plot, mixture violin plot individuallines plot. can add option colorize=TRUE discriminate participants whose score decreased whose score remained flat increased. obtained Figure 5. Means 95% confidence intervals along individual scores depicted lines","code":"superb(     cbind(pre, post) ~ .,      dataFigure2,      WSFactors   = \"Moment(2)\",      adjustments = list(purpose = \"difference\", decorrelation = \"CM\"),      plotLayout  = \"pointindividualline\" ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(subtitle=\"Correlation- and Difference-adjusted\\n95% confidence intervals\") + coord_cartesian( ylim = c(70,150) ) + theme_bw(base_size=10) +  scale_x_discrete(labels=c(\"1\" = \"Collaborative games\", \"2\" = \"Unstructured activity\")) superb(     cbind(pre, post) ~ .,      dataFigure2,      WSFactors   = \"Moment(2)\",      adjustments = list(purpose = \"difference\", decorrelation = \"CM\"),      plotLayout  = \"corset\",     lineParams = list(colorize=\"bySlope\"),      violinParams = list(fill=\"green\", alpha = .2) ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(subtitle=\"Correlation- and Difference-adjusted\\n95% confidence intervals\") + coord_cartesian( ylim = c(70,150) ) + theme_bw(base_size=10) +  scale_x_discrete(labels=c(\"1\" = \"Collaborative games\", \"2\" = \"Unstructured activity\")) + scale_color_manual('Direction\\n of change', values=c(\"blue\",\"red\"), labels=c('decreasing', 'increasing')) + theme(legend.position=c(0.5,0.8), panel.border = element_blank(), legend.background =  element_blank() )"},{"path":"http://dcousin3.github.io/superb/articles/Vignette3.html","id":"in-conclusion","dir":"Articles","previous_headings":"","what":"In conclusion","title":"Why use correlation-adjusted confidence intervals?","text":"major obstacle use adjusted error bars difficulty obtain . None statistical software (e.g., SPSS, SAS) provide adjustments. way around compute manually. Although complicated, requires manipulations, whether done EXCEL, macros (e.g., WSPlot, O’Brien & Cousineau, 2014). present function renders adjustments mere option function.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette4.html","id":"changing-the-summary-function-to-be-plotted","dir":"Articles","previous_headings":"","what":"Changing the summary function to be plotted","title":"Using a custom statistic with its error bar within ``superb``","text":"follow, use GRD() generate random dataset interaction (see Vignette 6) make plots varying statistics displayed. Figure 1. Various statistics various measures precisions","code":"# shut down 'warnings', 'design' and 'summary' messages options(superb.feedback = 'none')   # Generate a random dataset from a (3 x 2) design, entirely within subject. # The sample size is very small (n=5) and the correlation between scores is high (rho = .8) dta <- GRD(      WSFactors  = \"Moment(3): Dose(2)\",      Effects    = list(\"Dose*Moment\"=custom(0,0,0,1,1,3)),      SubjectsPerGroup = 50,      Population = list( mean=10, stddev = 5, rho = .80) )  # a quick function to call superbPlot makeplot <- function(statfct, errorbarfct, gam, rg, subttl) {     superb(         crange(DV.1.1,DV.3.2) ~ .,          dta,          WSFactors  = c(\"Moment(3)\",\"Dose(2)\"),          statistic  = statfct,          errorbar   = errorbarfct,          gamma      = gam,          plotLayout = \"line\",         adjustments = list(purpose=\"difference\", decorrelation=\"CM\")     ) + ylab(subttl) + coord_cartesian( ylim = rg ) }   p1 <- makeplot(\"mean\",      \"CI\", .95, c(6,14), \"Mean +- 95% CI of the mean\") p2 <- makeplot(\"mean\",      \"SE\", .00, c(6,14), \"Mean +- SE of the mean\") p3 <- makeplot(\"median\",    \"CI\", .95, c(6,14), \"Median +- 95% CI of the median\") p4 <- makeplot(\"fisherskew\",\"CI\", .95, c(-2,+2), \"Fisher skew +- 95% CI\")  library(gridExtra) p <- grid.arrange(p1,p2,p3,p4, ncol=2)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette4.html","id":"determining-that-a-summary-function-is-valid-to-use-in-superbplot","dir":"Articles","previous_headings":"","what":"Determining that a summary function is valid to use in superbPlot","title":"Using a custom statistic with its error bar within ``superb``","text":"summary function can accepted superbPlot, long given within double-quote. built-statistics functions mean median can given. Actually, descriptive statistics, just central tendency, can provided. includes IQR, mad, etc. valid, function must return number given vector numbers. doubt, can test function valid superbPlot (note triple colon): Likewise, error bar function can accepted superbPlot. functions must named two part, separated dot \"interval function\".\"descriptive statistic\". example, function CI.mean confidence interval mean. functions SE.mean, SE.median, CI.fisherskew, etc. superb library provides 20+ functions. Harding, Tremblay, & Cousineau (2014) Harding, Tremblay, & Cousineau (2015) reviewed functions. error bar functions can three types: function returns width. Standard error functions example type function. width function, error bar extend plus minus width around descriptive statistics. interval function. functions returns actual lower upper limits interval therefore used draw bar (.e., relative descriptive statistics). Confidence interval functions type. \"none\". keyword produces error bar null width. interval function can tested see exists: see gamma required certain interval function, can try","code":"superb:::is.stat.function(\"mean\") ## [1] TRUE superb:::is.errorbar.function(\"SE.mean\") ## [1] TRUE superb:::is.gamma.required(\"SE.mean\") ## [1] FALSE"},{"path":"http://dcousin3.github.io/superb/articles/Vignette4.html","id":"creating-a-custom-made-descriptive-statistic-function-to-be-used-in-superbplot","dir":"Articles","previous_headings":"","what":"Creating a custom-made descriptive statistic function to be used in superbPlot","title":"Using a custom statistic with its error bar within ``superb``","text":"example, create scratch descriptive statistic function fed superbPlot. Following Wilcox (2011) , implement 20% trimmed mean. descriptive statistic used estimate population mean. However, said robust statistic less affected suspicious data. Herein, use data dataFigure1. function, can ask plot function Figure 2. superbPlot custom-made descriptive statistic function","code":"# create a descriptive statistics, the 20% trimmed mean     trimmedmean    <- function(x) mean(x, trim = 0.2)      # we can test it with the data from group 1...     grp1 <- dataFigure1$score[dataFigure1$grp==1]     grp2 <- dataFigure1$score[dataFigure1$grp==2]     trimmedmean(grp1) ## [1] 106.2667 # or check that it is a valid statistic function     superb:::is.stat.function(\"trimmedmean\") ## [1] TRUE superb(     score ~ grp,     dataFigure1,      statistic = \"trimmedmean\", errorbar = \"none\", #HERE the statistic name is given     plotLayout = \"line\",     adjustments = list(purpose = \"difference\"),     errorbarParams = list(width=0) # so that the null-width error bar is invisible )+ ylab(\"20% trimmed mean\") + theme_gray(base_size=10) + labs(title=\"20% trimmed mean with \\nno error bars\") + coord_cartesian( ylim = c(85,115) )"},{"path":"http://dcousin3.github.io/superb/articles/Vignette4.html","id":"creating-a-custom-made-interval-function-to-be-used-in-superbplot","dir":"Articles","previous_headings":"","what":"Creating a custom-made interval function to be used in superbPlot","title":"Using a custom statistic with its error bar within ``superb``","text":"also possible create custom-made confidence interval functions. Hereafter, add confidence interval 20% trimmed mean. use approach documented Wilcox (Wilcox, 2011) requires computing winsorized standard deviation winsor.sd available psych library (Revelle, 2020). need make plot error bars! Figure 3. superbPlot custom-made descriptive sttistic function advantage measure central tendancy robust estimator. Robust measures less likely adversly affected suspicious data outliers. See Wilcox (2011) robust estimation.","code":"library(psych)      # for winsor.sd  CI.trimmedmean <- function(x, gamma = 0.95){     trim <- 0.2     g    <- floor(length(x) * 0.4)     tc   <- qt(1/2+gamma/2, df=(length(x)-g-1) )     lo   <- tc * winsor.sd(x, trim =0.2) / ((1-2*trim)*sqrt(length(x)))     c(trimmedmean(x) -lo, trimmedmean(x)+lo) }  # we test as an example the data from group 1 CI.trimmedmean(grp1) ## [1] 101.7281 110.8052 # or check that it is a valid interval function superb:::is.errorbar.function(\"CI.trimmedmean\") ## [1] TRUE superb(     score ~ grp,      dataFigure1,      statistic = \"trimmedmean\", errorbar = \"CI\",     plotLayout = \"line\",     adjustments = list(purpose = \"difference\"), )+ ylab(\"20% trimmed mean\") + theme_gray(base_size=10) + labs(title=\"20% trimmed mean with \\n95% confidence interval of 20% trimmed mean\") + coord_cartesian( ylim = c(85,115) )"},{"path":"http://dcousin3.github.io/superb/articles/Vignette4.html","id":"creating-bootstrap-based-confidence-intervals","dir":"Articles","previous_headings":"","what":"Creating bootstrap-based confidence intervals","title":"Using a custom statistic with its error bar within ``superb``","text":"also possible create bootstrap estimates confidence intervals integrate superb. general idea subsample replacement sample compute subsample descriptive statistics. process repeated large number times (, 10,000) quantiles containing, say, 95% results 95% precision interval (call precision interval bootstrap estimates sampling variability, predictive variability). , illustrate process mean. function must name “interval function.mean”, choose call myBootstrapCI.mean. need make plot can compare parametric CI Figure 4. superbPlot custom-made interval function. seen, much difference two. expected: normality assumption invalid, parametric confidence intervals mean (based assumption) identical average bootstrap approach.","code":"# we define myBootstrapPI which subsample the whole sample, here called X myBootstrapPI.mean <- function(X, gamma = 0.95) {   res = c()   for (i in 1:10000) {     res[i] <- mean(sample(X, length(X), replace = T))   }   quantile(res, c(1/2 - gamma/2, 1/2 + gamma/2)) }  # we check that it is a valid interval function superb:::is.errorbar.function(\"myBootstrapPI.mean\") ## [1] TRUE plt1 <- superb(     score ~ grp,      dataFigure1,      plotLayout = \"line\",     statistic = \"mean\", errorbar = \"CI\",     adjustments = list(purpose = \"difference\") ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"means and difference-adjusted\\n95% confidence intervals\") + coord_cartesian( ylim = c(85,115) ) + theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative games\", \"2\" = \"Unstructured activity\"))  plt2 <- superb(     score ~ grp,      dataFigure1,      plotLayout = \"line\",     statistic = \"mean\", errorbar = \"myBootstrapPI\",     adjustments = list(purpose = \"difference\") ) +  xlab(\"Group\") + ylab(\"Score\") +  labs(title=\"means and difference-adjusted\\n95% bootstrap confidence intervals\") + coord_cartesian( ylim = c(85,115) ) + theme_gray(base_size=10) + scale_x_discrete(labels=c(\"1\" = \"Collaborative games\", \"2\" = \"Unstructured activity\"))  library(gridExtra) plt <- grid.arrange(plt1, plt2, ncol=2)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette4.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Using a custom statistic with its error bar within ``superb``","text":"function superbPlot() entirely customizable: can put descriptive statistic function interval function superbPlot(). sense, superbPlot() simply proxy manage dataset produces standardized dataframes apt transmitted ggplot() specification. also possible obtain summary dataframe issuing argument showPlot = FALSE using related function superbData(). function superbPlot also customizable regards plot produced. Included package superbPlot.line : shows results points lines, superbPlot.point: shows results points , superbPlot.bar : shows results using bars, superbPlot.pointjitter: shows results points, raw data jittered points, superbPlot.pointjitterviolin: also shows violin plot behind jitter points, superbPlot.pointindividualline: show results fat points, individual results thin lines, superbPlot.raincloud: show results along clouds (violin distributions) rain drops (jittered raw data), Vignette 5 shows create new layouts. Proposals welcome!","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"the-built-in-plot-layouts","dir":"Articles","previous_headings":"","what":"The built-in plot layouts","title":"Using a custom plot layout within ``superb``","text":"calling superbPlot(), use plotLayout = \"layout\" option indicate layout wish use. Internally, superbPlot() calling function whose name superbPlot.\"layout\"(). example, plotLayout = \"line\", plot actually performed function superbPlot.line(). seven layout available superbPlot package : superbPlot.line() : shows results points lines, superbPlot.lineBand(): Shows confidence intervals semi-transparent band rather bars. superbPlot.point(): shows results points , superbPlot.bar() : shows results using bars, superbPlot.pointjitter(): shows results points, raw data jittered points, superbPlot.pointjitterviolin(): also shows violin plot behind jitter points, superbPlot.pointindividualline(): show results fat points, individual results thin lines, superbPlot.raincloud(): Shows results distribution jitter. determine certain function superbPlot-compatible, use following function: put quote name function. devising , custom-made function, good thing check superbPlot-compatible.","code":"superb:::is.superbPlot.function(\"superbPlot.line\") ## [1] TRUE"},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"illustrating-some-of-the-built-in-layouts","dir":"Articles","previous_headings":"","what":"Illustrating some of the built-in layouts","title":"Using a custom plot layout within ``superb``","text":"get sense currently available layouts, first generate dataset composed randomly generated scores mimicking 3 ×\\times 2 design three degrees Difficulties (-group factor) two days testing (within-subject factor). believed (simulated) two factors main effets scores. simplicity, define function whose arguments dataset layout: Lets compute plots first six built-layouts show Figure 1a. Look six built-layouts random dataset cool format, raincloud plot (Allen et al., 2021), better seen coordinates flipped : Figure 1b. seventh layout, raincloud Finally, following shows latest layout, box plot, better showing median confidence interval median, obtained Figure 1c. Box plot data controls, can manually set colors, fills /shapes, done list: Figure 2a. six built-template ornamental styling added. just examples. However, layouts fit needs, possible devise custom-made layout inform superbPlot use . end, see instructions .","code":"testdata <- GRD(     RenameDV   = \"score\",      SubjectsPerGroup = 25,      BSFactors  = \"Difficulty(3)\",      WSFactors  = \"Day(day1, day2)\",     Population = list(mean = 65,stddev = 12,rho = 0.5),     Effects    = list(\"Day\" = slope(-5), \"Difficulty\" = slope(3) ) ) head(testdata) ##   id Difficulty score.day1 score.day2 ## 1  1          1   48.41842   46.48222 ## 2  2          1   39.20464   34.13779 ## 3  3          1   64.06890   72.84983 ## 4  4          1   47.05107   39.08316 ## 5  5          1   63.65844   55.26597 ## 6  6          1   54.97189   57.51968 mp <- function(data, style, ...) {     superb(         cbind(score.day1, score.day2) ~ Difficulty,         data,         WSFactors = \"Day(2)\",         adjustments = list(purpose=\"difference\", decorrelation=\"CA\"),         plotLayout = style,         ...     )+labs(title = paste(\"Layout is ''\",style,\"''\",sep=\"\")) } p1 <- mp(testdata, \"bar\") p2 <- mp(testdata, \"point\") p3 <- mp(testdata, \"line\") p4 <- mp(testdata, \"pointjitter\" ) p5 <- mp(testdata, \"pointjitterviolin\") p6 <- mp(testdata, \"pointindividualline\")  library(gridExtra) grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2) mp(testdata, \"raincloud\") + coord_flip() mp(testdata, \"boxplot\", statistic = \"median\", pointParams = list(color=\"orange\")) ornate = list(      scale_colour_manual( name = \"Difference\",          labels = c(\"Easy\", \"Hard\", \"Unthinkable\"),          values = c(\"blue\", \"black\", \"purple\")) ,     scale_fill_manual( name = \"Difference\",          labels = c(\"Easy\", \"Hard\", \"Unthinkable\"),          values = c(\"blue\", \"black\", \"purple\")) ,     scale_shape_manual( name = \"Difference\",          labels = c(\"Easy\", \"Hard\", \"Unthinkable\") ,         values = c(0, 10, 13)) ,     theme_bw(base_size = 9) ,     labs(x = \"Days of test\", y = \"Score in points\" ),     scale_x_discrete(labels=c(\"1\" = \"Former day\", \"2\" = \"Latter day\")) ) library(gridExtra) grid.arrange(     p1+ornate, p2+ornate, p3+ornate,     p4+ornate, p5+ornate, p6+ornate,     ncol=2)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"devising-a-custom-made-plot-layout","dir":"Articles","previous_headings":"","what":"Devising a custom-made plot layout","title":"Using a custom plot layout within ``superb``","text":"nutshell, purpose superbPlot() compile summary information (location summary statistic, upper width lower width interval) , level factors; applies adjustments needed producing summary; finally, calls plot function accepting pre-defined arguments devising plot function, important () function name begins superbPlot.; (ii) function accept specific arguments precise names. header function corresponding plot style called, say, foo (plotLayout = \"foo\"): follow, assumed one factor placed horizontal axis (xfactor), another one used group point (groupingfactor), two additional factors results columns rows panels (addfactors; course, devising template, may use different placement). superbPlot() restricted maximum four factors. arguments : summarydata: data frame contain column center indicating statistic’s value, lowerwidth upperwidth indicating many units center error bar extends. data frame also columns factors, many lines combinations factors. xfactor factor put horizontal axis; groupingfactor factor used create groups points; addfactors two additional factors create rows columns panels. addfactors formatted facetting (e.g., factors “” “B”, addfactors “~B”); rawdata : data.frame contains raw data factors transformed .factor dependent column renamed DV. data wide format, rawdata reshaped long format. {optional arguments} can used. must named ; calling superbPlot(), argument whose name match optional argument transmitted custom-made function.","code":"superbPlot.foo <- function(     summarydata,     xfactor,            groupingfactor,     addfactors,      rawdata             # any optional argument you wish ) {     plot <- ggplot() ## ggplot instructions...             return(plot) }"},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"the-simplest-example","dir":"Articles","previous_headings":"","what":"The simplest example","title":"Using a custom plot layout within ``superb``","text":"follow simple example design template call simple. layout display descriptive statistics error bars. Everything black white (color instruction) superimposed (grouping instruction). result : Figure 3. Mean score 95% confidence interval using simple plot layout. make plot, design function superbPlot.simple : first instruction, ggplot defines source data summarydata horizontal axis string xfactor (piece instructions !!sym( ) converts string variable). position descriptive statistics automatically computed stored column called center. second instruction put points center, third instruction places error bars. case, ymin ymax information contained center+lowerwidth center+upperwidth lowerwidth upperwidth automaticall computed stored summarydata dataframe. last instructions generates distinct panels level remaining factors. can check function superbPlot-compatible : TRUE, ready use layout, demo dataset TMB1964r whose result shown Figure 3:","code":"superbPlot.simple <- function(     summarydata, xfactor, groupingfactor, addfactors, rawdata ) {     plot <- ggplot(         data = summarydata,          mapping = aes( x = !!sym(xfactor), y = center, group = !!sym(groupingfactor) )     ) +     geom_point(  ) +     geom_errorbar( mapping = aes(ymin = center + lowerwidth,                                   ymax = center + upperwidth)  )+      facet_grid( addfactors )              return(plot) } superb:::is.superbPlot.function(\"superbPlot.simple\") ## [1] TRUE superb(     crange(T1,T7) ~ Condition,     TMB1964r,     WSFactors = \"T(7)\",           plotLayout = \"simple\" )"},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"optional-arguments","dir":"Articles","previous_headings":"","what":"Optional arguments","title":"Using a custom plot layout within ``superb``","text":"simple layout accept optional arguments. integrate optional arguments, one method insert graphic directives inside layers, e.g., inside geom_point. convenient method .call modifyList, example: full example therefore example, parameters sent geom_point geom_errorbar. left exercice reader use two distinct sets optional parameters, one points, error bars.","code":"do.call( geom_point, modifyList(    list( size= 3 ##etc., the default directives##    ), myownParams )) superbPlot.simpleWithOptions <- function(     summarydata, xfactor, groupingfactor, addfactors, rawdata,     myownpointParams = list(),  ## will be used to add the optional arguments to the function     myownebParams    = list()  ## will be used to add the optional arguments to the function ) {     plot <- ggplot(         data = summarydata,          mapping = aes( x = !!sym(xfactor), y = center, group=Condition)     ) +     do.call( geom_point, modifyList(         list( color =\"black\" ),         myownpointParams     )) +      do.call( geom_errorbar, modifyList(         list( mapping = aes(ymin = center + lowerwidth,                              ymax = center + upperwidth)  ),         myownebParams      )) +      facet_grid( addfactors )              return(plot) } superb:::is.superbPlot.function(\"superbPlot.simpleWithOptions\") ## [1] TRUE superb(     crange(T1,T7) ~ Condition,     TMB1964r,     WSFactors = \"T(7)\",           plotLayout = \"simpleWithOptions\",      ## here goes the optional arguments     myownpointParams = list(size=1, color=\"purple\", position = position_dodge(width = 0.3) ),      myownebParams = list(linewidth=1, color=\"purple\", position = position_dodge(width = 0.3) )  )"},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"getting-feedback-information","dir":"Articles","previous_headings":"","what":"Getting feedback information","title":"Using a custom plot layout within ``superb``","text":"sometimes useful extract variables function debugging code. useful function use runDebug(). function (shipped suberb) display text transfer variables want global environment. example, following get dataframes: see Dumping two dataframes followed summary raw. two variables now global environment can manipulate . can also use testing plotting functions, example","code":"options(superb.feedback = 'all') runDebug( 'where are we?', \"Text to show when we get there\",   c(\"variable1\", \"variable2\", \"etc\"),   list( \"var1InTheFct\", \"var2InTheFct\", \"varetcInTheFct\") ) ## ==> Text to show when we get there <== ##     variables dumped in: variable1, variable2, etc superbPlot.empty <- function(     summarydata, xfactor, groupingfactor, addfactors, rawdata  ) {     runDebug( 'inempty', \"Dumping the two dataframes\",         c(\"summary\",\"raw\"), list(summarydata, rawdata))      plot <- ggplot() # an empty plot             return(plot) } options(superb.feedback = 'inempty')  ## turn on feedback when reaching 'inempty' superb(     crange(T1,T7) ~ Condition,     TMB1964r,     WSFactors = \"T(7)\",           plotLayout = \"empty\"  ) ## ==> Dumping the two dataframes <== ##     variables dumped in: summary, raw superbPlot.simple(summary, \"T\", \"Condition\", \".~.\", raw)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette5.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"Using a custom plot layout within ``superb``","text":"follow, create toy example raw data shown smileys. Note example may work Rstudio (see “limitation” emojifont page ) first need emojifont library define \"smiley\" layout emojis shown geom_text layer: check superbPlot-compatible function: need! layout can inserted superbPlot call: Figure 5. smile!","code":"# install.packages(\"emojifont\") library(emojifont) superbPlot.smiley <- function( summarydata, xfactor, groupingfactor, addfactors, rawdata ) {     # the early part bears on summary data with variable \"center\"     plot <- ggplot(         data    = summarydata,          mapping = aes(             x      = !!sym(xfactor),              y      = center,              fill   = !!sym(groupingfactor),              shape  = !!sym(groupingfactor),              colour = !!sym(groupingfactor) )     ) +     geom_point(position = position_dodge(width = .95)) +     geom_errorbar( width = .6, position = position_dodge(.95),                mapping = aes(ymin = center + lowerwidth, ymax = center + upperwidth)      )+      # this part bears on the rawdata only with variable \"DV\"     geom_text(data = rawdata,                position = position_jitter(0.5),               family   = \"EmojiOne\",               label    = emoji(\"smile\"),                size     = 6,                mapping  = aes(x = !!sym(xfactor), y = DV, group = !!sym(groupingfactor) )     ) +     facet_grid( addfactors )              return(plot) } superb:::is.superbPlot.function(\"superbPlot.smiley\") ## [1] TRUE superb(     crange(T1,T7) ~ Condition,     TMB1964r,     WSFactors = \"T(7)\",           plotLayout = \"smiley\" )"},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"simplest-specification","dir":"Articles","previous_headings":"","what":"Simplest specification","title":"Generating ready-to-analyze datasets with GRD","text":"simplest use relies default value: default, one hundred scores generated normal distribution mean 0 standard deviation 1. words, generate 100 z scores. dependent variable, last column dataframe generated called default DV. first column “id” column containing number identifying simulated participant. change dependent variable’s name, use","code":"dta <- GRD() ## ------------------------------------------------------------  ## Design is:  with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 100 total subjects ): ##   100 ##  ------------------------------------------------------------ head(dta) ##   id          DV ## 1  1 -1.40004352 ## 2  2  0.25531705 ## 3  3 -2.43726362 ## 4  4 -0.00557129 ## 5  5  0.62155272 ## 6  6  1.14841160 dta <- GRD( RenameDV = \"score\" ) ## ------------------------------------------------------------  ## Design is:  with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 100 total subjects ): ##   100 ##  ------------------------------------------------------------"},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"data-from-a-design-with-between-subject-factors-and-within-subject-factors-","dir":"Articles","previous_headings":"","what":"Data from a design with between-subject factors and within-subject factors.","title":"Generating ready-to-analyze datasets with GRD","text":"add various groups dataset, use argument BSFactors, 100 random z scores three groups, total 300 data. group number given additional column, called Group. factorial design can generated one factors, results 2 ×\\times 3, , 6 different groups, crossing levels Surgery (1 2) levels Therapy (1, 2 3). levels can receive names rather number, Finally, within-subject factors can also given, within-subject designs, repeated measures appear distinct columns (“DV.C1”, “DV.C2”, “DV.C3” ). format called wide format, meaning repeated measures line given simulated participant.","code":"dta <- GRD( BSFactors = 'Group(3)') ## ------------------------------------------------------------  ## Design is: 3 with 3 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 3 groups ) : ##  Group; levels: 1, 2, 3 ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 300 total subjects ): ##   100 ##  ------------------------------------------------------------ dta <- GRD( BSFactors = c('Surgery(2)', 'Therapy(3)') ) ## ------------------------------------------------------------  ## Design is: 2 x 3 with 6 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 6 groups ) : ##  Surgery; levels: 1, 2 ##  Therapy; levels: 1, 2, 3 ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 600 total subjects ): ##   100 ##  ------------------------------------------------------------ dta <- GRD(     BSFactors = c('Surgery(yes, no)', 'Therapy(CBT,Control,Exercise)') ) ## ------------------------------------------------------------  ## Design is: 2 x 3 with 6 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 6 groups ) : ##  Surgery; levels: yes, no ##  Therapy; levels: CBT, Control, Exercise ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 600 total subjects ): ##   100 ##  ------------------------------------------------------------ unique(dta$Surgery) ## [1] \"yes\" \"no\" unique(dta$Therapy) ## [1] \"CBT\"      \"Control\"  \"Exercise\" dta <- GRD(     BSFactors = c('Surgery(yes,no)', 'Therapy(CBT, Control,Exercise)'),     WSFactors = 'Contrast(C1,C2,C3)', ) ## ------------------------------------------------------------  ## Design is: 2 x 3 x ( 3 ) with 6 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 6 groups ) : ##  Surgery; levels: yes, no ##  Therapy; levels: CBT, Control, Exercise ## 2.Within-Subject Factors ( 3 repeated measures ): ##  Contrast; levels : C1, C2, C3 ## 3.Subjects per group ( 600 total subjects ): ##   100 ##  ------------------------------------------------------------"},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"deciding-the-sample-sizes","dir":"Articles","previous_headings":"","what":"Deciding the sample sizes","title":"Generating ready-to-analyze datasets with GRD","text":"default generate 100 participants -subject groups. default can changed SubjectsPerGroup. straigthforward specification , e.g., SubjectsPerGroup = 25 25 participants groups. Unequal group sizes can specified :","code":"dta <- GRD(     BSFactors = \"Therapy(3)\",     SubjectsPerGroup = c(2, 5, 1) ) ## ------------------------------------------------------------  ## Design is: 3 with 3 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 3 groups ) : ##  Therapy; levels: 1, 2, 3 ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 8 total subjects ): ##   2 5 1 ##  ------------------------------------------------------------ dta ##   id Therapy          DV ## 1  1       1 -0.03173968 ## 2  2       1 -1.15996668 ## 3  3       2  1.95394186 ## 4  4       2 -1.79987173 ## 5  5       2 -0.10192789 ## 6  6       2  0.90432320 ## 7  7       2  1.04921417 ## 8  8       3  0.44082485"},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"choosing-the-population-distribution","dir":"Articles","previous_headings":"","what":"Choosing the population distribution","title":"Generating ready-to-analyze datasets with GRD","text":"sample random data, necessary specify theoretical population distribution. default use normal distribution (famous “bell-shaped” curve). population grand mean (GM, μ\\mu) given element mean standard deviation (σ\\sigma) given element stddev. can redefined using argument Population list relevant elements. following example, IQ simulated :  (increase number participants using SubjectsPerGroup say 10,000, bell-shape curve evident!). Internally, call GRD() use rnorm generate scores, passing along mean parameter grand mean (internally called GM) standard deviation parameter provided standard deviation (internally called STDDEV). can explicitly stated using element scores : Using scores, possible alter parameters, example, mean proportional group number, standard deviation proportional group number, :  valid R instruction placed scores arguments, scores = \"rnorm(1, mean = GM, sd = ifelse(Group==1,10,50) )\" select standard deviation according Group scores = \"1\" generate constants. theoretical distributions can also chosen, :","code":"dta <- GRD(     RenameDV = \"IQ\",     Population=list(mean=100,stddev=15) ) ## ------------------------------------------------------------  ## Design is:  with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 100 total subjects ): ##   100 ##  ------------------------------------------------------------ hist(dta$IQ) dta <- GRD(     BSFactors = \"Group(2)\",     Population = list(         mean   = 100,         # this set GM to 100         stddev = 15,        # this set STDDEV to 15         scores = \"rnorm(1, mean = GM, sd = STDDEV )\"     ) ) ## ------------------------------------------------------------  ## Design is: 2 with 2 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 2 groups ) : ##  Group; levels: 1, 2 ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 200 total subjects ): ##   100 ##  ------------------------------------------------------------ dta <- GRD(     BSFactors = \"Group(2)\",     Population = list(         mean   = 100,       # this set GM to 100         stddev = 15,        # this set STDDEV to 15         scores = \"rnorm(1, mean = GM, sd = Group * STDDEV )\"     ) ) ## ------------------------------------------------------------  ## Design is: 2 with 2 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 2 groups ) : ##  Group; levels: 1, 2 ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 200 total subjects ): ##   100 ##  ------------------------------------------------------------ superb(     DV ~ Group,     dta,     plotLayout = \"pointjitterviolin\" ) dta <- GRD(SubjectsPerGroup = 5000,     RenameDV = \"RT\",     Population=list(         scores = \"rweibull(1, shape=2, scale=40)+250\"     ) ) ## ------------------------------------------------------------  ## Design is:  with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 5000 total subjects ): ##   5000 ##  ------------------------------------------------------------ hist(dta$RT,breaks=seq(250,425,by=5))"},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"getting-effects-on-one-or-some-of-the-factors","dir":"Articles","previous_headings":"","what":"Getting effects on one or some of the factors","title":"Generating ready-to-analyze datasets with GRD","text":"possible generate non-null effects factors using argument Effects. Effects can slope(x) (increase x points level factor), extent(x) (total increase x levels), custom(x, y, etc) effect x point first level factor, y point second, etc. slope, effect:  Effects can also R code manipulating factors, using Rexpression. One example:  Repeated measures can also generated multivariate normal distribution correlation rho, , e.g.,  case multivariate normal distribution, parameters mean standard deviations can vectors length equal number repeated measures. However, covariances constants.","code":"dta <- GRD(     BSFactors = 'Therapy(CBT, Control, Exercise)',     WSFactors = 'Contrast(3)',     SubjectsPerGroup = 1000,     Effects = list('Contrast' = slope(2)) ) ## ------------------------------------------------------------  ## Design is: 3 x ( 3 ) with 3 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 3 groups ) : ##  Therapy; levels: CBT, Control, Exercise ## 2.Within-Subject Factors ( 3 repeated measures ): ##  Contrast; levels : 1, 2, 3 ## 3.Subjects per group ( 3000 total subjects ): ##   1000 ##  ------------------------------------------------------------ superb(     crange(DV.1, DV.3) ~ Therapy,     dta,     WSFactors = \"Contrast(3)\",     plotLayout= \"line\" ) dta <- GRD(     BSFactors = 'Therapy(CBT,Control,Exercise)',     WSFactors = 'Contrast(3) ',     SubjectsPerGroup = 1000,     Effects = list(         \"code1\"=Rexpression(\"if (Therapy =='CBT'){-1} else {0}\"),         \"code2\"=Rexpression(\"if (Contrast ==3) {+1} else {0}\")     ) ) ## ------------------------------------------------------------  ## Design is: 3 x ( 3 ) with 3 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 3 groups ) : ##  Therapy; levels: CBT, Control, Exercise ## 2.Within-Subject Factors ( 3 repeated measures ): ##  Contrast; levels : 1, 2, 3 ## 3.Subjects per group ( 3000 total subjects ): ##   1000 ##  ------------------------------------------------------------ superb(     crange(DV.1, DV.3) ~ Therapy,         dta,     WSFactors = \"Contrast(3)\",     plotLayout= \"line\" ) dta <- GRD(     WSFactors = 'Difficulty(1, 2)',     SubjectsPerGroup = 1000,     Population=list(mean = 0,stddev = 20, rho = 0.5) ) ## ------------------------------------------------------------  ## Design is: ( 2 ) with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 2 repeated measures ): ##  Difficulty; levels : 1, 2 ## 3.Subjects per group ( 1000 total subjects ): ##   1000 ##  ------------------------------------------------------------ plot(dta$DV.1, dta$DV.2) dta <- GRD(     WSFactors = 'Difficulty(1, 2)',     SubjectsPerGroup = 1000,     Population=list(mean = c(10,2),stddev= c(1,0.2),rho =-0.85) ) ## ------------------------------------------------------------  ## Design is: ( 2 ) with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 2 repeated measures ): ##  Difficulty; levels : 1, 2 ## 3.Subjects per group ( 1000 total subjects ): ##   1000 ##  ------------------------------------------------------------ plot(dta$DV.1, dta$DV.2)"},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"contaminate-your-samples","dir":"Articles","previous_headings":"","what":"Contaminate your samples!","title":"Generating ready-to-analyze datasets with GRD","text":"Contaminants can inserted simulated data using Contaminant. argument works exactly like Population except additional option proportion indicates proportion contaminants samples:  Contaminants can normally distributed () come theoretical distribution can simulated R:  Finally, contaminants can used add missing data (missing completely random) :","code":"dta <- GRD(SubjectsPerGroup = 5000,     Population= list( mean=100, stddev = 15 ),     Contaminant=list( mean=200, stddev = 15, proportion = 0.10 ) ) ## ------------------------------------------------------------  ## Design is:  with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 5000 total subjects ): ##   5000 ##  ------------------------------------------------------------ hist(dta$DV,breaks=seq(-25,300,by=2.5)) dta <- GRD(SubjectsPerGroup = 10000,     Population=list( mean=100, stddev = 15 ),     Contaminant=list( proportion = 0.10,         scores=\"rweibull(1,shape=1.5, scale=30)+1.5*GM\") ) ## ------------------------------------------------------------  ## Design is:  with 1 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 1 groups ) : ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 10000 total subjects ): ##   10000 ##  ------------------------------------------------------------ hist(dta$DV,breaks=seq(0,365,by=2.5)) dta <- GRD( BSFactors=\"grp(2)\",     WSFactors = \"Moment (2)\",     SubjectsPerGroup = 1000,     Effects = list(\"grp\" = slope(100) ),     Population=list(mean=0,stddev=20,rho= -0.85),     Contaminant=list(scores = \"NA\", proportion=0.2) ) ## ------------------------------------------------------------  ## Design is: 2 x ( 2 ) with 2 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 2 groups ) : ##  grp; levels: 1, 2 ## 2.Within-Subject Factors ( 2 repeated measures ): ##  Moment; levels : 1, 2 ## 3.Subjects per group ( 2000 total subjects ): ##   1000 ##  ------------------------------------------------------------"},{"path":"http://dcousin3.github.io/superb/articles/Vignette6.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Generating ready-to-analyze datasets with GRD","text":"GRD() convenient function generate sorts data sets form effects. data can simulate factorial designs involving -subject designs, repeated-measure designs, multivariate data. One use course classroom: students can test skill generating random data sets run statistical procedures. illustrate type-errors, become easy generate data effect whatsoever ask students obtain rejection decision raise hand.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette7.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A simple example","title":"Unequal variances, Welch test, Tryon adjustment, and ``superb``","text":"Consider example two groups examined. Herein, sample sizes equal, follows depends . two groups means 64.12 80.16. However, also quite differing standard deviations, 9.493 37.918. second four times larger first, denotes heterogeneous variance situation. Let’s reunite scores two datasets single data frame group indicator can first plot: (just make plots look nicer, prepare directives added : ). now ready make first plot. adjustment purpose = \"difference\" necessary plan compare two results. Figure 1. Plot dtaHerero showing heterogeneous error bars. seen, two error bars deliver different message: left one suggests huge difference means, right one . settle ?","code":"grp1 <- c( 56,  54,  73,  46,  59,  62,  55,  53,  77,  60,  69,  66,  63,             62,  53,  82,  74,  70,  65,  70,  72,  65,  56,  58,  83) grp2 <- c( 51,  99, 194, 123,  40,  83,  87, 117,  46,  89,  61,  81,  53,            141,  52,  53,  39,  96,  14,  81,  63,  66,  80, 113,  82) dtaHetero <- data.frame( cbind(     id    = 1:(length(grp1)+length(grp2)),     group = c(rep(1,length(grp1)), rep(2, length(grp2)) ),     score = c(grp1, grp2) )) head(dtaHetero) ##   id group score ## 1  1     1    56 ## 2  2     1    54 ## 3  3     1    73 ## 4  4     1    46 ## 5  5     1    59 ## 6  6     1    62 library(superb)             # to make the summary plot library(ggplot2)            # for all the graphic directives library(gridExtra)          # for grid.arrange  ornate = list(     xlab(\"Difference\"),      scale_x_discrete(labels=c(\"Pre-\\nTreatment\",\"Post-\\nTreatment\")),     ylab(\"Score\"),     coord_cartesian( ylim = c(40,+110) ),     theme_light(base_size = 10) +     theme( plot.subtitle = element_text(size=16)) ) pt <- superb(             score ~ group,             dtaHetero,              adjustments = list(purpose = \"difference\"),             gamma       = 0.95,             statistic   = \"mean\",              errorbar    = \"CI\",             plotLayout  = \"line\",             lineParams  = list(alpha = 0) #the line is made transparent ) + ornate ## superb::ADVICE: Some of the groups' variances are heterogeneous. Consider using purpose=\"tryon\". pt"},{"path":"http://dcousin3.github.io/superb/articles/Vignette7.html","id":"averaging-the-error-bars-sort-of","dir":"Articles","previous_headings":"","what":"Averaging the error bars, sort of…","title":"Unequal variances, Welch test, Tryon adjustment, and ``superb``","text":"Error bars depiction error variance. However, actually based standard errors square root error variances. Standard errors sumed (averaged), error variances can. Thus, averaging two error bars, squares must averaged (followed square root). operation called mean square sense. denoted mean*  hereafter. Given first error bar given X‾1±2tSE1\\bar{X}_1 \\pm \\sqrt{2} \\;t \\; SE_1 second, X‾2±2tSE2\\bar{X}_2 \\pm \\sqrt{2} \\;t \\; SE_2, X‾\\bar{X}_i average ithi^{\\text{th}} group SEiSE_i standard error ithi^{\\text{th}} group, averaging error bar lengths can simplified Mean*( two confidence intervals )=Mean*(2tSE1,2tSE2)=Mean((2tSE1)2,(2tSE2)2)=Mean(2t2SE12,2t2SE22)=2tMean(SE12,SE22)=2tSE12+SE222=tSE12+SE22 \\DeclareMathOperator{\\mean}{Mean} \\begin{split} \\mean{^*}( \\text{ two confidence intervals }) &= \\mean{^*} \\left( \\sqrt{2} \\;t \\; SE_1, \\sqrt{2} \\; t \\; SE_2 \\right) \\\\ &=  \\sqrt{\\mean \\left( (\\sqrt{2} \\;t \\;SE_1)^2, (\\sqrt{2} \\;t \\;SE_2)^2 \\right) } \\\\ &=  \\sqrt{\\mean \\left( 2 \\;t^2 \\;SE_1^2, 2 \\;t^2 \\;SE_2^2 \\right) } \\\\ &= \\sqrt{2} \\;t\\; \\sqrt{\\mean( SE_1^2, SE_2^2) } \\\\ &= \\sqrt{2} \\;t\\; \\sqrt{ \\frac{SE_1^2 + SE_2^2}{2} } \\\\ &= t \\;\\sqrt{SE_1^2 + SE_2^2}  \\end{split} Hence, asking lag two groups significant actually asking Reject H0 X‾1−X‾2>Mean*( two confidence intervals )Reject H0 X‾1−X‾2>tSE12+SE22Reject H0 X‾1−X‾2SE12+SE22>t \\DeclareMathOperator{\\mean}{Mean} \\begin{split} \\text{Reject $H_0$ }& {\\bar{X}_1-\\bar{X}_2} > \\mean^*( \\text{ two confidence intervals })\\\\ \\text{Reject $H_0$ }& {\\bar{X}_1-\\bar{X}_2} > t\\; {\\sqrt{SE_1^2 + SE_2^2}} \\\\ \\text{Reject $H_0$ }& \\frac{\\bar{X}_1-\\bar{X}_2} {\\sqrt{SE_1^2 + SE_2^2}} > t \\\\ \\end{split} precisely definition Welch test (Welch, 1947). word, appraising general length error bars, actually performing Welch test. test arguably mean test need (Delacre, Lakens, & Leys, 2017).","code":""},{"path":"http://dcousin3.github.io/superb/articles/Vignette7.html","id":"a-real-welch-test-with-your-eyes","dir":"Articles","previous_headings":"","what":"A real Welch test with your eyes","title":"Unequal variances, Welch test, Tryon adjustment, and ``superb``","text":"Actually, entirely true, degrees freedom tt multiplier based number observations group (n−1n-1). really Welch test, necessary (1) pool degrees freedom groups together; (2) rectify degree freedom based amount heterogeneity data. get rectified degrees freedom according Welch, can issue \"score\" column(s) containing dependent variable(s) \"group\" column(s) containing group identifiers. , result 26.9965 (compared n1+n2−2n_1+n_2-2, 48, indicating fairly large reduction degree freedom caused fairly important heterogeneity. superb, possible override default degree freedom using error bar estimator errorbar = CIwithDF\" gamma argument, use vector confidence level desired rectified degree freedom, gamma = c(0.95, 26.9965). Lets small plot : Figure 2. Plot dtaHerero rectified degree freedom. plot, used different layout, \"halfwidthline\" shows mid-point error bar small gap. see reason minute.","code":"# Welch's rectified degrees of freedom wdf <- WelchDegreeOfFreedom(dtaHetero, \"score\",\"group\") pw <- superb(             score ~ group,             dtaHetero,              adjustments = list(purpose = \"difference\"),             gamma       = c(0.95, wdf),         # new!              statistic   = \"mean\",              errorbar    = \"CIwithDF\",           # new!             plotLayout  = \"halfwidthline\",             lineParams  = list(alpha = 0) ) + ornate ## superb::ADVICE: Some of the groups' variances are heterogeneous. Consider using purpose=\"tryon\". pw"},{"path":"http://dcousin3.github.io/superb/articles/Vignette7.html","id":"averaging-in-the-square-sense-do-you-expect-me-to-do-that-visually","dir":"Articles","previous_headings":"","what":"Averaging in the square sense, do you expect me to do that visually?","title":"Unequal variances, Welch test, Tryon adjustment, and ``superb``","text":"Averaging visually two lengths already difficult, needs done square sense, may impossible… averaging square sense, longer lines stronger influence means ignoring fact, tend underestimate mean length. first solution bother. usual average average square sense returns sensibly length. Therefore, results ambiguous, need worry . second solution adjust error bar length amenable usual average. actually Tryon’s adjustment (Tryon, 2001). variances truly homogeneous, correction examining pair-wise comparision increase factor 2\\sqrt{2}. deviate homogeneity, Tryon’s adjustment tends little larger 1.41 compensate underestimation introduced regular averaging. transformation right usual mean two error bars, following Tryon transformation, precisely indicate whether means included mean error bar length. Figure 3. Plot dtaHerero rectified degree freedom Tryon’ difference-adjusted error bars.","code":"pwt <- superb(             score ~ group,              dtaHetero,              adjustments = list(purpose = \"tryon\"), #new!             gamma       = c(0.95, wdf),             statistic   = \"mean\",              errorbar    = \"CIwithDF\",             plotLayout  = \"halfwidthline\",             lineParams  = list(alpha = 0) )+ ornate ## superb::FYI: The tryon adjustments per measures are  Measure 1: 1.6489 , all compared to 1.4142. pwt"},{"path":"http://dcousin3.github.io/superb/articles/Vignette7.html","id":"finally-are-the-groups-different-or-not","dir":"Articles","previous_headings":"","what":"Finally, are the groups different or not?","title":"Unequal variances, Welch test, Tryon adjustment, and ``superb``","text":"Let’s return whole question motivated vignette. used difference-adjusted error bars, need average square sense error bars. Lets : equals 16.135. comparison, regular mean: equals 13.838. shows present case, usual average error bars length short compared adequate average (square sense). ’ll add line segment length subsequent plot. Let’s following Tryon’s adjusment Welch rectified degrees freedom: seen, length similar, 16.135 first, 16.041 second. small difference comes fact Tryon-adjusted error bars, degree freedom rectified Welch’s formula rather unpooled. Tryon’s adjustment, length can averaged, means half length totalizes average length: halfwidthline error bars come handy: see half length. Hence, aligned, sum exactly equal lag two means. Lets represent : Figure 4. three plots relevant markers red. Tryon-adjusted confidence intervals, see average length precisely lag means. word, two groups borderline significantly different. Still convinced? Let’s Welch test: difference right limit significance .05 level, mirroring 95% confidence level used plot.","code":"# get the summary statistics with superbData t <- superb(             score ~ group,             dtaHetero,              adjustments = list(purpose = \"difference\"),             gamma       = 0.95,             statistic   = \"mean\", errorbar = \"CI\",             showPlot    = FALSE ) ## superb::ADVICE: Some of the groups' variances are heterogeneous. Consider using purpose=\"tryon\". # keep only the summary statistics: t2 <- t$summaryStatistics  # the length is in column \"upperwidth\", for lines 1 and 2, # so lets do the mean in the square sense: tmean2 <- sqrt( (t2$upperwidth[1]^2 + t2$upperwidth[2]^2)/2 ) tmean    <- (t2$upperwidth[1] + t2$upperwidth[2] )/2 # get the summary statistics with superbData wt <- superb(             score ~ group,              dtaHetero,              adjustments = list(purpose = \"tryon\"),             gamma       = c(0.95, wdf),             statistic   = \"mean\", errorbar = \"CIwithDF\",             showPlot    = FALSE ) ## superb::FYI: The tryon adjustments per measures are  Measure 1: 1.6489 , all compared to 1.4142. wt2 <- wt$summaryStatistics wmean <- (wt2$upperwidth[1]+wt2$upperwidth[2]) / 2 # showing all three plots, with reference lines in red grid.arrange(     pt + labs(subtitle=\"Difference-adjusted 95% CI\\n with default degree of freedom\") +          geom_text( x = 1.15, y = mean(grp1)+(mean(grp2)-mean(grp1))/2, label = \"power-2 mean\", angle = 90) +         geom_text( x = 1.55, y = mean(grp1)+(mean(grp2)-mean(grp1))/2, label = \"regular mean\", angle = 90) +         geom_hline(yintercept = mean(grp1)+(mean(grp2)-mean(grp1))/2-tmean2/2, colour = \"red\", linewidth = 0.5, linetype=2) +          geom_hline(yintercept = mean(grp1)+(mean(grp2)-mean(grp1))/2+tmean2/2, colour = \"red\", linewidth = 0.5, linetype=2) +          # arrow for the power-2 mean         geom_segment(arrow = arrow(length =unit(0.4,\"cm\")), x=1.33, y=mean(grp1)+(mean(grp2)-mean(grp1))/2,                  xend=1.33, yend=mean(grp1)+(mean(grp2)-mean(grp1))/2+tmean2/2) +         geom_segment(arrow = arrow(length =unit(0.4,\"cm\")), x=1.333, y=mean(grp1)+(mean(grp2)-mean(grp1))/2,                  xend=1.33, yend=mean(grp1)+(mean(grp2)-mean(grp1))/2-tmean2/2) +          # arrow for the regular mean         geom_segment(arrow = arrow(length =unit(0.4,\"cm\")), x=1.66, y=mean(grp1)+(mean(grp2)-mean(grp1))/2,                  xend=1.66, yend=mean(grp1)+(mean(grp2)-mean(grp1))/2+tmean/2) +         geom_segment(arrow = arrow(length =unit(0.4,\"cm\")), x=1.66, y=mean(grp1)+(mean(grp2)-mean(grp1))/2,                  xend=1.66, yend=mean(grp1)+(mean(grp2)-mean(grp1))/2-tmean/2),      pw  + labs(subtitle=\"Difference-adjusted 95% CI\\nwith df from Welch\"),      pwt + labs(subtitle=\"Tryon-adjusted 95% CI\\nwith df from Welch\") +         geom_hline(yintercept = mean(grp1)+wt2$upperwidth[1]/2, colour = \"red\", linewidth = 0.5, linetype=2) +          geom_hline(yintercept = mean(grp2)+wt2$lowerwidth[2]/2, colour = \"red\", linewidth = 0.5, linetype=2),  ncol=3) t.test( grp1, grp2,          var.equal=FALSE) ##  ##  Welch Two Sample t-test ##  ## data:  grp1 and grp2 ## t = -2.0518, df = 26.996, p-value = 0.05001 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ##  -3.208072e+01  7.239399e-04 ## sample estimates: ## mean of x mean of y  ##     64.12     80.16"},{"path":"http://dcousin3.github.io/superb/articles/Vignette7.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Unequal variances, Welch test, Tryon adjustment, and ``superb``","text":"superb making error bars separate error estimations. Hence, whenever sample sizes quite unequal, variances quite heterogeneous, , inference performed eyes actually performing Welch test means. samples sizes equal variances homogeneouse, difference Welch test t test. degree freedom rectified Tryon’s ajustment used, center confidence intervals exactly aligned indicate mean fills exactly gap. Although Tryon/Welch pair lets make precise inferences, visually practically speaking, difference rectified Welch degree freedom adjustments plot default degree freedom undetectable (evidence first plot second plot Figure 4 just ). can perform average square sense, difference adjustment perfect. doubt, consider applying Tryon adjustment variances cleary heterogeneous.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette8.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"(advanced) Alternate ways to decorrelate repeated measures from transformations","text":"decorrelation methods based transformations (probably) explored. alternative approach using correlation proposed Cousineau (2019). approaches requires sphericity data. approaches required overcome sphericity limitations.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/Vignette9.html","id":"what-is-the-cohens-d_p","dir":"Articles","previous_headings":"","what":"What is the Cohen’s dpd_p?","title":"Plotting Cohen's d with ``superb``","text":"Cohen’s dpd_p, also known standardized mean difference (smd), standardized measure effect size pairwise conditions. standardized using standard deviation, ressemble z scores. Often, sign Cohen’s dpd_p removed, positive negative; bounded usually, smaller 1. example, Cohen’s dpd_p 0.5 indicates two group’s means separated 0.5 standard deviations. illustrate two populations normal, bell-shape, curves, mode visibly separated, indicating sizeable difference two populations. Cohen call medium effect (although opinion, already large effect; non-trivially small samples find difference significant). Cohen’s dpd_p 0.25, harder see difference two populations. descriptive statistic computed two groups (two repeated measures) dp=|M1−M2|Sp d_p = \\frac{\\vert \\; M_1 - M_2 \\; \\vert}{S_p} SpS_p pooled standard deviation across two group’s standard deviations. Illustrating measure plot difficult pairwise statistic. example, 5 groups, represents 15 pairs groups consequently, 15 Cohen’s dpd_p. , propose alternative representation indirect statistic, using d1d_1(Goulet-Pelletier & Cousineau, 2018). given d1=|M1−B|S1 d_1 = \\frac{\\vert \\; M_1 - B \\; \\vert}{S_1} S1S_1 standard deviation group (labeled “1”). quantity BB baseline measure. can value based prior knowledge measure (example, measures IQ, BB set 100). Alternatively, can also grand mean across conditions. solution adopt herein. statistic d1d_1 univariate measure, .e., based single group’s data. Hence, plot, illustrate one d1d_1 per group. interesting? point difference two d1d_1 Cohen’s dpd_p! Likewise, difference-adjusted confidence interval d1d_1 confidence interval Cohen’s dpd_p. Hence, single plot, possible derive Cohen’s dpd_p significance.","code":""},{"path":"http://dcousin3.github.io/superb/articles/Vignette9.html","id":"plotting-d_1-with-its-confidence-interval","dir":"Articles","previous_headings":"","what":"Plotting d1d_1 with its confidence interval","title":"Plotting Cohen's d with ``superb``","text":"Let’s define statistic confidence interval estimator: function, variable GM.d1 represents grand mean condition. see later variable initialized. follow, use randomly-generated data GRD() simulating three dosage levels -group design. three groups different means 50, 51.2 52.4 translate observed dpd_p 0.12 (group 1 group 2 well group 2 group 3) standard deviation population 10: set manually GM.d1 grand mean, ready make plot. Alternatively, can create initializer run superbPlot() automatically. : run rawData data frame (generated superbPlot(); check superbData() want access data frame) measures collated column DV. Now let’s make plot, feeding d1 statistic function: Figure 1. d_1 scores along 95% confidence interval. difference two d1d_1 Cohen’s dpd_p difference-adjusted confidence intervals adequate compare two dpd_p. example, d1d_1 first group included third group’s d1d_1 indicates Cohen’s dpd_p significantly different zero. Note , initializer detected run automatically. can check initializer detectable ","code":"library(sadists) # for computing confidence intervals of Cohen's d library(superb)  d1 <- function(X) {         # the global variable GM.d1 is obtained from the initializer         mean(X - GM.d1) / sd(X)      }   CI.d1 <- function(X, gamma = .95) {     n    <- length(X)     dlow <- qlambdap(1/2-gamma/2, df = n-1, t = d1(X) * sqrt(n) )      dhig <- qlambdap(1/2+gamma/2, df = n-1, t = d1(X) * sqrt(n) )      c(dlow, dhig) / sqrt(n) } # let's generate random data with true Cohen's dp  # of 0.12 (groups 1 and 2) and 0.24 (groups 1 and 3) dta <- GRD( BSFactors = \"Dose(3)\",      RenameDV          = \"score\",     Effects           = list(\"Dose\" = custom(0, 1.2, 2.4)),      SubjectsPerGroup  = 500,      Population        = list( mean = 50, stddev = 10) ) ## ------------------------------------------------------------  ## Design is: 3 with 3 independent groups. ## ------------------------------------------------------------ ## 1.Between-Subject Factors ( 3 groups ) : ##  Dose; levels: 1, 2, 3 ## 2.Within-Subject Factors ( 1 repeated measures ): ## 3.Subjects per group ( 1500 total subjects ): ##   500 ##  ------------------------------------------------------------ # the exact formulas for Cohen's d1 and dp. Only d1 is used in the plot init.d1 <- function(df) {          GM.d1 <<- mean(df$DV) # will make d1 relative to the grand mean } # show a plot with Cohen's d1 and difference-adjusted confidence intervals of d1 superb(     score ~ Dose,     dta,      statistic   = \"d1\",  errorbar  = \"CI\",      gamma       = 0.95,      plotLayout  = \"line\",     adjustments = list(purpose=\"difference\") ) + theme_light(base_size = 10) +  coord_cartesian( ylim = c(-0.3,+0.45) ) + labs(title = \"d_1 with difference-adjusted 95% confidence intervals of d_1\",      y     = \"d_1 relative to grand mean\") ## superb::FYI: Running initializer init.d1 superb:::has.init.function(\"d1\") ## [1] TRUE"},{"path":"http://dcousin3.github.io/superb/articles/Vignette9.html","id":"checking-the-results","dir":"Articles","previous_headings":"","what":"Checking the results","title":"Plotting Cohen's d with ``superb``","text":"check , implement formulas Cohen’s dpd_p(Cousineau & Goulet-Pelletier, 2020): Let’s extract group’s data intermediate computations: can easily compute three pairwise statistics: … 95% confidence intervals: Let’s put numbers plot easier examination using graphic directives showSignificance(): Figure 2. d_1 scores along 95% confidence interval. , used fact limits confidence interval sign, side respect zero, therefore, excludes zero significance level least 5% (95% confidence intervals). Let’s examine good difference-adjusted CI d1d_1 compared CI dpd_p. following function () get length Cohen’s dpd_p interval; (b) average (square sense, see ) two difference-adjusted confidence intervals d1d_1: seen, difference third decimal. small difference comes fact degrees freedom separated, pooled.","code":"dp <- function(X, Y) {         mean(X - Y) / sqrt((length(X)*var(X) + length(Y)*var(Y))/(length(X)+length(Y)-2))     }  CI.dp <- function(X, Y, gamma = .95) {     n1 = length(X)     n2 = length(Y)     n = hmean(c(n1, n2))     dlow <- qlambdap(1/2-gamma/2, df = n1+n2-2, t = dp(X, Y) * sqrt(n/2) )      dhig <- qlambdap(1/2+gamma/2, df = n1+n2-2, t = dp(X, Y) * sqrt(n/2) )      c(dlow, dhig) / sqrt(n/2) } grp1 <- dta$score[dta$Dose==1] grp2 <- dta$score[dta$Dose==2] grp3 <- dta$score[dta$Dose==3] dp12 <- round(dp(grp2, grp1), 3) dp13 <- round(dp(grp3, grp1), 3) dp23 <- round(dp(grp3, grp2), 3) c(dp12, dp13, dp23) ## [1] 0.062 0.146 0.087 cidp12 = round(CI.dp(grp2, grp1, 0.95), 3) cidp13 = round(CI.dp(grp3, grp1, 0.95 ), 3) cidp23 = round(CI.dp(grp3, grp2, 0.95 ), 3) c(cidp12,cidp13,cidp23) ## [1] -0.062  0.186  0.022  0.270 -0.037  0.211 superb(     score ~ Dose,     dta,      statistic  = \"d1\",  errorbar  = \"CI\", gamma     = 0.95,      plotLayout = \"line\",     adjustments = list(purpose=\"difference\") ) + theme_light(base_size = 10) + coord_cartesian( ylim = c(-0.3,+0.45) ) + labs(title   = \"d_1 with difference-adjusted 95% confidence intervals of d_1\",      caption = paste(\"Note: Cohen's d_p and its confidence interval computed with the \\n\",                      \"true formula (Cousineau & Goulet-Pelletier, 2020)\"),            y       = \"d_1 relative to grand mean\") +   showSignificance(c(1,2), 0.3, -0.01,     paste(\"dp = \",dp12, ifelse(sign(cidp12[1])==sign(cidp12[2]),\", p < .05\",\", p > .05\")) ) +  showSignificance(c(1,3), 0.4, -0.01,     paste(\"dp = \",dp13, ifelse(sign(cidp13[1])==sign(cidp13[2]),\", p < .05\",\", p > .05\"))) +  showSignificance(c(2,3), -0.25, +0.01,     paste(\"dp = \",dp23, ifelse(sign(cidp23[1])==sign(cidp23[2]),\", p < .05\",\", p > .05\"))) compareCIlength <- function(g1, g2) {     # compute the Cohen's dp confidence interval length     cilength.dp = round(CI.dp(g1, g2)[2]-CI.dp(g1, g2)[1], 3)      # compute two d1 CI length, difference-adjusted     len1    = sqrt(2)*(CI.d1(grp1)[2] - CI.d1(grp1)[1])     len2    = sqrt(2)*(CI.d1(grp2)[2] - CI.d1(grp2)[1])     # average in the square sense the two d1 CI lengths     cilength.d1 = round(sqrt((len1^2 + len2^2)/2), 3)      data.frame( dp.length = cilength.dp, d1.average.length = cilength.d1) }  compareCIlength(grp1,grp2) ##   dp.length d1.average.length ## 1     0.248             0.248 compareCIlength(grp1,grp3) ##   dp.length d1.average.length ## 1     0.248             0.248 compareCIlength(grp2,grp3) ##   dp.length d1.average.length ## 1     0.248             0.248"},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/VignetteA.html","id":"what-is-a-reference-interval","dir":"Articles","previous_headings":"","what":"What is a reference interval?","title":"Plotting Reference Intervals with ``superb``","text":"reference interval description whole population. contrast error bar functions associated specific statistics. example, exists standard error mean, confidence interval median. reference interval hand, interval individuals sample, aims illustrating normal range individuals studied population. therefore much wider say, confidence interval mean mean interested whole sample, center sample. example, pharmacological cross-study, five drug concentrations E tested effect glucose level (mg/dL). authors might interested knowing whether glucose levels different. case, confidence interval five mean glucose level might useful. However, research may also want indentify “normal range” values glucose levels either concentrations. Note tha “normal range” misnomer creating confusions “normal distribution”. Instead, stick expression Reference interval (promoted many, e.g., NCCLS (2000)). interval meant capture given fraction population individuals. individuals variable, variability ok (don’t want say normal). range “associated good health” example (NCCLS, 2000, p. 3). Herein, show illustrate reference intervals. make relation individuals evident, also present intervals conjunction alternative representations.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteA.html","id":"displaying-a-reference-interval","dir":"Articles","previous_headings":"","what":"Displaying a reference interval","title":"Plotting Reference Intervals with ``superb``","text":"accomplish basic computations, rely excellent referenceIntervals Finnegan (2020). package offers many options explored herein. begin, let’s load needed libraries… (packages computer, first install example install.packages(\"referenceIntervals\") ) … let’s create ficticious data set fly: dataset generate 100 individuals randomly five concentrations (column concentration, levels E). dependent variable, glucose level, abbreviated gl. snapshot : simple plot show mean concentration along 95% confidence interval means, e.g., Figure 1. Mean glucose level function concentration. seen, glucose level means affected concentration (effect requested GRD() command ). Also note vertical scale: restricted around means, yet, individuals often much outside visible part scale. convince , ask smallest glucose level highest: Instead asking error bar representing confidence interval (CI), let’s ask error bar representing reference intervals (RI). Reference intervals (time) shipped superb. Let’s define short-name version actually use function refLimit() referenceIntervals package. many options function; please consult documentation package. preserve reference interval limits $Ref_Int (function outputs information, see ). one argument use confidence level reference interval, refConf (recommended 95%, default none specified). may note, RI function attached mean. arbitrary: superb, error bars must error bars summary statistic. used function, won’t change position interval. need make first reference interval plots: Figure 2. Mean glucose level 95% reference intervals function concentration. can see vertical range much wider now Figure 1. ok, intervals cover individuals samples.","code":"library(ggplot2)            # for the graphing commands library(superb)             # for superbPlot and GRD library(referenceIntervals) # for computing reference intervals glucoselevels <- GRD(BSFactors = \"concentration(A,B,C,D,E)\",                      SubjectsPerGroup = 100,                     RenameDV = \"gl\",                     Effects = list(\"concentration\" = extent(10) ),                     Population = list(mean = 100, stddev = 20) ) head(glucoselevels) ##   id concentration        gl ## 1  1             A  66.99913 ## 2  2             A 100.10634 ## 3  3             A  46.25473 ## 4  4             A  94.88857 ## 5  5             A 107.43105 ## 6  6             A 117.96823 superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"CI\",     gamma     = 0.95,     plotLayout = \"line\") min(glucoselevels$gl) ## [1] 42.75331 max(glucoselevels$gl) ## [1] 152.9786 RI.mean <- function(data, gamma = 0.95) {     refLimit(data, refConf = gamma)$Ref_Int } superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\", # mean is what RI is attached to     errorbar  = \"RI\",   # RI calls the function above     gamma     = 0.95,   # select the coverage desired     plotLayout = \"line\" )"},{"path":"http://dcousin3.github.io/superb/articles/VignetteA.html","id":"uncertainty-in-the-reference-interval-limits","dir":"Articles","previous_headings":"","what":"Uncertainty in the reference interval limits","title":"Plotting Reference Intervals with ``superb``","text":"plot Figure 2 shows estimated range individuals sample, therefore uncertainty exact location tips. possible add indication width uncertainty regarding tips estimating confidence interval extremity. exact computation based uncertainty quantiles [e.g., 2.5% quantile lower limit population infered 2.5% quantile sample, 95% RI plotted; see e.g., NCCLS (2000); Harding, Tremblay, & Cousineau (2014)]. packge referenceIntervals, function refLimit() also produces information default. novelty confidence level confidence interval tips RI may different reference interval level. example, RI coverage interval might 95%, include wide proportion population, certainty tip positions RI might low, e.g., 80%, fear sample representative. acheive , wrap refLimit() function shorter name function, ciloRI confidence intervals lower part RI, cihiRI confidence intervals upper part RI. function requires two gammas, one RI level, second CI level. Thus, get: , need. can example use following see uncertainty top tips RI: Figure 3. Mean glucose level 90% confidence intervals upper RI tips. Well, weird now, see error bar way . RI error bar longer visible superbPlot() can show one sort error bar time. Lets correct . gist following perform three plots, one showing RI intervals (Figure 2 ), second showing confidence interval RI top tips (Figure 3 just ), one last plot showing confidence interval RI bottom tips. Plots 2 3 must transparent can superimposed top plot 1. end, use set graphic directives makes plot transparent. appplied plots 2 3 (hides grid () set background whole plot panel transparent). operation made function makeTransparent(). also necessary plots range, align correctly superimpose. , set vertical range 0 200. also add description title plot. grouped list: Now dealt , let’s three plots: Things note: (1) second third uses transparent directives; (2) confidence levels (gamma) two numbers plots 2 3: first RI, second CI RI; (3) errorbarParams, gave different attributes various error bars (purple color lower CI, example) moved sligtly left (position). Almost . Lets turn plots graphic objects (grob), superimpose onto empty plot: Figure 3a. Mean glucose level 95% reference intervals 95% confidence intervals.","code":"ciloRI.mean <- function(data, gamma = c(0.95, 0.90) ) {     refLimit(data, refConf = gamma[1], limitConf = gamma[2] )$Conf_Int[1:2] } cihiRI.mean <- function(data, gamma = c(0.95, 0.90) ) {     refLimit(data, refConf = gamma[1], limitConf = gamma[2] )$Conf_Int[3:4] } superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\", errorbar = \"cihiRI\",     gamma     = c(0.95, 0.90),     plotLayout = \"line\" ) ornate = list(         labs(title =paste(\"(tick)     95% reference intervals (RI)\",                         \"\\n(red)      90% confidence intervals of upper 95% RI\",                         \"\\n(purple) 90% confidence intervals of lower 95% RI\",                         \"\\n(blue)    95% confidence intervals of the mean\")),         coord_cartesian( ylim = c(000,200) ),         theme_light(base_size=10) # smaller font ) plt1 <- superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"RI\",     gamma     = 0.95,     errorbarParams = list(width = 0.0, linewidth = 1.5,                           position = position_nudge( 0.0) ),     plotLayout = \"line\" ) + ornate plt2 <- superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"cihiRI\",     gamma     = c(0.95, 0.90),     errorbarParams = list(width = 0.2, linewidth = 0.2, color = \"red\",                           direction = \"left\",                           position = position_nudge(-0.15) ),     plotLayout = \"line\" ) + ornate + makeTransparent() plt3 <- superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"ciloRI\",     gamma     = c(0.95, 0.90),     errorbarParams = list(width = 0.2, linewidth = 0.2, color = \"purple\",                           direction = \"left\",                           position = position_nudge(-0.15) ),     plotLayout = \"line\" ) + ornate + makeTransparent() # transform the three plots into visual objects plt1 <- ggplotGrob(plt1) plt2 <- ggplotGrob(plt2) plt3 <- ggplotGrob(plt3)  # superimpose the grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1) +      annotation_custom(grob=plt2) +      annotation_custom(grob=plt3)"},{"path":"http://dcousin3.github.io/superb/articles/VignetteA.html","id":"is-that-it","dir":"Articles","previous_headings":"","what":"Is that it?","title":"Plotting Reference Intervals with ``superb``","text":"Well, just begining! whole point reference intervals provide indication individuals population. great see , don’t think? multiple ways illustrate individuals sample. One using jittered dots: member sample illustrated small dot whose horizontal position can jittered randomly avoid many dots superimposes longer visible. layout superb achieve exacly , pointjitter. can example redo plot 1 changing layout, superimpose plots , Figure 3b. Jittered dots showing mean glucose level 95% reference intervals 95% confidence intervals. seen, now easy see individuals sample indeed within reference intervals. elaborate layout, although maybe redundant RI, pointjitterviolin done next example. Figure 3c. Jittered dots violins showing mean glucose level 95% reference intervals 95% confidence intervals tips’ position.","code":"# redo plt1; the other 2 are still in memory plt1 <- superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"RI\",     gamma     = 0.95,     errorbarParams = list(width = 0.0, linewidth = 1.5,                           position = position_nudge( 0.0) ),     plotLayout = \"pointjitter\" ) + ornate  # transform the new plot into a visual object plt1 <- ggplotGrob(plt1)  # superimpose the grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1) +      annotation_custom(grob=plt2) +      annotation_custom(grob=plt3) # redo plt1; the other 2 are still in memory plt1 <- superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"RI\",     gamma     = 0.95,     errorbarParams = list(width = 0.0, linewidth = 1.5,                           position = position_nudge( 0.0) ),     plotLayout = \"pointjitterviolin\" ) + ornate  # transform the three plots into visual objects plt1 <- ggplotGrob(plt1)  # you may superimpose the grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1) +      annotation_custom(grob=plt2) +      annotation_custom(grob=plt3)"},{"path":"http://dcousin3.github.io/superb/articles/VignetteA.html","id":"reference-intervals-vs--confidence-intervals-of-the-means","dir":"Articles","previous_headings":"","what":"Reference intervals vs. confidence intervals of the means","title":"Plotting Reference Intervals with ``superb``","text":"one last example, want show difference reference intervals confidence intervals summary statistic, mean. end, can create fourth plot showing confidence interval means plot also transparent theme superimposed previous three plots: Figure 3d. Jittered dots violins showing mean glucose level +-95% confidence intervals mean, 95% reference intervals 95% confidence intervals. seen blue, confidence interval means much shorter intervals reference interval. ok (say, normal): intervals represent different things. Also, interval widths CI mean shorter interval widths CI RI tips two reasons: (1) RI tips based 90% confidence levels; (2) central tendency statistic easier estimate extreme quantile statistic.","code":"plt4 <- superb(     gl ~ concentration,     glucoselevels,      statistic = \"mean\",      errorbar  = \"CI\",  # just the regular CI of the mean     errorbarParams = list(width = 0.2, linewidth = 1.5, color = \"blue\",                           position = position_nudge( 0.00) ),     gamma     = 0.95,     plotLayout = \"line\" ) + ornate + makeTransparent() # transform that plot too into visual objects plt4 <- ggplotGrob(plt4)  # superimpose the grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1) +      annotation_custom(grob=plt2) +      annotation_custom(grob=plt3) +     annotation_custom(grob=plt4)"},{"path":"http://dcousin3.github.io/superb/articles/VignetteA.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Plotting Reference Intervals with ``superb``","text":"Reference intervals useful depict population whole. error bar sense represent error estimation statistic. Instead, illustration individuals’ possible scores. Note Reference intervals must used conjunction adjustments. adjustments used conditions compared conditions. Reference intervals comparative statistics, show extend sample, irrespective samples might look like.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/VignetteB.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"(advanced) Non-factorial within-subject designs in ``superb``","text":"Consider case participants presented strings 1 4 letters decision must made, e.g., real word?. strings can composed variable number letters 1 4, also, variable number upper-case letters, 1 4. combinations string length uppercase presented within subjects. design full factorial design. Indeed, 1 letter presented, possible number upper-case letter 2, 3 4. handle case, possible specify WSDesign argument. default, argument \"fullfactorial\". full factorial, list given , variables used dependent variable, levels factors correspond. Consider table number letters presented (1 4), number upper-case letters (1 ). valid cases 10 conditions (instead 4×44 \\times 4 design full factorial). table provide variables levels two factors correspond .","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteB.html","id":"informing-superb-of-a-non-full-factorial-within-subject-design","dir":"Articles","previous_headings":"","what":"Informing superb of a non-full factorial within-subject design","title":"(advanced) Non-factorial within-subject designs in ``superb``","text":"superb(), superbPlot() superbData(), indicate non full factorial design :","code":"WSFactors = c(\"Nletters\",\"Nuppercase\"), variables = c(\"var1\",\"var2\",\"var3\",\"var4\",\"var5\",\"var6\",                 \"var7\",\"var8\",\"var9\",\"var10\"), WSDesign  = list(c(1,1), c(2,1), c(3,1), c(4,1), c(2,2), c(3,2),                  c(4,2), c(3,3), c(4,3), c(4,4)),"},{"path":"http://dcousin3.github.io/superb/articles/VignetteB.html","id":"returning-to-the-example","dir":"Articles","previous_headings":"","what":"Returning to the example","title":"(advanced) Non-factorial within-subject designs in ``superb``","text":"let’s try random data set. simulate response times participants response Word **Non-word* presented strings. GRD() can generate full factorial design, delete columns aftewards. dataset simulate effect number letters (increasing response times 25 ms additional letter) number uppercase letters (decreasing response times 25 ms additional uppercase letter). full data can plotted without difficulty superbPlot(): Figure 1. Mean response times say Word Non-word. simulate realistic dataset, must remove impossible conditions: plot can performed: Figure 2. Mean response times say Word Non-word. Really, new manipulation use WSDesign within-subject variable dataset, levels corresponding factors (order given WSFactors) listed. Note WSDesign levels superseeds total number levels, 4, given WSFactors. Hence, Nletters given Nletters(99) Nletters(1), longer impact plot. Also note data given long format, can omit argument WSDesign. long format contains enough information superb() correctly guess conditions.","code":"Fulldta <- dta <- GRD(                  WSFactors = c(\"Nletters(4)\",\"Nuppercase(4)\"),                 Effects = list(\"Nletters\" = slope(25),                                \"Nuppercase\" = slope(-25) ),                 Population = list(mean = 400, stddev = 50) ) superb(     crange(DV.1.1, DV.4.4) ~ .,     Fulldta,     WSFactors = c(\"Nletters(4)\",\"Nuppercase(4)\"),     plotLayout=\"line\" ) # destroying the six impossible columns dta$DV.1.2 = NULL # e.g., the condition showing one letter with 2 upper-cases. dta$DV.1.3 = NULL dta$DV.1.4 = NULL dta$DV.2.3 = NULL dta$DV.2.4 = NULL dta$DV.3.4 = NULL superb(     crange(DV.1.1, DV.4.4) ~ .,     dta,     WSFactors = c(\"Nletters(4)\",\"Nuppercase(4)\"),     WSDesign  = list(c(1,1), c(2,1), c(2,2),  c(3,1),  c(3,2),  c(3,3),                      c(4,1), c(4,2), c(4,3),  c(4,4)),     plotLayout=\"line\" )"},{"path":"http://dcousin3.github.io/superb/articles/VignetteB.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"(advanced) Non-factorial within-subject designs in ``superb``","text":"Full-factorial design generally prefered powerfull analyses can manipulate data (example, ANOVA). , causality experimental designs aptly assessed full-factorial design. However, always possible usefull run full-factorial design.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"Plotting proportions with ``superb``","text":"Consider example three groups participants examined. raw data may look like: n1n_1 participant Group 1, n2n_2 Group 2, n3n_3 Group 3. data can compiled reporting number success (let’s call ss) number participants. One example results Although making plot proportions easy, can plot error bars around proportions?","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"the-arcsine-transformation","dir":"Articles","previous_headings":"","what":"The arcsine transformation","title":"Plotting proportions with ``superb``","text":"First proposed Fisher, arcsine transform one way represent proportions. transformation stretches extremities domain (near 0% near 100%) sampling variability constant observed proportion. Also, transformation make sampling distribution nearly normal zz test can used. improvement Fisher transformation proposed Anscombe (1948). given (s,n)=sin−1(s+3/8n+3/4) (s, n) = \\sin^{-1}\\left( \\sqrt{\\frac{s + 3/8}{n + 3/4}} \\right) variance transformation also theoretically given VarA=14(n+1/2) Var_A = \\frac{1}{4(n+1/2)} , ingredients needed make confidence intervals!","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"defining-the-data","dir":"Articles","previous_headings":"","what":"Defining the data","title":"Plotting proportions with ``superb``","text":"follows, assume data available compiled form, second table . superb() takes raw data, convert long sequence zeros ones. following converts compiled data long data frame containing ones zeros superb() can fed raw data:","code":"# enter the compiled data into a data frame: compileddata <- data.frame(cbind(     s = c(10, 18, 10),     n = c(30, 28, 26) )) group  <- c() scores <- c() for (i in 1: (dim(compileddata)[1])) {         group  <- c( group, rep(i, compileddata$n[i] ) )         scores <- c( scores, rep(1, compileddata$s[i]),                      rep(0, compileddata$n[i] - compileddata$s[i]) )     } dta  <- data.frame( cbind(group = group, scores = scores ) )"},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"defining-the-transformation-in-r","dir":"Articles","previous_headings":"","what":"Defining the transformation in R","title":"Plotting proportions with ``superb``","text":"following, define (Anscombe) transformation, standard error transformed scores, confidence intervals: need make basic plot superb() … need libraries, let’s load : go: Figure 1. Anscombe-transformed scores function group.","code":"# the Anscombe transformation for a vector of binary data 0|1 A <-function(v) {     x <- sum(v)     n <- length(v)     asin(sqrt( (x+3/8) / (n+3/4) )) }    SE.A <- function(v) {     0.5 / sqrt(length(v+1/2)) } CI.A <- function(v, gamma = 0.95){     SE.A(v) * sqrt(qchisq(gamma, df=1)) } library(superb) library(ggplot2) library(scales)     # for asn_trans() non-linear scale # ornate to decorate the plot a little bit... ornate = list(      theme_bw(base_size = 10),     labs(x = \"Group\" ),     scale_x_discrete(labels=c(\"Group A\", \"Group B\", \"Group C\")) ) superb(     scores ~ group,     dta,      statistic = \"A\",      error     = \"CI\",     adjustment = list( purpose = \"difference\"),     plotLayout = \"line\",     errorbarParams = list(color=\"blue\") # just for the pleasure! ) + ornate + labs(y = \"Anscombe-transformed scores\" )"},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"reversing-the-transformation-to-see-proportions-","dir":"Articles","previous_headings":"","what":"Reversing the transformation to see proportions.","title":"Plotting proportions with ``superb``","text":"plot shows Anscombe-transform scores. may intuitive. possible undo transformation plot proportions instead. complicated part undo confidence limits. Nothing needed. can make plot new functions: Figure 2. Proportion function group. new plot actually identical previous one plotted proportions using non-linear scale (asn_trans() scale arcsine). However, vertical axis now showing graduations 0% 100% expected proportions.","code":"# the proportion of success for a vector of binary data 0|1 prop <- function(v){     x <- sum(v)     n <- length(v)     x/n } # the de-transformed confidence intervals from Anscombe-transformed scores CI.prop <- function(v, gamma = 0.95) {     y     <- A(v)     n     <- length(v)     cilen <- CI.A(v, gamma)     ylo   <- y - cilen     yhi   <- y + cilen     # reverse arc-sin transformation: naive approach     cilenlo <- ( sin(ylo)^2 )     cilenhi <- ( sin(yhi)^2 )      c(cilenlo, cilenhi) } superb(     scores ~ group,     dta,      statistic = \"prop\",      error     = \"CI\",     adjustment = list( purpose = \"difference\"),     plotLayout = \"line\",     errorbarParams = list(color=\"blue\") ) + ornate + labs(y = \"Proportions\" ) +      scale_y_continuous(trans=asn_trans())"},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"returning-to-the-example","dir":"Articles","previous_headings":"","what":"Returning to the example","title":"Plotting proportions with ``superb``","text":"can conclude plot? noted plotted difference-adjusted confidence intervals. Hence, least one result included confidence interval another result, chances good differ significantly. Running analysis proportions, indicates presence main effect Group (F(2,∞)=3.06,p=.047F(2,\\infty)= 3.06, p = .047). perform analysis proportions (ANOPA) explained Laurencelle & Cousineau (2023). see plot length error bars , suggesting homogeneous variance (sample comparable size). always case Anscombe transform ‘variance-stabilizing’ transformation sense makes variances identical.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteC.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Plotting proportions with ``superb``","text":"superb framework can used display summary statistics. , showed superb() can used proportions. within-subject designs involving proportions, also possible use correlation adjustments (demonstrated Laurencelle & Cousineau, 2023).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/VignetteD.html","id":"first-option-using-r","dir":"Articles","previous_headings":"","what":"First option: Using R","title":"``superb`` and SPSS","text":"Suppose file called SPSS_Demo.sav. Using library foreign, can open file use R make plot. following syntax example open SPSS file, assuming folder hard drive C:. First, set working directory file name ready read file help foreign library Finally, ask plot ","code":"setwd(\"c:\") file <- \"Demo_SPSS.sav\" library(foreign) data <- read.spss(file, to.data.frame = TRUE) superb(      cbind(time1, time2) ~ .,     data,      WSFactors      = \"Temps(2)\",     plotLayout     = \"line\",     adjustments    = list(purpose = \"single\",                            decorrelation = \"CA\"),     errorbarParams = list(color = \"purple\"),     pointParams    = list( size = 2, color = \"purple\") )"},{"path":"http://dcousin3.github.io/superb/articles/VignetteD.html","id":"second-option-using-spss","dir":"Articles","previous_headings":"","what":"Second option: Using SPSS","title":"``superb`` and SPSS","text":"recent versions SPSS comes bundled R interpretor. , open Syntax window (menu File: New: Syntax), can send R instructions enclosed within BEGIN PROGRAM R. END PROGRAM. know SPSS installation R installed, example type instructions: select press Ctrl-R execute. R accepted within SPSS, see ouptut indicating version R installed. R 4.0. things working, ready make plot screen captures showing syntax window: Figure 2: Syntax generate plot","code":"BEGIN PROGRAM R.     # a quick test     cat(\"R is up and running: \", R.version.string, \"\\n\") END PROGRAM. BEGIN PROGRAM R.     # this will install superb if needed; may take a few minutes     if(!require(superb))          install.packages(\"superb\", type=\"binary\")      # set the library to be in used     library(superb)        # transfer the data from SPSS into R     data <- spssdata.GetDataFromSPSS()       # all good! make a plot using superbPlot()     superbPlot(   data,                    WSFactors      = \"Temps(2)\",                   variables      = c(\"time1\",\"time2\"),                   plotLayout     = \"line\",                   adjustments    = list(purpose = \"single\", decorrelation = \"CA\"),                   errorbarParams = list(color = \"purple\"),                   pointParams    = list( size = 2, color = \"purple\")     ) END PROGRAM."},{"path":"http://dcousin3.github.io/superb/articles/VignetteD.html","id":"third-option-using-a-graphical-user-interface","dir":"Articles","previous_headings":"","what":"Third option: Using a graphical user interface","title":"``superb`` and SPSS","text":"graphical user interface available link interface can read file format, including SPSS files. can consult Youtube demonstration .","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteD.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"``superb`` and SPSS","text":"superb framework can used display summary statistics. , showed superbPlot() can used SPSS datasets. thank Michael Cantinotti raising awarness fact new versions SPSS can show plots produced within BEGIN PROGRAM R. END PROGRAM. syntax lines providing short example.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteD.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"``superb`` and SPSS","text":"Cousineau D, Goulet M, Harding B (2021). “Summary plots adjusted error bars: superb framework implementation R.” Advances Methods Practices Psychological Science, 2021, 1–46. doi: https://doi.org/10.1177/25152459211035109 Walker, J. . L. (2021). “Summary plots adjusted error bars (superb).” Youtube video, accessible ).","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteE.html","id":"adding-labels-to-your-superb-plot","dir":"Articles","previous_headings":"","what":"Adding labels to your superb plot","title":"Adding labels to ``superb`` plots","text":"possible add labels plot. example, adding score bar. done using geom_text graphic directive ggplot2 library. Two situations possible: 1- labels actually summary statistics computed superb 2- labels information contained summary statistics.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteE.html","id":"the-labels-are-actually-summary-statistics-computed-by-superb","dir":"Articles","previous_headings":"Adding labels to your superb plot","what":"1- the labels are actually summary statistics computed by superb","title":"Adding labels to ``superb`` plots","text":"processing data, superb actually building data frame relevant statistics named internally “center”, “lowerwidth” “upperwidth”. first statistic displayed (e.g., mean), two lower upper limit error bar, relative center. Hence, want show summary statistic, can build summary plot, e.g., add t labels Figure 1: basic plot labels poorly placed, can adjust position Figure 2: better-looking plot can round, format color, statistics, e.g., can also show factor names rather summary statistics, contained summary statistics data frame. example: Figure 3: plot conditions bars Finally, multiple labels can added desired: Figure 4: plethora labels time, can consult summary statistics data frame produced replacing superbPlot() superbData()","code":"library(superb) library(ggplot2) t <- superb(     len ~ dose + supp,     ToothGrowth,     plotLayout  = \"bar\" ) t + geom_text(aes(x=dose, y=center, label=center) ) t + geom_text(aes(x=dose, y=center, label=center),        position = position_dodge(0.9),       vjust = 1.5,color = \"black\" ) t + geom_text(aes(x=dose, y=center, label=round(center)),        position=position_dodge(0.9),vjust=1.5,color=\"black\") t + geom_text(aes(x=dose, y=center, label=sprintf('%.1f', center)),        position=position_dodge(0.9),vjust=1.5,color=\"black\") t + geom_text(aes(x=dose, y=center, label=sprintf('%.1f', center), color=supp),        position=position_dodge(0.9), vjust=-1.5) t + geom_text(aes(x=dose, y=center, label=supp), # changed \"label\"       position=position_dodge(0.9),       vjust=1.5,color=\"black\") t + geom_text(aes(x=dose, y=center, label=sprintf('%.1f', center)), color=\"black\", position=position_dodge(0.9), vjust=-1) +   geom_text(aes(x=dose, y=center,label=supp), position=position_dodge(0.9), vjust=1.5, color=\"black\") +  geom_text(aes(x=dose, y=center+upperwidth, label=round(center+upperwidth)), position=position_dodge(0.9), vjust=-1, color=\"gray43\") d <- superb(     len ~ dose + supp,     ToothGrowth,     showPlot = FALSE ) d$summaryStatistics ##   dose supp center lowerwidth upperwidth ## 1  0.5   OJ  13.23  -3.190283   3.190283 ## 2  0.5   VC   7.98  -1.964824   1.964824 ## 3    1   OJ  22.70  -2.797727   2.797727 ## 4    1   VC  16.77  -1.799343   1.799343 ## 5    2   OJ  26.06  -1.899314   1.899314 ## 6    2   VC  26.14  -3.432090   3.432090"},{"path":"http://dcousin3.github.io/superb/articles/VignetteE.html","id":"the-labels-are-other-information-not-contained-in-the-summary-statistics-","dir":"Articles","previous_headings":"Adding labels to your superb plot","what":"2- the labels are other information not contained in the summary statistics.","title":"Adding labels to ``superb`` plots","text":"labels compiled summary statistics data frame, can still connect original data frame use content. example, lets’ suppose names rats ToothGrowth data frame (de-anonymize , won’t object rats, dead now!) Figure 5: Individual cases’ labels","code":"# taken from library(babynames) # head(unique(babynames[order(-babynames$prop),]$name),60) firstnames=c(  \"John\",        \"William\",     \"Mary\",        \"Robert\",      \"James\",        \"Linda\",       \"Michael\",     \"Charles\",     \"George\",      \"David\",       \"Jennifer\",    \"Shirley\",     \"Richard\",     \"Barbara\",     \"Jason\",        \"Lisa\",        \"Betty\",       \"Christopher\", \"Dorothy\",     \"Patricia\",     \"Helen\",       \"Jessica\",     \"Ashley\",      \"Donald\",      \"Anna\",         \"Joseph\",      \"Deborah\",     \"Frank\",       \"Mark\",        \"Matthew\",      \"Thomas\",      \"Debra\",       \"Susan\",       \"Margaret\",    \"Carol\",        \"Amanda\",      \"Brian\",       \"Joshua\",      \"Henry\",       \"Harry\",        \"Ruth\",        \"Amy\",         \"Emma\",        \"Edward\",      \"Ronald\",       \"Daniel\",      \"Gary\",        \"Elizabeth\",   \"Melissa\",     \"Sandra\",       \"Michelle\",    \"Karen\",       \"Kimberly\",    \"Joan\",        \"Brittany\",     \"Judith\",      \"Larry\",       \"Cynthia\",     \"Andrew\",      \"Steven\") # append the names as the last columns of ToothGrowth ToothGrowth$firstnames <- firstnames  head(ToothGrowth) ##    len supp dose firstnames ## 1  4.2   VC  0.5       John ## 2 11.5   VC  0.5    William ## 3  7.3   VC  0.5       Mary ## 4  5.8   VC  0.5     Robert ## 5  6.4   VC  0.5      James ## 6 10.0   VC  0.5      Linda t + geom_text(aes(x=factor(dose), y=len, label=firstnames),       data = ToothGrowth, # new: I add the original data frame       color = \"black\",        position = position_dodge(0.9),        vjust = -1.,       inherit.aes = FALSE     )"},{"path":"http://dcousin3.github.io/superb/articles/VignetteE.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Adding labels to ``superb`` plots","text":"Labels can added usual geom_text graphic directives. Additional information can found regarding method.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"how-to-plot-frequencies-along-with-confidence-intervals-using-superb","dir":"Articles","previous_headings":"","what":"How to plot frequencies along with confidence intervals using superb","title":"Plotting frequencies using ``superb``","text":"Many studies collect data categorized according one factors. example, possible categorize sample college students based gender projects college finished (go university, get job, etc.). , two “factors”: gender plans post studies. measure participant “cells” participant categorized. Typically, data summarized frequencies, , count participants various combinations factor levels. two classification factors, data said two-way classfication data, form contingency table. Nothing prevent 2 factors, e.g., three-way classification data. Although frequencies often given table, tables provides little insight regards trends. far adviseable illustrate frequencies using plot showing count levels factors. However, truly informative, plot accompanied error bars confidence interval. Herein, show can done. adopted approach based pivot method developed Clopper & Pearson (1934). method given analytic form Leemis & Trivedi (1996). confidence intervals commonly non-symmetrical around estimate; also exact conservative, case length interval tends long frequencies small (Chen, 1990). Given total sample size NN cells, observed frequency nn given cell used get lower upper confidence bounds around proportion p̂=n/N\\hat{p}=n/N formula: π̂low=(1+N−n+1nF1−α/2(2n,2(N−n+1))−1<π̂<(1+N−n(n+1)Fα/2(2(n+1),2(N−x))−1=π̂high     \\hat{\\pi}_{\\,\\text{low}}=\\left(         1+\\frac{N-n+1}{n F_{1-\\alpha/2}(2n,2(N-n+1)}     \\right)^{-1}     < \\hat{\\pi} <     \\left(          1+\\frac{N-n}{(n+1) F_{\\alpha/2}(2(n+1),2(N-x)}     \\right)^{-1}     =\\hat{\\pi}_{\\,\\text{high}}   FqF_{q} denotes 100q100\\;q% quantile FF distribution 1−α1-\\alpha desired coverage interval, often 95%. interval {nlow,nhigh}=N×{π̂low,π̂high}     \\{n_{\\,\\text{low}}, n_{\\,\\text{high}} \\} = N \\, \\times\\, \\{ \\hat{\\pi}_{\\,\\text{low}}, \\hat{\\pi}_{\\,\\text{high}} \\}   used 100(1−α)100 (1-\\alpha)% confidence interval observed frequency nn can used compare one frequency expected theoretical frequency. unadjusted confidence interval termed stand-alone confidence interval (Cousineau, Goulet, & Harding, 2021). commonly, wish compare observed frequency another observed frequency, difference-adjusted confidence interval sought. obtain difference-adjusted confidence interval, required multiply interval width 2, nlow*=2(n−nlow)+n     n_{\\,\\text{low}}^* =  2(n-n_{\\,\\text{low}})+n  nhigh*=2(nhigh−n)+n     n_{\\,\\text{high}}^* =  2(n_{\\,\\text{high}}-n)+n  asterisk denotes difference-adjusted confidence interval limits. Thus, interval{nlow*,nhigh*}     \\{ n^*_{\\,\\text{low}}, n^*_{\\,\\text{high}} \\}   difference-adjusted 100(1−α)100 (1-\\alpha)% confidence interval (Baguley, 2012). difference-adjusted confidence intervals allow comparing frequencies pairwise rather theoretical frequency.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"why-multiply-the-stand-alone-ci-length-by-2","dir":"Articles","previous_headings":"","what":"Why multiply the stand-alone CI length by 2?","title":"Plotting frequencies using ``superb``","text":"reason multiplication 2 two-fold. First, obtain difference-adjusted confidence interval (CI), necessary multiply CI width 2\\sqrt{2} (assumption homogeneous variance). Second, total must necessarily equal NN, observed frequencies correlated correlation equals −1/(C−1)-1 / (C-1) CC number class. CI meant pair-wise comparisons, CC replaced 2 formula, resulting second, correlation-based, correction 1−r=1−(−1/(2−1))=2\\sqrt{1-r} = \\sqrt{1 - (-1/(2-1))} = \\sqrt{2}. usual, corrections CI width multiplicative.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"one-illustration","dir":"Articles","previous_headings":"","what":"One illustration","title":"Plotting frequencies using ``superb``","text":"illustrate method real data set, enter data set found Light & Margolin (1971). data counts number teenagers based (first factor) gender (second factor) educational vocation (type studies want complete future). sample composed 617 teens. generate dataset, use following: function factor uses argument levels specify order items plotted; otherwise, default order alphabetic order. data file, actually lot easier import file! data extenso: quick--dirty plot, just display raw counts error bars Figure 1: quick--dirty plot","code":"dta <- data.frame(     vocation = factor(unlist(lapply(c(\"Secondary\",\"Vocational\",\"Teacher\",\"Gymnasium\",\"University\"), function(p) rep(p,2))),                      levels = c(\"Secondary\",\"Vocational\",\"Teacher\",\"Gymnasium\",\"University\")),     gender  = factor(rep(c(\"Boys\",\"Girls\"),5), levels=c(\"Boys\",\"Girls\")),     obsfreq   = c(62,61,121,149,26,41,33,20,84,20) ) dta ##      vocation gender obsfreq ## 1   Secondary   Boys      62 ## 2   Secondary  Girls      61 ## 3  Vocational   Boys     121 ## 4  Vocational  Girls     149 ## 5     Teacher   Boys      26 ## 6     Teacher  Girls      41 ## 7   Gymnasium   Boys      33 ## 8   Gymnasium  Girls      20 ## 9  University   Boys      84 ## 10 University  Girls      20 library(superb) library(ggplot2)  plt1 <- superb(     obsfreq ~ vocation + gender,      dta,     statistic = \"identity\",                     # the raw data as is     errorbar  = \"none\",                         # no error bars     # the following is for the look of the plot     lineParams     = list( size = 1.0)          # thicker lines as well ) plt1"},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"define-the-confidence-interval-function","dir":"Articles","previous_headings":"","what":"Define the confidence interval function","title":"Plotting frequencies using ``superb``","text":"First, need summary function computes frequency. actually datum stored data frame, nothing compute. Second, need initalizer fetch total sample size NN dump global environment later use: Third lastly, compute confidence interval limits using Clopper & Pearson (1934) approach using Leemis & Trivedi (1996) analytic expression: ! statistical functions needed make plot place.","code":"count <- function(x) x[1] init.count <- function(df) {     totalcount <<- sum(df$DV) } CI.count <- function(n, gamma=0.95) {     N <- totalcount          # Clopper & Pearson CI from Leemis & Trivedi, 1996     plow <- (1+(N-n+1)/((n+0)*qf(1/2-gamma/2,2*(n+0),2*(N-n+1))))^(-1)     phig <- (1+(N-n+0)/((n+1)*qf(1/2+gamma/2,2*(n+1),2*(N-n+0))))^(-1)      # convert to CI on counts     nlow <- totalcount * plow     nhig <- totalcount * phig      # increase width for difference- and correlation-adjustments     2 * c( nlow[1]-n[1], nhig[1]-n[1] ) + n[1] }"},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"make-a-count-plot-with-confidence-intervals","dir":"Articles","previous_headings":"","what":"Make a count plot with confidence intervals","title":"Plotting frequencies using ``superb``","text":"Figure 2: complete plot plot drab let’s add ornaments : Figure 3: ornated plot","code":"plt2 <- superb(     obsfreq ~ vocation + gender,      dta,     statistic = \"count\",                                 # the function defined above     errorbar  = \"CI\",                                    # its CI define above     # the following is for the look of the plot     errorbarParams = list( width =0.5, linewidth =0.75 ),# have thicker error bars     lineParams     = list( size = 1.0)                   # thicker lines as well ) plt2 ornate <- list(     xlab(\"Educational vocation\"),                      # label on the x-axis     ylab(\"Observed frequency\"),                        # label on the y-axis     theme_bw(base_size = 16),                          # black and white theme     scale_x_discrete(guide = guide_axis(n.dodge = 2))  # unalign labels     # etc. anything accepted by ggplots can be added. ) plt3 <- plt2 + ornate plt3"},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"the-benefit-of-the-plot","dir":"Articles","previous_headings":"","what":"The benefit of the plot","title":"Plotting frequencies using ``superb``","text":"look plot, becomes readily apparent boys girls (1960s) educational aspirations. exception regards attending university girls fewer aspiration. Now return data listed , tell noticed . certainly . Tables terribly inefficient tools convey trends whereas plots ideal end. combined decent measure error (, confidence interval), fairly easy decide trends reliable accidental.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"are-we-sure","dir":"Articles","previous_headings":"","what":"Are we sure?","title":"Plotting frequencies using ``superb``","text":"plot difference-adjusted confidence interval reliable tool make inference--eye. doubt however, go run exact test. present case, performed ANOFA (Analysis Frequency datA; Laurencelle & Cousineau (2023)). shows interaction highly significant; subsequent simple effect analyses show indeed university aspiration triggered interaction. ANOFA table: Decomposition interaction Aspiration effects:","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteF.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Plotting frequencies using ``superb``","text":"Frequencies, .k.. counts, can displayed appropriate confidence intervals without problem. just another regular dependent variable researcher’s toolkit.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"the-structure-of-correlations","dir":"Articles","previous_headings":"","what":"The structure of correlations","title":"(advanced) Local decorrelation for time series","text":"repeated measures obtained, one may compute correlation matrix. correlation matrix always composed 1s along main diagonal, correlation variable always 1. interesting happen main diagonal. situations, correlations fairly constant (stationary). variance homogeneous, correlation structure known compound symmetry. Compound symmetry simplest situation also easiest analyze (e.g., ANOVAs, alghough ANOVA really requires sphericity, slightly different correlation structure). situations, might see correlations near main diagnonal strong, distance diagonal (either upper-right lower-left directions), correlations slowly vanishes, possibly reaching near-null values. structure known autoregressive covariance structure first order AR(1). time series, indicate correlation measurement measurement just just high, correlation measurement distant measurement weak.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"implications-for-precision","dir":"Articles","previous_headings":"","what":"Implications for precision","title":"(advanced) Local decorrelation for time series","text":"Vanishing correlations means comparing distant points time performed weaker statistical precision comparisons close-measures benefit much correlation (correlation friend comes statistical inference). plotting curves, objective may see points evolves, imply making multiple comparisons close-points. , visual tools based correlation (presumably high) nearby points. objective instead compare far-distance points, visual tools incorporate correlations distant points (presumably weak).","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"how-is-correlation-assessed-then","dir":"Articles","previous_headings":"","what":"How is correlation assessed then?","title":"(advanced) Local decorrelation for time series","text":"techniques estimate correlation correlation matrix. assumed compound symmetric, average pairwise correlations satisfactory. AR(1) however, average won’t correlation varying based lag. argue fit technique average correlations using weights reducing distance (excluding main diagonal whose weight set 0). kernel (example gaussian kernel) can used end, long width kept smaller number variables. implemtented technique superb.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"illustration-with-fmri-data","dir":"Articles","previous_headings":"","what":"Illustration with fMRI data","title":"(advanced) Local decorrelation for time series","text":"Waskom, Frank, & Wagner (2017) examined finite impulse response obtained fMRI two sites (frontal parietal) two event conditions (cue-condition cue+stimulus condition). responses obtained 19 time points (labeled 0 18) four conditions, resulting 76 measurements. 14 participants. first fetch data main author’s GitHub repository: ready make plots!","code":"fmri <- read.csv(url(\"https://raw.githubusercontent.com/mwaskom/seaborn-data/de49440879bea4d563ccefe671fd7584cba08983/fmri.csv\"))"},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"a-plot-without-decorrelation","dir":"Articles","previous_headings":"Illustration with fMRI data","what":"A plot without decorrelation","title":"(advanced) Local decorrelation for time series","text":"first plot done without adjustments. default, shows standalone 95% confidence interval. formula uses long data format specifies observations nested subject numbers: Figure 1. Plot fMRI data standalone confidence intervals. scale_x_discrete done rename ticks 0 18 (start 1 otherwise). scale_discrete_manual changes color band (hope color-blind, colors thing). plotLayout = \"lineBand\" displays confidence intervals band rather error bars.","code":"superb(      signal ~ timepoint + region + event | subject,     fmri,     plotLayout = \"lineBand\",     pointParams = list(size=1,color=\"black\"),     lineParams = list(color=\"purple\") ) + scale_x_discrete(name=\"Time\", labels = 0:18) +  scale_discrete_manual(aesthetic =c(\"fill\",\"colour\"),                        labels = c(\"frontal\",\"parietal\"),                        values = c(\"red\",\"green\")) + theme_bw() + ylim(-0.15, +0.35)"},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"plots-with-decorrelation","dir":"Articles","previous_headings":"Illustration with fMRI data","what":"Plots with decorrelation","title":"(advanced) Local decorrelation for time series","text":"decorrelation technique first proposed Loftus & Masson (1994). Alternatives approaches developped Cousineau (2005) Morey (2008; also see Cousineau, 2019). known superbPlot() \"LM\" \"CM\" respectively. add adjustment command, get following plot: Figure 2. Plot fMRI data Cousineau-Morey decorrelation. may see, plot previous one nearly identical! average correlation involving close-far-distant points weak (close zero; replace CM CA message return average correlation addition plot). fMRI points separated time, close-points show correlation. local decorrelation may useful. repeat command, time ask local average correlation. need specify radius kernel, adding integer letters “LD”. , show results narrow kernel, weighting far adjacent points points 3 time points appart, obtained \"LD2\": Figure 3. Plot fMRI data local decorrelation. seen message, correlations nearby time points .40. explains precision measures improved notably (seen confidence intervals much narrower). can pick two nearby points run paired t-test, chances high get significant result. example, consider green curve, condition cue+stimuli (.e., bottom panel), time points 6 7. confidence band suggest two points differ examine locally-decorrelated confidence intervals, examine previous two plots. true? Let’s run t-test paired sample.","code":"superb(      signal ~ timepoint + region + event | subject,     fmri,     adjustments = list(decorrelation = \"CM\"), ## only new line     plotLayout = \"lineBand\",     pointParams = list(size=1,color=\"black\"),     lineParams = list(color=\"purple\") ) + scale_x_discrete(name=\"Time\", labels = 0:19) +  scale_discrete_manual(aesthetic =c(\"fill\",\"colour\"),                        labels = c(\"frontal\",\"parietal\"),                        values = c(\"red\",\"green\"))+ theme_bw() + ylim(-0.15, +0.35) +  showSignificance(c(6,7)+1, 0.305, -0.02, \"n.s.?\", panel=list(event=2)) ## superb::FYI: The HyunhFeldtEpsilon measure of sphericity per group are  0.052 ## superb::FYI: All the groups' data are compound symmetric. Consider using CA or UA. superb(      signal ~ timepoint + region + event | subject,     fmri,     adjustments = list(decorrelation = \"LD2\"),  ## CM replaced with LD2     plotLayout = \"lineBand\",     pointParams = list(size=1,color=\"black\"),     lineParams = list(color=\"purple\") ) + scale_x_discrete(name=\"Time\", labels = 0:19) +  scale_discrete_manual(aesthetic =c(\"fill\",\"colour\"),                        labels = c(\"frontal\",\"parietal\"),                        values = c(\"red\",\"green\"))+ theme_bw() + ylim(-0.15, +0.35) +  showSignificance(c(6,7)+1, 0.305, -0.02, \"**!\", panel=list(event=2)) ## superb::FYI: The average correlation per group is  0.3653 # First, extract the two sets of data, ordered by subject identifier: d1 <- dplyr::filter(fmri, event==\"stim\" & region==\"parietal\" & timepoint==6) d1 <- d1[order(d1$subject),] d2 <- dplyr::filter(fmri, event==\"stim\" & region==\"parietal\" & timepoint==7) d2 <- d2[order(d2$subject),]  # Second, run a paired t-test t.test(d1$signal, d2$signal, paired=TRUE) ##  ##  Paired t-test ##  ## data:  d1$signal and d2$signal ## t = 3.8818, df = 13, p-value = 0.00189 ## alternative hypothesis: true mean difference is not equal to 0 ## 95 percent confidence interval: ##  0.02729823 0.09581713 ## sample estimates: ## mean difference  ##      0.06155768"},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"the-radius-parameter","dir":"Articles","previous_headings":"","what":"The radius parameter","title":"(advanced) Local decorrelation for time series","text":"can vary radius 1 . larger radius, smallest benefit correlation assessment precision. extreme, use large radius (e.g., “LD10000”), get exact average correlation “CA” now correlations weighted almost identically. Note computations, reduced number messages displayed superb() using options(\"superb.feedback\" = \"warnings\" ).","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"difference-adjustments","dir":"Articles","previous_headings":"","what":"Difference adjustments","title":"(advanced) Local decorrelation for time series","text":"three figures, use difference adjustment. Recall adjustment needed objective error bars (error bands) perform comparisons pairs conditions. present example, reader likely perform comparisons curves difference adjustment much needed. Simply add purpose = \"difference\" adjustments list three examples . see three plots , locally-decorrelated one suggests significant differences bottom curves time points, indeed format tests indicate.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteG.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"(advanced) Local decorrelation for time series","text":"Local decorrelation tool adapted time series nearby measurements expected show greater correlations measurements separated large amount time. applicable among time series, longitudinal studies, fMRI studies (example ) EEG studies (application described Cousineau et al. (2024)).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"an-example-","dir":"Articles","previous_headings":"","what":"An example.","title":"Plotting radar plots for illustrating profiles","text":"Radar plot used study aphantasia presented Delem, Turkben, Cousineau, Cavalli, & Plancher (2024). study, number indicators (scores) collected participants. indicators ordering, measuring verbal abilities, spatial abilities, etc. standardized, indicators approximately scale can presented plot. ( end, generate random scores 60 participants; central presentation). following plot shows results using jittered dots see individual scores. data repeated measures 5 measurements per participants (indicators), given long format. Figure 1. Plot 5 indicator variables. indicators, clustering algorithm identified three distinct profiles. profiles different mean score indicator variables. , plot can done , time different colors cluster participants. get. Figure 2. Plot 5 indicator variables three profiles. see, last indicator shows wide diversity scores well captured profile participants belong.","code":"superb( DV ~ Indicator, data = dta,         plotLayout   = \"pointlinejitter\",         adjustments = list(purpose = \"difference\")     ) + theme_bw() + ylim(0,100) + ylab(\"Score\") superb( DV ~ Indicator + Profile, data = dta,         plotLayout   = \"pointlinejitter\",         adjustments = list(purpose = \"difference\")      ) + theme_bw() + ylim(0,100) + ylab(\"Score\")"},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"turning-the-plot-into-a-radar-plot","dir":"Articles","previous_headings":"","what":"Turning the plot into a radar plot","title":"Plotting radar plots for illustrating profiles","text":"change plot polar plot, simply change layout. Changing \"pointlinejitter\" \"circularpointlinejitter\" trick: Figure 3. Plot 5 indicator variables three profiles polar coordinate. can undo polar coordinate forcing cartesian coordinate system : Figure 4. Plot 5 indicator variables three profiles back cartesian coordinate. helps see one critical change: loop close onto , additional set points added 0. reproduces last points (Visual). plot folded radial system, first last points superimpose.","code":"superb( DV ~ Indicator + Profile, data = dta,         plotLayout = \"circularpointlinejitter\"         ## only change!     ) + theme_bw() + ylim(0,100) + ylab(\"Score\") superb( DV ~ Indicator + Profile, data = dta,         plotLayout = \"circularpointlinejitter\"     ) + theme_bw() + ylim(0,100) + ylab(\"Score\") +      coord_cartesian()                                  ## only change!"},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"interpreting-the-plot","dir":"Articles","previous_headings":"","what":"Interpreting the plot","title":"Plotting radar plots for illustrating profiles","text":"plot (either radar cartesian) allow us see three indicator variables, Semantic, Spatial, Tactile, three clusters participants differ much. Verbal variable, second profile ProfileB differing two profiles. Lastly, Visual variable, three profiles significantly different scores average.","code":""},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"customizing-the-plot","dir":"Articles","previous_headings":"","what":"Customizing the plot","title":"Plotting radar plots for illustrating profiles","text":"plots produced superb() ggplot objects possible add additional graphic directives alter look add additional geom. code, inject arguments geom_line() layer lineParams. , increase line thickness. also make lines thicker partially transparant injecting linewidth alpha geom_line() using lineParams. Finally, also change color palette. can also remove border around plot, font size, etc. Figure 5. Plot customization","code":"library(RColorBrewer) superb( DV ~ Indicator + Profile, data = dta,         plotLayout      = \"circularpointlinejitter\",                 lineParams     = list(linewidth=1.2, alpha = 0.3 ),         errorbarParams = list(width=0.3,linewidth=1.2 ),         jitterParams   = list(size=1,alpha=0.33 ),     ) + theme_bw() + ylim(0,100) + ylab(\"Score\") +     theme(panel.border = element_blank(), text = element_text(size = 16) ) +     scale_color_brewer(palette=\"Dark2\")"},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"difference-adjustments","dir":"Articles","previous_headings":"","what":"Difference adjustments","title":"Plotting radar plots for illustrating profiles","text":"figures, use difference adjustment. Recall adjustment needed objective error bars (error bands) perform comparisons pairs conditions. present example, reader likely perform comparisons curves difference adjustment needed. Simply add purpose = \"difference\" adjustments list. see error bars now bit longer allow -variable comparisons. Figure 6. Plot difference adjustment reason, need change scale_x_continuous(), need preserve arguments manually, NUMBER_OF_CATEGORIES 5 example. can also rotate plot make turn opposite direction radarParams list, e.g., Figure 7. Plot turning counterclockwise","code":"superb( DV ~ Indicator + Profile, data = dta,         adjustments    = list(purpose = \"difference\"), ## new addition         plotLayout     = \"circularpointlinejitter\",                 lineParams     = list(linewidth=1.2, alpha = 0.3 ),         errorbarParams = list(width=0.2,linewidth=1.2 ),         jitterParams   = list(size=1,alpha=0.33 ),     ) + theme_bw() + ylim(0,100) + ylab(\"Score\") +     theme(panel.border = element_blank(), text = element_text(size = 16) ) +     scale_color_brewer(palette=\"Dark2\") scale_x_continuous(             oob = scales::oob_keep,              limits =   c(0, 0.00001+NUMBER_OF_CATEGORIES ),              n.breaks = NUMBER_OF_CATEGORIES +1         ) superb( DV ~ Indicator + Profile, data = dta,         adjustments    = list(purpose = \"difference\"), ## new addition         plotLayout     = \"circularpointlinejitter\",                 lineParams     = list(linewidth=1.2, alpha = 0.3 ),         errorbarParams = list(width=0.2,linewidth=1.2 ),         jitterParams   = list(size=1,alpha=0.33 ),         radarParams    = list( direction = -1, start = 2*pi *4/5)     ) + theme_bw() + ylim(0,100) + ylab(\"Score\") +     theme(panel.border = element_blank(), text = element_text(size = 16) ) +     scale_color_brewer(palette=\"Dark2\")"},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"generating-random-data","dir":"Articles","previous_headings":"","what":"Generating random data","title":"Plotting radar plots for illustrating profiles","text":"data used herein randomly generated GRD() (Generate Random Data) function included superb (quite useful test plot functions!). , generated data three profiles 5 indicators. effect interaction two factors, adding removing points average grand mean 50.","code":"dta <- GRD(     SubjectsPerGroup = 20,     BSFactors        = c(\"Profile(ProfileA,ProfileB,ProfileC)\",\"Indicator(Visual,Spatial,Verbal,Tactile,Semantic)\"),     Population       = list(mean=50,stddev=15),     Effects          = list(\"Profile*Indicator\" = custom(-30,0,30,10,10,10,30,-20,30,0,0,0,0,0,0)))"},{"path":"http://dcousin3.github.io/superb/articles/VignetteH.html","id":"in-summary","dir":"Articles","previous_headings":"","what":"In summary","title":"Plotting radar plots for illustrating profiles","text":"Radar plots compact ways represent means groups order categories x-axis arbitrary. superb layouts \"circular*\" automatize steps create circular dataset show radial coordinate system.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Denis Cousineau. Author, maintainer. Bradley Harding. Contributor. Marc-Andre Goulet. Contributor. Jesika Walker. Artist, presenter.","code":""},{"path":"http://dcousin3.github.io/superb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cousineau, D., Goulet, M.., & Harding. B (2021)  Summary plots adjusted error bars: superb framework implementation R Advances Methods Practices Psychological Science, doi: https://doi.org/10.1177/25152459211035109","code":"@Article{,   title = {Summary plots with adjusted error bars: The superb framework with an implementation in {R}},   author = {Denis Cousineau and Marc-Andre Goulet and Bradley Harding},   journal = {Advances in Methods and Practices in Psychological Science},   year = {2021},   volume = {4},   number = {3},   pages = {1--46},   url = {https://dcousin3.github.io/superb/},   doi = {10.1177/25152459211035109}, }"},{"path":"http://dcousin3.github.io/superb/index.html","id":"superb-summary-plots-with-adjusted-error-bars","dir":"","previous_headings":"","what":"Summary Plots with Adjusted Error Bars","title":"Summary Plots with Adjusted Error Bars","text":"library superb offers two main functionalities. first foremost functionnality obtain plots adjusted error bars. main function superb() can also use superbShiny() graphical user interface requiring programming scripting. See nice tutorial Walker (2021). purpose function superb() provide plot summary statistics correct error bars. simple adjustments, error bar adjusted design (within ), purpose (single pair-wise differences), sampling method (simple randomized samples cluster randomized samples) population size (infinite specific size). superb(..., showPlot=FALSE) argument generate plot returns summary statistics interval boundaries. can afterwards sent plotting environments. second, subsidiary, functionality Generate Random Datasets. function GRD() used easily generate random data design (within ) using population distribution parameters, various effect sizes. GRD() quite handy test statistical procedures plotting procedures superb().","code":""},{"path":"http://dcousin3.github.io/superb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Summary Plots with Adjusted Error Bars","text":"official CRAN version can installed development version 0.95.23 can accessed GitHub:","code":"install.packages(\"superb\") library(superb) devtools::install_github(\"dcousin3/superb\") library(superb)"},{"path":"http://dcousin3.github.io/superb/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Summary Plots with Adjusted Error Bars","text":"easiest use graphical interface can launched following examples use script-based commands. simple example illustrating ToothGrowth dataset rats (dependent variable len) function dose vitamin form vitamin supplements supp (pills juice)  , default summary statistic, mean, used. error bars , default, 95% confidence intervals (mean). two choices can changed statistic errorbar arguments. second example explicitly indicates display median instead default mean summary statistics along default 95% confidence interval median (correct function automatically selected):  third example, illustrate harmonic means hmean along 99.9% confidence intervals harmonic mean displayed using bars:  second function, GRD(), can used generate random data designs various within- -subject factors. example generates scores 30 simulated participants 3 x 6 design 6 daily repeated-measures Days. factor Day modeled impacting scores (increasing 3 points second day): full benefits superb() seen: just adjustments, can obtained decorrelated error bars Correlation-adjusted (CA), Cousineau-Morey (CM) Loftus & Masson (CM) techniques:  Even better, simulated scores can illustrated using elaborate layouts pointjitter layout , addition mean confidence interval, shows raw data using jitter dots:  example, optional arguments errorbarParams pointParams used inject specifications error bars points respectively. arguments used, override defaults superb(). Lastly, aim radar (.k.. circular) plot  Every time, get error bars free! need compute side, need worry adjustments (whether want stand-alone error bars adjusted purpose correlation, just one option). Also, keep mind easy change default (mean +- 95% confidence intervals) summary statistics –e.g., median– measure error –e.g., standard error, standard deviation, inter-quartile range, name –; can find responses vignettes stackExchange just open issue github repository.","code":"superbShiny() superb(len ~ dose + supp, ToothGrowth ) superb(len ~ dose + supp, ToothGrowth,     statistic = \"median\") superb(len ~ dose + supp, ToothGrowth,     statistic = \"hmean\",      errorbar = \"CI\", gamma = 0.999,     plotLayout = \"bar\") set.seed(663) # for reproducibility testdata <- GRD(     RenameDV   = \"score\",      SubjectsPerGroup = 10,      BSFactors  = \"Difficulty(A,B,C)\",      WSFactors  = \"Day(6)\",     Population = list(mean = 75,stddev = 10,rho = 0.8),     Effects    = list( \"Difficulty\" =  custom(-5,-5,+10), \"Day\" = slope(3) ) )  head(testdata) ##   id Difficulty  score.1  score.2  score.3  score.4  score.5  score.6 ## 1  1          A 61.72393 61.48460 70.48406 68.92430 69.85908 68.15339 ## 2  2          A 54.16784 65.82688 66.51785 65.59598 82.74906 82.53300 ## 3  3          A 69.85369 60.04088 73.99657 72.95358 69.89209 74.30423 ## 4  4          A 69.05319 64.99568 75.00310 78.35253 81.48167 76.08335 ## 5  5          A 79.29388 81.56254 78.17444 86.36108 92.45310 93.73091 ## 6  6          A 56.56657 59.23395 66.10074 63.77299 67.07331 72.64133 library(gridExtra)          # for grid.arrange library(RColorBrewer)       # for nicer color palette  plt1 <- superb( crange(score.1, score.6) ~ Difficulty,      testdata, WSFactors = \"Day(6)\",     plotLayout = \"line\" ) + ylim(50,100) + labs(title = \"No adjustments\") + theme_bw() + ylab(\"Score\") + scale_color_brewer(palette=\"Dark2\")      plt2 <- superb( crange(score.1, score.6) ~ Difficulty,      testdata, WSFactors = \"Day(6)\",     adjustments = list(purpose = \"difference\", decorrelation = \"CA\"),     plotLayout = \"line\" )+ ylim(50,100) + labs(title = \"correlation- and difference-adjusted\") + theme_bw() + ylab(\"Score\") + scale_color_brewer(palette=\"Dark2\")  grid.arrange(plt1,plt2, ncol=2) superb( crange(score.1, score.6) ~ Difficulty,      testdata, WSFactors = \"Day(6)\",     adjustments = list(purpose = \"difference\", decorrelation = \"CM\"),     plotLayout = \"pointjitter\",     errorbarParams = list(color = \"purple\"),     pointParams = list( size = 3, color = \"purple\") ) + theme_bw() + ylab(\"Score\") + scale_color_brewer(palette=\"Dark2\") superb( crange(score.1, score.6) ~ Difficulty, testdata,      WSFactors = \"Day(6)\",     adjustments = list(purpose = \"difference\", decorrelation = \"CM\"),     plotLayout = \"circularpointlinejitter\",     factorOrder = c(\"Day\", \"Difficulty\"),     pointParams = list( size = 3 ),     jitterParams = list(alpha=0.25),     errorbarParams= list(width=0.33, color = \"black\") ) + theme_bw() + ylab(\"\") + theme(panel.border = element_blank(), text = element_text(size = 16) ) + scale_color_brewer(palette=\"Dark2\") + theme(axis.line.y = element_blank(),  axis.text.y=element_blank(), axis.ticks.y=element_blank())"},{"path":"http://dcousin3.github.io/superb/index.html","id":"for-more","dir":"","previous_headings":"","what":"For more","title":"Summary Plots with Adjusted Error Bars","text":"superb summary plot error bars, simple . library superb makes easy illustrate summary statistics along error bars. layouts can used visualize additional characteristics raw data. Finally, resulting appearance can customized various ways. complete documentation available site. general introduction superb framework underlying library published Advances Methods Practices Psychological Sciences (Cousineau, Goulet, & Harding, 2021). Also, formulas confidence intervals statistics mean displayed can found Harding, Tremblay, & Cousineau (2015).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/biasCorrectionTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"bias-correction transform — biasCorrectionTransform","title":"bias-correction transform — biasCorrectionTransform","text":"biasCorrectionTransform  transformation can applied matrix data. resulting matrix's variance corrected bias m08superb","code":""},{"path":"http://dcousin3.github.io/superb/reference/biasCorrectionTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bias-correction transform — biasCorrectionTransform","text":"","code":"biasCorrectionTransform(dta, variables)"},{"path":"http://dcousin3.github.io/superb/reference/biasCorrectionTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bias-correction transform — biasCorrectionTransform","text":"dta data.frame containing data wide format; variables vector column names transformation applied. remaining columns left unchanged","code":""},{"path":"http://dcousin3.github.io/superb/reference/biasCorrectionTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bias-correction transform — biasCorrectionTransform","text":"data.frame form dta variables transformed. function useful passed argument preprocessfct superb() performs modification data matrix.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/bootstrapPrecisionMeasures.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped measures of precision — bootstrapPrecisionMeasures","title":"Bootstrapped measures of precision — bootstrapPrecisionMeasures","text":"superb also comes built-measures precisions uses bootstrap. can added based users needs. bootstrapSE.fct() functions produces interval width; bootstrapPI.fct() produces lower upper limits interval. estimates based 5,000 sub-samples default. Change default withoptions(\"superb.bootstrapIter\" = number ). See et94;textualsuperb comprehensive introduction. bootstrap estimates called PI stands Precision intervals. denote estimate sampling distribution, predictive distribution confidence intervals based rpw19,pl10,l99superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/bootstrapPrecisionMeasures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped measures of precision — bootstrapPrecisionMeasures","text":"","code":"bootstrapSE.mean(x)  bootstrapPI.mean(x, gamma)  bootstrapSE.median(x)  bootstrapPI.median(x, gamma)  bootstrapSE.hmean(x)  bootstrapPI.hmean(x, gamma)  bootstrapSE.gmean(x)  bootstrapPI.gmean(x, gamma)  bootstrapSE.var(x)  bootstrapPI.var(x, gamma)  bootstrapSE.sd(x)  bootstrapPI.sd(x, gamma)"},{"path":"http://dcousin3.github.io/superb/reference/bootstrapPrecisionMeasures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped measures of precision — bootstrapPrecisionMeasures","text":"x vector numbers, sample data (mandatory); gamma confidence level PI (default 0.95).","code":""},{"path":"http://dcousin3.github.io/superb/reference/bootstrapPrecisionMeasures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrapped measures of precision — bootstrapPrecisionMeasures","text":"measure precision (SE) interval precision (PI).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/bootstrapPrecisionMeasures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapped measures of precision — bootstrapPrecisionMeasures","text":"","code":"# the confidence interval of the mean for default 95% and 90% confidence level bootstrapPI.mean( c(1,2,3) ) #>  2.5% 97.5%  #>     1     3  bootstrapPI.mean( c(1,2,3), gamma = 0.90) #>       5%      95%  #> 1.333333 2.666667   # Standard errors for standard deviation or variance bootstrapSE.sd( c(1,2,3) ) #> [1] 0.3543689 bootstrapSE.var( c(1,2,3) ) #> [1] 0.4702706"},{"path":"http://dcousin3.github.io/superb/reference/CousineauLaurencelleLambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Cousineau-Laurencelle's lambda correction for cluster-randomized sampling — CousineauLaurencelleLambda","title":"Cousineau-Laurencelle's lambda correction for cluster-randomized sampling — CousineauLaurencelleLambda","text":"functions CousineauLaurencelleLambda() returns correction factor cluster-randomized sampling. correction used variety ways, example, get effective number participants (power study) correct t-test. See cl16superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/CousineauLaurencelleLambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cousineau-Laurencelle's lambda correction for cluster-randomized sampling — CousineauLaurencelleLambda","text":"","code":"CousineauLaurencelleLambda(paramvector)"},{"path":"http://dcousin3.github.io/superb/reference/CousineauLaurencelleLambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cousineau-Laurencelle's lambda correction for cluster-randomized sampling — CousineauLaurencelleLambda","text":"paramvector vector , order, intra-class correlation r, number clusters, number participants clusters.","code":""},{"path":"http://dcousin3.github.io/superb/reference/CousineauLaurencelleLambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cousineau-Laurencelle's lambda correction for cluster-randomized sampling — CousineauLaurencelleLambda","text":"lambda correction factor cluster-randomized sampling.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/CousineauLaurencelleLambda.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cousineau-Laurencelle's lambda correction for cluster-randomized sampling — CousineauLaurencelleLambda","text":"","code":"# Example from Cousineau & Laurencelle, 2017, p. 124: CousineauLaurencelleLambda( c(0.2, 5, 20, 20, 20, 20, 20) ) #> [1] 2.234188 # 2.234188"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure1.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for Figure 1 — dataFigure1","title":"Data for Figure 1 — dataFigure1","text":"data, taken c17superb, example \"stand-alone\" 95\\% confidence interval means returns result contradiction result statistical test. paradoxical result resolved using adjusted confidence intervals, different-adjusted confidence interval.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for Figure 1 — dataFigure1","text":"","code":"data(dataFigure1)"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for Figure 1 — dataFigure1","text":"object class data.frame.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure1.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for Figure 1 — dataFigure1","text":"doi:10.5709/acp-0214-z","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/dataFigure1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for Figure 1 — dataFigure1","text":"","code":"library(ggplot2) library(gridExtra) data(dataFigure1)  options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  ## realize the plot with unadjusted (left) and ajusted (right) 95% confidence intervals plt1a <- superb(     score ~ grp,     dataFigure1,      adjustments=list(purpose = \"single\"),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"95% CI\\n\") +   coord_cartesian( ylim = c(85,115) ) +   geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt1b <- superb(     score ~ grp,      dataFigure1,      adjustments=list(purpose = \"difference\"),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Difference-adjusted 95% CI\\n\") +   coord_cartesian( ylim = c(85,115) ) +    geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt1  <- grid.arrange(plt1a,plt1b,ncol=2)   ## realise the correct t-test to see the discrepancy t.test(dataFigure1$score[dataFigure1$grp==1],         dataFigure1$score[dataFigure1$grp==2],        var.equal=TRUE) #>  #> \tTwo Sample t-test #>  #> data:  dataFigure1$score[dataFigure1$grp == 1] and dataFigure1$score[dataFigure1$grp == 2] #> t = 1.7612, df = 48, p-value = 0.08458 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  -0.7082201 10.7082201 #> sample estimates: #> mean of x mean of y  #>       105       100  #>"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure2.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for Figure 2 — dataFigure2","title":"Data for Figure 2 — dataFigure2","text":"data, taken c17superb7, example \"stand-alone\" 95\\% confidence interval means returns result contradiction result statistical test. paradoxical result resolved using adjusted confidence intervals, correlation- different-adjusted confidence interval.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for Figure 2 — dataFigure2","text":"","code":"data(dataFigure2)"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for Figure 2 — dataFigure2","text":"object class data.frame.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for Figure 2 — dataFigure2","text":"doi:10.5709/acp-0214-z","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/dataFigure2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for Figure 2 — dataFigure2","text":"","code":"library(ggplot2) library(gridExtra) data(dataFigure2)  options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  ## realize the plot with unadjusted (left) and ajusted (right) 95% confidence intervals plt2a <- superb(     cbind(pre, post) ~ .,     dataFigure2,      WSFactors = \"Moment(2)\",      adjustments=list(purpose = \"difference\"),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Difference-adjusted 95% CI\\n\") +   coord_cartesian( ylim = c(85,115) ) +   geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt2b <- superb(     cbind(pre, post) ~ .,      dataFigure2,      WSFactors = \"Moment(2)\",      adjustments=list(purpose = \"difference\", decorrelation = \"CA\"),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Correlation and difference-adjusted\\n95% CI\") +   coord_cartesian( ylim = c(85,115) ) +    geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt2  <- grid.arrange(plt2a,plt2b,ncol=2)   ## realise the correct t-test to see the discrepancy t.test(dataFigure2$pre, dataFigure2$post, paired=TRUE) #>  #> \tPaired t-test #>  #> data:  dataFigure2$pre and dataFigure2$post #> t = -2.9046, df = 24, p-value = 0.007776 #> alternative hypothesis: true mean difference is not equal to 0 #> 95 percent confidence interval: #>  -8.552864 -1.447136 #> sample estimates: #> mean difference  #>              -5  #>"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure3.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for Figure 3 — dataFigure3","title":"Data for Figure 3 — dataFigure3","text":"data, inspired cl16superb, example \"stand-alone\" 95\\ result contradiction result statistical test. paradoxical result resolved using adjusted confidence intervals, cluster- different-adjusted confidence interval.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for Figure 3 — dataFigure3","text":"","code":"data(dataFigure3)"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for Figure 3 — dataFigure3","text":"object class data.frame.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure3.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for Figure 3 — dataFigure3","text":"doi:10.5709/acp-0214-z","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/dataFigure3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for Figure 3 — dataFigure3","text":"","code":"library(ggplot2) library(gridExtra) data(dataFigure3)  options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  ## realize the plot with unadjusted (left) and ajusted (right) 95% confidence intervals plt3a <- superb(     VD ~ grp,      dataFigure3,      adjustments=list(purpose = \"difference\", samplingDesign = \"SRS\"),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Difference-adjusted 95% CI\\n\") +   coord_cartesian( ylim = c(85,115) ) +   geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt3b <- superb(     VD ~ grp,      dataFigure3,      adjustments=list(purpose = \"difference\", samplingDesign = \"CRS\"),      plotLayout=\"bar\", clusterColumn = \"cluster\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Cluster and difference-adjusted\\n95% CI\") +   coord_cartesian( ylim = c(85,115) ) +    geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt3  <- grid.arrange(plt3a,plt3b,ncol=2)   ## realise the correct t-test to see the discrepancy res   <- t.test(dataFigure3$VD[dataFigure3$grp==1],                 dataFigure3$VD[dataFigure3$grp==2],                var.equal=TRUE) micc  <- mean(c(0.491334683772226, 0.20385744842838)) # mean ICC given by superbPlot lam   <- CousineauLaurencelleLambda(c(micc, 5,5,5,5,5,5)) tcorr <- res$statistic / lam pcorr <- 1-pt(tcorr,4) # let's see the t value and its p value: c(tcorr, pcorr) #>         t         t  #> 1.4187225 0.1144879"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure4.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for Figure 4 — dataFigure4","title":"Data for Figure 4 — dataFigure4","text":"data, inspired c17superb, shows example \"stand-alone\" 95\\ result contradiction result statistical test. paradoxical result resolved using adjusted confidence intervals, population size-adjusted confidence interval.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for Figure 4 — dataFigure4","text":"","code":"data(dataFigure4)"},{"path":"http://dcousin3.github.io/superb/reference/dataFigure4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data for Figure 4 — dataFigure4","text":"object class data.frame.","code":""},{"path":"http://dcousin3.github.io/superb/reference/dataFigure4.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Data for Figure 4 — dataFigure4","text":"doi:10.5709/acp-0214-z","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/dataFigure4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data for Figure 4 — dataFigure4","text":"","code":"library(ggplot2) library(gridExtra) data(dataFigure4)  options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  ## realize the plot with unadjusted (left) and ajusted (right) 95% confidence intervals plt4a = superb(     score ~ group,     dataFigure4,      adjustments=list(purpose = \"single\", popSize = Inf),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Difference-adjusted 95% CI\\n\") +   coord_cartesian( ylim = c(85,115) ) +   geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt4b = superb(     score ~ group,     dataFigure4,      adjustments=list(purpose = \"single\", popSize = 50 ),      plotLayout=\"bar\" ) +    xlab(\"Group\") + ylab(\"Score\") + labs(title=\"Population size and difference-\\nadjusted 95% CI\") +   coord_cartesian( ylim = c(85,115) ) +    geom_hline(yintercept = 100, colour = \"black\", linewidth = 0.5, linetype=2) plt4 = grid.arrange(plt4a,plt4b,ncol=2)   ## realise the correct t-test to see the discrepancy res = t.test(dataFigure4$score, mu=100) tcorr = res$statistic /sqrt(1-25/50) pcorr = 1-pt(tcorr,24) c(tcorr, pcorr) #>           t           t  #> 2.644354620 0.007100794"},{"path":"http://dcousin3.github.io/superb/reference/geom_flat_violin.html","id":null,"dir":"Reference","previous_headings":"","what":"geom_flat_violin for expanded density displays — geom_flat_violin","title":"geom_flat_violin for expanded density displays — geom_flat_violin","text":"geom_flat_violin() geom ggplots; based original script create  raincloud plots. relies largely code previously written David Robinson (https://gist.github.com/dgrtwo/eb7750e74997891d7c20) package ggplot2 Hadley Wickham. Code allen2019;textualsuperb expanded tow different ways. First, possible decide direction violin using direction argument (values 0 = symmetrical; 1 = extending right; -1 = extending left); last two cases \"half\"-violin. second argument push pushed violin away median line (default = 0).","code":""},{"path":"http://dcousin3.github.io/superb/reference/geom_flat_violin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geom_flat_violin for expanded density displays — geom_flat_violin","text":"","code":"geom_flat_violin(   mapping = NULL,   data = NULL,   stat = \"ydensity\",   position = \"dodge\",   trim = TRUE,   scale = \"area\",   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"http://dcousin3.github.io/superb/reference/geom_flat_violin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geom_flat_violin for expanded density displays — geom_flat_violin","text":"mapping (usual) see geom_violin() data (usual) see geom_violin() stat (usual) see geom_violin() position (usual) see geom_violin() trim TRUE (default), trim tails violins range data. FALSE, trim tails. scale \"area\" (default), violins area (trimming tails). \"count\", areas scaled proportionally number observations. \"width\", violins maximum width. show.legend (usual) see geom_violin() inherit.aes (usual) see geom_violin() ... additional parameters sent underlying geom_path(). includes direction (NEW) either -1,0, +1; push (NEW) positive number. na.rm (usual) see geom_violin() orientation (usual) see geom_violin()","code":""},{"path":"http://dcousin3.github.io/superb/reference/geom_flat_violin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geom_flat_violin for expanded density displays — geom_flat_violin","text":"layer containing violins ggplot object","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/geom_flat_violin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geom_flat_violin for expanded density displays — geom_flat_violin","text":"","code":"library(superb) # to import the geom_flat_violin library(ggplot2)  # let's have a fake data frame with three groups: dta <- dta <- GRD( SubjectsPerGroup = 20,     BSFactors = \"Vacations(yes,no,maybe)\",     RenameDV = \"tiredeness\",     Population = list(mean=75, stddev=15),     Effects = list(\"Vacations\" = custom(-20,+20,+10)) )  # The most basic plot = a regular error bar superb( tiredeness ~ Vacations, dta)   # an example with default violins superb( tiredeness ~ Vacations, dta,      plotLayout = \"pointjitterviolin\" )   # the same with some ornementations:   superb( tiredeness ~ Vacations, dta,      plotLayout = \"pointjitterviolin\",     violinParams = list(direction = 1, push = 0.2, fill=\"green\", alpha = 0.3) ) + theme_bw() + coord_flip() + ylab(\"Tiredeness\")   # This new geom is integrated inside superb() so that you can use it  # directly. Let's see examples:  # show the violins only ggplot(dta, aes(y = tiredeness, x = Vacations ) ) +    geom_flat_violin()   # change the parameters of the violins ggplot(dta, aes(y = tiredeness, x = Vacations ) ) +    geom_flat_violin( fill = \"green\")   # all the arguments manipulated ggplot(dta, aes(y = tiredeness, x = Vacations ) ) +     geom_flat_violin( fill = \"green\", direction = 1, push =0.)   # using direction within aes dta <- transform(dta, dir = ifelse(Vacations == \"no\", 1, -1))  ggplot(dta, aes(y = tiredeness, x = Vacations, direction = dir ) ) +     geom_flat_violin( fill = \"green\", push =0.)"},{"path":"http://dcousin3.github.io/superb/reference/geom_superberrorbar.html","id":null,"dir":"Reference","previous_headings":"","what":"geom_superberrorbar for expanded error bar displays — geom_superberrorbar","title":"geom_superberrorbar for expanded error bar displays — geom_superberrorbar","text":"geom_superberrorbar() geom ggplots; based original geom_errorbar (totally compatible ) expands geom four different ways. First, possible decide error bar tips direction can unidirectional, pointing \"left\" \"right\" go \"\" directions. Second, possible set tipformat \"double\" \"triple\" horizontal marks extremities error bar, tipgap liking. Third, additional characteristic vcolour set different colour vertical part error bar pair vcolour wcolour top half bottom half vertical error bar. colour(s) can also \"NA\" invisible. Lastly, error bar can pointing \"\" \"\" go \"\" (default)","code":""},{"path":"http://dcousin3.github.io/superb/reference/geom_superberrorbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"geom_superberrorbar for expanded error bar displays — geom_superberrorbar","text":"","code":"geom_superberrorbar(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   na.rm = FALSE,   orientation = NA,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/geom_superberrorbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"geom_superberrorbar for expanded error bar displays — geom_superberrorbar","text":"mapping (usual) see geom_errorbar data (usual) see geom_errorbar stat (usual) see geom_errorbar position (usual) see geom_errorbar ... additional parameters sent underlying geom_path. Includes pointing (NEW) either \"\", \"\" \"\" ; direction (NEW) \"left\", \"right\" \"\" (Default \"\") tipformat (NEW) \"single\", \"double\" \"triple\" add additional marker lines tips (default \"single\") tipgap (NEW) spacing markers \"double\" \"triple\" used (default 0.1) vcolour (NEW) vertical part error bar wcolour (NEW) specified, second half vertical part error bar. na.rm (usual) see geom_errorbar orientation (usual) see geom_errorbar show.legend (usual) see geom_errorbar inherit.aes (usual) see geom_errorbar","code":""},{"path":"http://dcousin3.github.io/superb/reference/geom_superberrorbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"geom_superberrorbar for expanded error bar displays — geom_superberrorbar","text":"layer containing error bars ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/geom_superberrorbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"geom_superberrorbar for expanded error bar displays — geom_superberrorbar","text":"","code":"library(superb) # to import the geom_superberrorbar library(ggplot2)  # let's have a fake data frame dta <- data.frame(grp = c(1,2,3), center=c(1,2,3), width = c(1,1,1.5) )  # an example with none of the new features = a regular error bar ggplot(dta, aes(ymin=center-width, ymax=center+width, x = grp ) ) +   geom_superberrorbar()   # an example with left-pointing error bars ggplot(dta, aes(ymin=center-width, ymax=center+width, x = grp ) ) +   geom_superberrorbar(direction=\"left\", width = 0.1)   # an example with doubled-tipped error bar and the default tipgap ggplot(dta, aes(ymin=center-width, ymax=center+width, x = grp ) ) +   geom_superberrorbar(tipformat = \"double\", width = 0.1)   # an example with left-pointing tripled-tip error bars with small gaps ggplot(dta, aes(ymin=center-width, ymax=center+width, x = grp ) ) +   geom_superberrorbar(tipformat = \"triple\", width= 0.1, tipgap = 0.04, direction = \"left\")   # an example with unidirectional error bars (here \"up\" bars) ggplot(dta, aes(y= center, ymin=center-width, ymax=center+width, x = grp ) ) +   geom_bar(stat=\"identity\", fill = \"yellow\") +    geom_superberrorbar(pointing = \"up\")   # a final example with two-coloured, left-pointing tripled-tip error bars with small gaps ggplot(dta, aes(ymin=center-width, ymax=center+width, x = grp ) ) +   geom_superberrorbar(tipformat = \"triple\", width= 0.1, tipgap = 0.04, direction = \"left\",            colour = \"black\", vcolour = \"orange\")   # This new geom is integrated inside superb() so that you can vary the  # error bar shapes. Let's see examples:  # using GRD to generate random data with a moderate effect options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages test <- GRD(SubjectsPerGroup  = 20,        WSFactors = \"Moment(5)\",              Effects = list(\"Moment\" = extent(10) ),             Population = list(mean = 100, stddev = 15, rho = 0.8) )   ornate = list(         labs(title =paste(\"(left)            95% confidence intervals\",                         \"\\n(right)          99% confidence intervals\",                         \"\\n(center, up) 99.9% confidence intervals\")),         xlab(\"Moment\"), ylab(\"Score\"),         coord_cartesian( ylim = c(85,125) ) )  plt1 <- superb(             crange(DV.1, DV.5) ~ .,              test,              WSFactors = \"Moment(5)\",               adjustments=list(purpose = \"difference\", decorrelation = \"CA\"),              errorbarParams = list(direction = \"left\", color=\"purple\",                                    width = 0.2, position = position_nudge(-0.05) ),             gamma     = 0.95,             plotLayout = \"line\" ) + ornate plt2 <- superb(              crange(DV.1, DV.5) ~ .,              test,              WSFactors = \"Moment(5)\",               adjustments=list(purpose = \"difference\", decorrelation = \"CA\"),              errorbarParams = list(direction = \"right\", tipgap = 0.25, tipformat = \"double\",                                    width = 0.2, position = position_nudge(+0.05) ),             gamma     = 0.99,             plotLayout = \"line\" ) + ornate  plt3 <- superb(              crange(DV.1, DV.5) ~ .,              test,              WSFactors = \"Moment(5)\",               adjustments=list(purpose = \"difference\", decorrelation = \"CA\"),              errorbarParams = list(direction = \"both\", tipformat = \"single\", pointing=\"up\",                                    width = 0.2, position = position_nudge(0) ),             gamma     = 0.999,             plotLayout = \"line\" ) + ornate   # transform the ggplots into \"grob\" so that they can be manipulated plt1 <- ggplotGrob(plt1) plt2 <- ggplotGrob(plt2 + makeTransparent() ) plt3 <- ggplotGrob(plt3 + makeTransparent() )  # put the grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1) +      annotation_custom(grob=plt2) +      annotation_custom(grob=plt3)    # all of them as aesthetics set.seed(1) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:gridExtra': #>  #>     combine #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union dat <- data.frame(Trial = c(rep(\"Pre\",9),rep(\"Post\",9)),                       Time = rep.int(seq(0,120,15),2),                       var = c(rnorm(9,15,2),rnorm(9,22,2)),                      var_sd = c(rnorm(18,3,1))) dat <- mutate(dat, point = ifelse(Trial == \"Pre\",\"down\",\"up\")) dat <- mutate(dat, direc = ifelse(Trial == \"Pre\",\"left\",\"right\")) dat <- mutate(dat, tipfo = ifelse(Trial == \"Pre\",\"double\",\"triple\")) dat <- mutate(dat, vcolo = ifelse(Trial == \"Pre\",\"red\",\"blue\"))     ggplot(data = dat,         aes(x = Time, y = var, group = Trial)) +    geom_line(aes(linetype = Trial)) +      geom_point(aes(shape= Trial, fill = Trial), size=2) +    geom_superberrorbar(aes(ymin=var-var_sd,                             ymax=var+var_sd,                            direction = direc,                            pointing = point,                             wcolour = vcolo,                              vcolour = \"green\",                            tipformat = tipfo        ),         width = 4)"},{"path":"http://dcousin3.github.io/superb/reference/GRD.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random data — GRD","title":"Generate random data — GRD","text":"function GRD() generates data frame containing random data suitable analyses. data can within-subject -group designs. Within-subject designs wide format. function originally presented ch19;textualsuperb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/GRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random data — GRD","text":"","code":"GRD(   RenameDV = \"DV\",   SubjectsPerGroup = 100,   BSFactors = \"\",   WSFactors = \"\",   Effects = list(),   Population = list(mean = 0, stddev = 1, rho = 0, scores =     \"rnorm(1, mean = GM, sd = STDDEV)\"),   Contaminant = list(mean = 0, stddev = 1, rho = 0, scores =     \"rnorm(1, mean = CGM, sd = CSTDDEV)\", proportion = 0),   Instrument = list(precision = 10^(-8), range = c(-Inf, +Inf)) )"},{"path":"http://dcousin3.github.io/superb/reference/GRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random data — GRD","text":"RenameDV provide name dependent variable (default DV) SubjectsPerGroup indicates number simulated scores per group (default 100 group) BSFactors string indicating -subject factor(s) , parenthesis, number levels list level names. Multiple factors separated colon \":\" enumerated vector strings. WSFactors string indicating within-subject factor(s) format -subject factors Effects list detailing effects apply data. effects can given list \"factorname\" = effect_specification \"factorname1*factorname2\" = effect_specification pairs, effect_specification can either slope(), extent(), custom() Rexpression(). slope extent, provide range, custom, indicate deviation grand mean cell, finally, Rexpression, give quote R commands returns deviation grand mean, using factors. See last example . Population list providing population characteristics (default normal distribution mean 0 standard deviation 1) Contaminant list providing contaminant characteristics proportion contaminant (default 0) Instrument list providing characteristics measurement instrument (time, precision limits )­.","code":""},{"path":"http://dcousin3.github.io/superb/reference/GRD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random data — GRD","text":"data.frame simulated scores.","code":""},{"path":"http://dcousin3.github.io/superb/reference/GRD.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate random data — GRD","text":"Note range effect specification renamed extent avoid masking base function base::range.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/GRD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random data — GRD","text":"","code":"# Simplest example using all the default arguments:   dta <- GRD()  head(dta) #>   id         DV #> 1  1 -0.3942900 #> 2  2 -0.0593134 #> 3  3  1.1000254 #> 4  4  0.7631757 #> 5  5 -0.1645236 #> 6  6 -0.2533617  hist(dta$DV)    # Renaming the dependant variable and setting the group size:  dta <- GRD( RenameDV = \"score\", SubjectsPerGroup = 200 )  hist(dta$score )    # Examples for a between-subject design and for a within-subject design:   dta <- GRD( BSFactors = '3', SubjectsPerGroup = 20)  dta <- GRD( WSFactors = \"Moment (2)\", SubjectsPerGroup = 20)   # A complex, 3 x 2 x (2) mixed design with a variable amount of participants in the 6 groups:  dta <- GRD(BSFactors = \"difficulty(3) : gender (2)\",           WSFactors=\"day(2)\",          SubjectsPerGroup=c(20,24,12,13,28,29)        )   # Defining population characteristics :  dta <- GRD(           RenameDV = \"IQ\",     SubjectsPerGroup = 20,          Population=list(                       mean=100,  # will set GM to 100                       stddev=15  # will set STDDEV to 15                     )          )  hist(dta$IQ)    # This example adds an effect along the \"Difficulty\" factor with a slope of 15  dta <- GRD(BSFactors=\"Difficulty(5)\", SubjectsPerGroup = 100,      Population=list(mean=50,stddev=15),       Effects = list(\"Difficulty\" = slope(15) )  )  # show the mean performance as a function of difficulty:  superb(DV ~ Difficulty, dta )    # An example in which the moments are correlated  dta <- GRD( BSFactors = \"Difficulty(2)\",WSFactors = \"Moment (2)\",       SubjectsPerGroup = 125,      Effects = list(\"Difficulty\" = slope(3), \"Moment\" = slope(1) ),      Population=list(mean=50,stddev=20,rho=0.85)  )  # the mean plot on the raw data...  superb(cbind(DV.1,DV.2) ~ Difficulty, dta, WSFactors = \"Moment(2)\",       plotLayout=\"line\",      adjustments = list (purpose=\"difference\") )   # ... and the mean plot on the decorrelated data;   # because of high correlation, the error bars are markedly different  superb(cbind(DV.1,DV.2) ~ Difficulty, dta, WSFactors = \"Moment(2)\",       plotLayout=\"line\",      adjustments = list (purpose=\"difference\", decorrelation = \"CM\") )     # This example creates a dataset in a 3 x 2 design. It has various effects,  # one effect of difficulty, with an overall effect of 10 more (+3.33 per level),  # one effect of gender, whose slope is 10 points (+10 points for each additional gender),  # and finally one interacting effect, which is 0 for the last three cells of the design:  GRD(      SubjectsPerGroup = 10,      BSFactors  = c(\"difficulty(3)\",\"gender(2)\"),       Population = list(mean=100,stddev=15),       Effects    = list(          \"difficulty\" = extent(10),          \"gender\"=slope(10),          \"difficulty*gender\"=custom(-300,+200,-100,0,0,0)       )   ) #>    id difficulty gender           DV #> 1   1          1      1 -200.6737428 #> 2   2          1      1 -200.0223696 #> 3   3          1      1 -249.3466456 #> 4   4          1      1 -219.0164253 #> 5   5          1      1 -194.7836695 #> 6   6          1      1 -212.0825977 #> 7   7          1      1 -209.4928309 #> 8   8          1      1 -202.2625670 #> 9   9          1      1 -211.1262396 #> 10 10          1      1 -220.5218030 #> 11 11          2      1  278.4913776 #> 12 12          2      1  261.5985389 #> 13 13          2      1  292.2302495 #> 14 14          2      1  302.5247186 #> 15 15          2      1  286.1920752 #> 16 16          2      1  303.3421736 #> 17 17          2      1  306.7561570 #> 18 18          2      1  301.0057046 #> 19 19          2      1  260.7710280 #> 20 20          2      1  291.8921049 #> 21 21          3      1    3.9531732 #> 22 22          3      1    1.6486957 #> 23 23          3      1    9.5645597 #> 24 24          3      1   -2.7668804 #> 25 25          3      1    9.1049384 #> 26 26          3      1  -11.4401333 #> 27 27          3      1   10.0258975 #> 28 28          3      1   -0.4283003 #> 29 29          3      1   -3.1923952 #> 30 30          3      1   38.4763633 #> 31 31          1      2   90.0518749 #> 32 32          1      2  134.2274265 #> 33 33          1      2  107.5361201 #> 34 34          1      2  102.9429423 #> 35 35          1      2  107.5550510 #> 36 36          1      2   78.7100419 #> 37 37          1      2  127.8409616 #> 38 38          1      2  133.0170202 #> 39 39          1      2   98.1560319 #> 40 40          1      2   85.7758471 #> 41 41          2      2   87.9873138 #> 42 42          2      2   94.9377015 #> 43 43          2      2   94.8289361 #> 44 44          2      2  109.9420178 #> 45 45          2      2   98.7263524 #> 46 46          2      2   49.9305010 #> 47 47          2      2   89.5540670 #> 48 48          2      2   98.6437490 #> 49 49          2      2  118.8577957 #> 50 50          2      2   94.6632505 #> 51 51          3      2   93.1469122 #> 52 52          3      2  129.3325018 #> 53 53          3      2  124.4924055 #> 54 54          3      2   88.7067766 #> 55 55          3      2  112.2720658 #> 56 56          3      2   80.4664652 #> 57 57          3      2  122.9787756 #> 58 58          3      2   79.6919419 #> 59 59          3      2   98.2143983 #> 60 60          3      2  121.2413107      # This last example creates a single group dataset,  # The instrument is assumed to return readings to   # plus or minus 0.1 only  GRD(      SubjectsPerGroup = 10,      Population = list(mean=100,stddev=15),       Instrument    = list(          precision = 0.1, range = c(-100,+100)      )   ) #>    id    DV #> 1   1 100.0 #> 2   2 100.0 #> 3   3 100.0 #> 4   4  94.7 #> 5   5  84.6 #> 6   6 100.0 #> 7   7  86.0 #> 8   8  99.9 #> 9   9 100.0 #> 10 10 100.0"},{"path":"http://dcousin3.github.io/superb/reference/HyunhFeldtEpsilon.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyunh and Feldt's epsilon measure of sphericity — HyunhFeldtEpsilon","title":"Hyunh and Feldt's epsilon measure of sphericity — HyunhFeldtEpsilon","text":"HyunhFeldtEpsilon() measure sphericity created gg58;textualsuperb. original measure biased therefore, hf76;textualsuperb produced revised version (note 1976 paper contained typos uncorrected SPSS; l91;textualsuperb)","code":""},{"path":"http://dcousin3.github.io/superb/reference/HyunhFeldtEpsilon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyunh and Feldt's epsilon measure of sphericity — HyunhFeldtEpsilon","text":"","code":"HyunhFeldtEpsilon(dta, cols)"},{"path":"http://dcousin3.github.io/superb/reference/HyunhFeldtEpsilon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyunh and Feldt's epsilon measure of sphericity — HyunhFeldtEpsilon","text":"dta data.frame cols vector column names indicating relevant columns compute epsilon. columns ignored.","code":""},{"path":"http://dcousin3.github.io/superb/reference/HyunhFeldtEpsilon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyunh and Feldt's epsilon measure of sphericity — HyunhFeldtEpsilon","text":"returns Hyunh-Feldt estimate sphericity epsilon","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/is.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"logical functions for formulas — is.formula","title":"logical functions for formulas — is.formula","text":"functions .formula(), .one.sided(), .nested.terms(), .cbind.terms(), .crange.terms(), .formula() sub.formulas() performs checks extract sub-formulas given formula.","code":""},{"path":"http://dcousin3.github.io/superb/reference/is.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logical functions for formulas — is.formula","text":"","code":"is.formula(frm)  is.one.sided(frm)  has.nested.terms(frm)  has.cbind.terms(frm)  has.crange.terms(frm)  in.formula(frm, whatsym)  sub.formulas(frm, head)"},{"path":"http://dcousin3.github.io/superb/reference/is.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logical functions for formulas — is.formula","text":"frm formula; whatsym symbol search formula; head beginning sub-formula extract","code":""},{"path":"http://dcousin3.github.io/superb/reference/is.formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logical functions for formulas — is.formula","text":".formula(frm), .nested.terms(frm), .crange.terms(frm) .cbind.terms(frm) returns TRUE frm formula, contains | crange cbind respectively; .formula(frm, whatsym) returns TRUE symbol whatsym somewhere 'frm'; sub.formulas(frm, head) returns list sub-formulas contains head.","code":""},{"path":"http://dcousin3.github.io/superb/reference/is.formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"logical functions for formulas — is.formula","text":"formulas internal use.","code":""},{"path":"http://dcousin3.github.io/superb/reference/is.formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logical functions for formulas — is.formula","text":"","code":"is.formula( Frequency ~ Intensity * Pitch ) #> [1] TRUE   has.nested.terms( Level ~ Factor | Level ) #> [1] TRUE   has.cbind.terms( Frequency ~ cbind(Low,Medium,High) * cbind(Soft, Hard) ) #> [1] TRUE   has.crange.terms( Frequency ~ crange(Low,High) * cbind(Soft, Hard) ) #> [1] TRUE   in.formula( Frequency ~ Intensity * Pitch, \"Pitch\" ) #> [1] TRUE   sub.formulas( Frequency ~ cbind(Low,Medium,High) * cbind(Soft, Hard), \"cbind\" ) #> [[1]] #> cbind(Low, Medium, High) #>  #> [[2]] #> cbind(Soft, Hard) #>"},{"path":"http://dcousin3.github.io/superb/reference/makeTransparent.html","id":null,"dir":"Reference","previous_headings":"","what":"makes ggplots with transparent elements — makeTransparent","title":"makes ggplots with transparent elements — makeTransparent","text":"makeTransparent extension ggplots makes elements plot transparent except data displayed. useful superimpose multiple plots, e.g. generate plots multiple error bars example.","code":""},{"path":"http://dcousin3.github.io/superb/reference/makeTransparent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makes ggplots with transparent elements — makeTransparent","text":"","code":"makeTransparent()"},{"path":"http://dcousin3.github.io/superb/reference/makeTransparent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makes ggplots with transparent elements — makeTransparent","text":"return anything; set elements transparent.","code":""},{"path":"http://dcousin3.github.io/superb/reference/makeTransparent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"makes ggplots with transparent elements — makeTransparent","text":"","code":"# make a basic plot superb(len ~ dose + supp, ToothGrowth )   # make a basic plot with transparent elements superb(len ~ dose + supp, ToothGrowth,     ) + makeTransparent()"},{"path":"http://dcousin3.github.io/superb/reference/MauchlySphericityTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Mauchly's test of Sphericity — MauchlySphericityTest","title":"Mauchly's test of Sphericity — MauchlySphericityTest","text":"Performs test sphericity dataframe multiple measures, one subject per line. assesses significance null hypothesis covariance matrix spherical. test described a10superb","code":""},{"path":"http://dcousin3.github.io/superb/reference/MauchlySphericityTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mauchly's test of Sphericity — MauchlySphericityTest","text":"","code":"MauchlySphericityTest(dta, cols)"},{"path":"http://dcousin3.github.io/superb/reference/MauchlySphericityTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mauchly's test of Sphericity — MauchlySphericityTest","text":"dta data frame containing within-subject measures, one participant per line; cols vector indicating columns containing measures.","code":""},{"path":"http://dcousin3.github.io/superb/reference/MauchlySphericityTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mauchly's test of Sphericity — MauchlySphericityTest","text":"p p-value null hypothesis data spherical.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/MauchlySphericityTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mauchly's test of Sphericity — MauchlySphericityTest","text":"","code":"# creates a small data frames with 4 subject's scores for 5 measures: dta <- data.frame(cbind(         col1 <- c(3., 6., 2., 2., 5.),         col2 <- c(4., 5., 4., 4., 3.),         col3 <- c(2., 7., 7., 8., 6.),         col4 <- c(6., 8., 4., 6., 5.)     )) # performs the test (here p = 0.5824) MauchlySphericityTest(dta) #> [1] 0.5824426"},{"path":"http://dcousin3.github.io/superb/reference/measuresWithMissingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Measures with missing data — measuresWithMissingData","title":"Measures with missing data — measuresWithMissingData","text":"following three functions can used missing data. return mean, standard error mean confidence interval mean.Note hesitated provide functions: deal missing data prior making plot. Removing NAs mean univariate setting equivalent performing mean imputation. See @enwiki:1243866876 . Also note repeated-measure design, CA adjustment available.","code":""},{"path":"http://dcousin3.github.io/superb/reference/measuresWithMissingData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measures with missing data — measuresWithMissingData","text":"","code":"meanNArm(x)  SE.meanNArm(x)  CI.meanNArm(x, gamma)"},{"path":"http://dcousin3.github.io/superb/reference/measuresWithMissingData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measures with missing data — measuresWithMissingData","text":"x vector numbers, sample data (mandatory); gamma confidence level CI (default 0.95).","code":""},{"path":"http://dcousin3.github.io/superb/reference/measuresWithMissingData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measures with missing data — measuresWithMissingData","text":"means, measure precision (SE) interval precision (CI) presence missing data.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/measuresWithMissingData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measures with missing data — measuresWithMissingData","text":"","code":"# the confidence interval of the mean for default 95% and 90% confidence level meanNArm( c(1,2,3, NA) ) #> [1] 2 SE.meanNArm( c(1,2,3, NA) ) #> [1] 0.5773503 CI.meanNArm( c(1,2,3, NA) ) #> [1] -0.4841377  4.4841377 CI.meanNArm( c(1,2,3, NA), gamma = 0.90) #> [1] 0.3141455 3.6858545"},{"path":"http://dcousin3.github.io/superb/reference/poolSDTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"pooled standard deviation transform — poolSDTransform","title":"pooled standard deviation transform — poolSDTransform","text":"poolSDTransform  transformations can applied matrix data. resulting matrix column- standard deviations equal pool standard deviations individual columns, solution adopted lm94superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/poolSDTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pooled standard deviation transform — poolSDTransform","text":"","code":"poolSDTransform(dta, variables)"},{"path":"http://dcousin3.github.io/superb/reference/poolSDTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pooled standard deviation transform — poolSDTransform","text":"dta data.frame containing data wide format; variables vector column names transformation applied. remaining columns left unchanged","code":""},{"path":"http://dcousin3.github.io/superb/reference/poolSDTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pooled standard deviation transform — poolSDTransform","text":"data.frame form dta variables transformed. function useful passed argument preprocessfct superb() performs modification data matrix.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasures.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision measures — precisionMeasures","title":"Precision measures — precisionMeasures","text":"superb comes built-measures precisions. SE.fct() functions produces interval width; CI.fct() produces lower upper limits interval. See htc14,htc15superb . \"superbPlot-compatible\" precision measures must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision measures — precisionMeasures","text":"","code":"SE.mean(x)  CI.mean(x, gamma)  SE.median(x)  CI.median(x, gamma)  SE.hmean(x)  CI.hmean(x, gamma)  SE.gmean(x)  CI.gmean(x, gamma)  SE.var(x)  CI.var(x, gamma)  SE.sd(x)  CI.sd(x, gamma)  SE.MAD(x)  CI.MAD(x, gamma)  SE.IQR(x)  CI.IQR(x, gamma)  SE.fisherskew(x)  CI.fisherskew(x, gamma)  SE.pearsonskew(x)  CI.pearsonskew(x, gamma)  SE.fisherkurtosis(x)  CI.fisherkurtosis(x, gamma)"},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision measures — precisionMeasures","text":"x vector numbers, sample data (mandatory); gamma confidence level CI (default 0.95).","code":""},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision measures — precisionMeasures","text":"measure precision (SE) interval precision (CI).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision measures — precisionMeasures","text":"","code":"# the confidence interval of the mean for default 95% and 90% confidence level CI.mean( c(1,2,3) ) #> [1] -0.4841377  4.4841377 CI.mean( c(1,2,3), gamma = 0.90) #> [1] 0.3141455 3.6858545  # Standard errors for standard deviation, for MAD and for fisher skew SE.sd( c(1,2,3) ) #> [1] 0.5 SE.MAD( c(1,2,3) ) #> [1] 0.4606589 SE.fisherskew( c(1,2,3) ) #> [1] 1.224745"},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasureWithCustomDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","title":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","text":"following function computes confidence interval custom degree freedom. default use N-1 number quite appropriate. get exact critical value used construct confidence interval, necessary “pool” degrees freedom. last expression means degree freedom total number data minus 1 condition except last, minus 1 participant except last. formula, number repeated measures $p$, number participants $n$, total sample size $N$ ($N = p x n$, pooled degree freedom $(p-1) x (n-1)$ equivalently $N -p-n+1$. Another example custom degree freedom can used heterogeneous variances, confidence interval mean mirror Welsh test degrees freedom altered based variances. function CIwithDF.mean() accept arbitrary defined degree freedom (df). df must combined argument `gamma` confidence level.","code":""},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasureWithCustomDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","text":"","code":"CIwithDF.mean(x, gamma = 0.95 )"},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasureWithCustomDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","text":"x vector numbers, sample data (mandatory); gamma vector containing first confidence level CI (default 0.95) custom degree freedom (unspecified, uses n-1 n number observations condition).","code":""},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasureWithCustomDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","text":"confidence interval (CI) t value based custom-set degree freedom.","code":""},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasureWithCustomDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","text":"See vignette \"Unequal variances, Welch test, Tryon adjustment, superb\" example use.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/precisionMeasureWithCustomDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence intervals with custom degree of freedom — precisionMeasureWithCustomDF","text":"","code":"# this will issue a warning as no custom degree of freedom (df) is provided CIwithDF.mean( c(1,2,3), gamma = 0.90)           #> Warning: superb::FYI: No degree of freedom provided in gamma[2]; revert to CI.mean #> [1] 0.3141455 3.6858545 # the confidence interval of the mean for 90% confidence level CIwithDF.mean( c(1,2,3), gamma = c(0.90, 1.5) ) # uses 1.5 as df instead of 2. #> [1] -0.1391871  4.1391871  # ==================================================== # A COMPLETE EXAMPLE:  # ====================================================  # Let's generate random measurements with GRD: # (we generate a very small group of 10 to have a chance to see differences) dta <- GRD( WSFactors = \"Moment (3)\", SubjectsPerGroup = 10)  # We need ggplotGrop library(ggplot2)  # First, a regular plot plt1 <- superb(            cbind(DV.1,DV.2,DV.3) ~ .,             dta,             WSFactors      = \"Moment(3)\",             plotLayout     = \"line\",            adjustments    = list (purpose=\"difference\",decorrelation=\"CM\"),            errorbar       = \"CI\",            gamma          = 0.95,             errorbarParams = list(color=\"orange\", width= 0.1, direction = \"both\",                                  position = position_nudge(-0.0) )         ) # Second, a plot where the df are set to the default plt2 <- superb(            cbind(DV.1,DV.2,DV.3) ~ .,            dta,             WSFactors      = \"Moment(3)\",             plotLayout     = \"line\",            adjustments    = list (purpose=\"difference\",decorrelation=\"CM\"),            errorbar       = \"CIwithDF\",    # NEW: change the CI computation             gamma          = c(0.95, 10-1), # NEW: specify explicitely the unpooled df            errorbarParams = list(color=\"red\", width= 0.1, direction = \"left\",                                    position = position_nudge(-0.05) )         ) # Third, a plot where the pooled df are explicitely set  plt3 <- superb(            cbind(DV.1,DV.2,DV.3) ~ .,            dta,             WSFactors      = \"Moment(3)\",             plotLayout     = \"line\",            adjustments    = list (purpose=\"difference\",decorrelation=\"CM\"),            errorbar       = \"CIwithDF\",         # NEW: again, change the CI computation            gamma          = c(0.95, 30-3-10+1), # NEW: this time, specify the pooled df            errorbarParams = list(color=\"blue\", width= 0.1, direction = \"right\",                                  position = position_nudge(+0.05) )          ) # Convert the plots into grapphical objects all with the same scale... plt1b <- ggplotGrob(plt1 + ylim(-1.65,1.65) ) plt2b <- ggplotGrob(plt2 + ylim(-1.65,1.65) + makeTransparent() ) plt3b <- ggplotGrob(plt3 + ylim(-1.65,1.65) + makeTransparent() )  # ... and superimpose these grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1b) +      annotation_custom(grob=plt2b) +      annotation_custom(grob=plt3b)   # As seen and as expected, the orange and red bars are identical;  # The blue bars, based on the (correct) pooled degree of freedom # are just a little bit smaller because the pooled df are larger. # However, the difference is visible only because the group size # is ridiculously small (10 participants only).  # ==================================================== # AN EXAMPLE with heterogeneous variance # ====================================================  # We create simulated scores with a large amount of heterogeneity dta <- GRD(      BSFactors = \"Group(3)\",      SubjectsPerGroup = 10,      Population = list(          mean   = 100, # will set GM to 100          stddev = 15,  # will set STDDEV to 15          scores = \"rnorm(1, mean = GM, sd = STDDEV*Group)\"      )  )  # This computes the Welch's degree of freedom wdf <- WelchDegreeOfFreedom(dta, \"DV\", \"Group\" ) wdf # should be between n-1 and N-n-p+1. #> [1] 19.02127  # A regular plot plt1 <- superb(            DV ~ Group,            dta,             plotLayout     = \"line\",            adjustments    = list (purpose=\"difference\"),            errorbar       = \"CI\",            gamma          = 0.95,             errorbarParams = list(color=\"orange\", width= 0.1, direction = \"both\",                                  position = position_nudge(-0.0) )         ) # Second, a plot where the df are set to the pooled df plt2 <- superb(             DV ~ Group,            dta,             plotLayout     = \"line\",            adjustments    = list (purpose=\"difference\"),            errorbar       = \"CIwithDF\",         # NEW: change the CI computation             gamma          = c(0.95, 30-10-3+1), # NEW: specify explicitely the unpooled df            errorbarParams = list(color=\"red\", width= 0.1, direction = \"left\",                                    position = position_nudge(-0.05) )         ) # Third, a plot where the pooled df are explicitely set  plt3 <- superb(             DV ~ Group,            dta,             plotLayout     = \"line\",            adjustments    = list (purpose=\"difference\"),            errorbar       = \"CIwithDF\",       # NEW: again, change the CI computation            gamma          = c(0.95, wdf),     # NEW: this time, specify the pooled df            errorbarParams = list(color=\"blue\", width= 0.1, direction = \"right\",                                  position = position_nudge(+0.05) )          ) # Convert the plots into grapphical objects all with the same scale... plt1b <- ggplotGrob(plt1 + ylim(25,175) ) plt2b <- ggplotGrob(plt2 + ylim(25,175) + makeTransparent() ) plt3b <- ggplotGrob(plt3 + ylim(25,175) + makeTransparent() )  # ... and superimpose these grobs onto an empty ggplot  ggplot() +      annotation_custom(grob=plt1b) +      annotation_custom(grob=plt2b) +      annotation_custom(grob=plt3b)   # As seen, the Welch's corrected df results in error bars (blue) which are  # just a little bit longer than the pooled df bars (red). In all cases, the # unadjusted (default) error bars (n-1) are longer (orange bars), resulting in a more  # conservative representation of the data."},{"path":"http://dcousin3.github.io/superb/reference/runDebug.html","id":null,"dir":"Reference","previous_headings":"","what":"runDebug — runDebug","title":"runDebug — runDebug","text":"runDebug internal function used GRD superb help debugging functions. assigns global environment variables local function become visible. Use options(\"superb.feedback\" = \"\") turn debug . default values option \"superb.feedback\" c(\"design\",\"warnings\",\"summary\",\"experimental\") four entries allow: design:       (superbPlot) showing information within-subject variables understood; warnings:     (superbPlot) returning 'FYI' messages data help decide appropriate error bars used summary:      (GRD) showing recapitulation design; experimental: (superbPlot) showing message experimental features used. last feedback information currently inhibited future versions.","code":""},{"path":"http://dcousin3.github.io/superb/reference/runDebug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"runDebug — runDebug","text":"","code":"runDebug(where, title, vars, vals)"},{"path":"http://dcousin3.github.io/superb/reference/runDebug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"runDebug — runDebug","text":"indicates program runDebug called title string text displayed function triggered vars strings names variables placed global environment vals numeric values given variables.","code":""},{"path":"http://dcousin3.github.io/superb/reference/runDebug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"runDebug — runDebug","text":"puts globalenvironment variables named \"vars\"","code":""},{"path":"http://dcousin3.github.io/superb/reference/showSignificance.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate significance of results on plots — showSignificance","title":"Annotate significance of results on plots — showSignificance","text":"showSignificance() used add annotation ggplot form square bracket text. bracket extends x range (left, right) heigth width. also possible bracket text vertical y range (bottom, top).","code":""},{"path":"http://dcousin3.github.io/superb/reference/showSignificance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate significance of results on plots — showSignificance","text":"","code":"showSignificance(   x,   y,   width,   text = NULL,   panel = list(),   segmentParams = list(),   textParams = list() )"},{"path":"http://dcousin3.github.io/superb/reference/showSignificance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate significance of results on plots — showSignificance","text":"x (vector 2 horizontal) indicates limits annotation; y (vector 2 vertical) location annotation y direction width height annotation; negative width, legs extends towards bottom; text (optional) string text display opposite side width; panel (optional) list identify panel put annotation; segmentParams (optional) list directives sent geom_segment() items; textParams (optional) list directives sent geom_text() item.","code":""},{"path":"http://dcousin3.github.io/superb/reference/showSignificance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate significance of results on plots — showSignificance","text":"adds annotation ggplot","code":""},{"path":"http://dcousin3.github.io/superb/reference/showSignificance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate significance of results on plots — showSignificance","text":"","code":"# loading required libraries library(superb) library(ggplot2) library(grid)  # making one random data set with three factors 2 x 3 x (3) dta <- GRD(     SubjectsPerGroup = 20,     BSFactors = c(\"Group(2)\",\"Age(3)\"),      WSFactors = c(\"Moment(3)\"),     Population = list(mean = 75, stddev = 5),     Effects   = list(\"Group\" = slope(10) ) )  # making a two-factor plot and a three-factor plots (having panels) plt2 <- superb(         cbind(DV.1,DV.2,DV.3) ~ Group,          dta,          WSFactor = c(\"Moment(3)\"),         adjustments = list(purpose=\"difference\"),         plotLayout  = \"bar\",         factorOrder = c(\"Moment\",\"Group\")     ) plt3 <- superb(         cbind(DV.1,DV.2,DV.3) ~ Group + Age,          dta,         WSFactor = c(\"Moment(3)\"),         adjustments = list(purpose=\"difference\"),         plotLayout  = \"bar\",         factorOrder = c(\"Moment\",\"Group\",\"Age\")     )  # lets decorate these plots a bit... plt2 <- plt2 +  scale_fill_manual( name = \"Group\",          labels = c(\"Easy\", \"Hard\"),          values = c(\"blue\", \"purple\")) +    scale_colour_manual( name = \"Group\",          labels = c(\"Easy\", \"Hard\"),          values = c(\"blue\", \"purple\")) +   coord_cartesian( ylim = c(50,100), xlim = c(0.5, 3.9) ) plt3 <- plt3 +  scale_fill_manual( name = \"Group\",          labels = c(\"Easy\", \"Hard\"),          values = c(\"blue\", \"purple\")) +    scale_colour_manual( name = \"Group\",          labels = c(\"Easy\", \"Hard\"),          values = c(\"blue\", \"purple\")) +   coord_cartesian( ylim = c(50,105) )  # a very basic example plt2 +  showSignificance( c(0.75, 1.25), 90, -1, \"++1++\")   # the annotation can be vertical when y is a vector with bottom and top location: plt2 + showSignificance( 3.75, c(70,80), -0.1, \"++1++\")   # an example with panels; the \"panel\" argument is used to identify on  # which panel to put the annotation (or else they appear on all panels) # and with arms of differing lengths, and one flat ending plt3 +      showSignificance( c(0.75, 1.25), 90, -2.5,      \"++1++\", panel = list(Age= 1)) +      showSignificance( c(1.75, 2.25), 90, -2.5,      \"++2++\", panel = list(Age= 2)) +      showSignificance( c(0.75, 1.25), 90, c(-10,-5), \"++3++\", panel = list(Age= 3)) +     showSignificance( c(2.00, 3.25), 95, -10,       \"++4++\", panel = list(Age= 3)) +      showSignificance( c(1.75, 2.25), 85, 0,                  panel = list(Age= 3))     # here, we send additional directives to the annotations plt3 +      showSignificance( c(0.75, 1.25), 90, -5,  \"++1++\", panel = list(Age= 1)) +      showSignificance( c(1.75, 2.25), 95, -10, \"++2++\", panel = list(Age = 2),         textParams    = list(size = 3,              # smaller font                             family  = \"mono\",       # courrier font                             colour= \"chartreuse3\"   # dark green color         ),          segmentParams = list(linewidth = 1.,             # thicker lines                             arrow   = arrow(length = unit(0.2, \"cm\") ), # arrow heads                             colour = \"chartreuse3\"  # dark green color as well         )     ) +     showSignificance( c(1.75, 3.25), 95, -30, \"++3++\", panel = list(Age = 3),         textParams    = list(size = 5,              # larger font                             family  = \"serif\",      # times font                             alpha = 0.3 ),          # transparent         segmentParams = list(linewidth = 2.,                              arrow   = arrow(length = unit(0.2, \"cm\") ),                              alpha = 0.3,                              lineend = \"round\"       # so that line end overlap nicely         )     )"},{"path":"http://dcousin3.github.io/superb/reference/ShroutFleissICC1.html","id":null,"dir":"Reference","previous_headings":"","what":"Shrout and Fleiss intra-class correlation functions — ShroutFleissICC1","title":"Shrout and Fleiss intra-class correlation functions — ShroutFleissICC1","text":"functions ShroutFleissICC1, ShroutFleissICC11 ShroutFleissICC1k computes intra-class correlation ICC given data frame containing repeated measures columns cols measures distinct clusters, identified column clustercol. See sf79superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/ShroutFleissICC1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shrout and Fleiss intra-class correlation functions — ShroutFleissICC1","text":"","code":"ShroutFleissICC1(dta, clustercol, cols)"},{"path":"http://dcousin3.github.io/superb/reference/ShroutFleissICC1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shrout and Fleiss intra-class correlation functions — ShroutFleissICC1","text":"dta data frame containing within-subject measures, one participant per line; clustercol column index cluster belonging given; cols vector indicating columns containing measures.","code":""},{"path":"http://dcousin3.github.io/superb/reference/ShroutFleissICC1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shrout and Fleiss intra-class correlation functions — ShroutFleissICC1","text":"ICC intra-class measure association.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/ShroutFleissICC1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shrout and Fleiss intra-class correlation functions — ShroutFleissICC1","text":"","code":"# creates a small data frames with 4 subject's scores for 5 measures: dta <- data.frame(cbind(         clus <- c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),         col1 <- c(2, 4, 4, 6, 4, 5, 8, 8, 5, 8, 9, 9)     ))  ShroutFleissICC1(dta, 1, 2) #> [1] 0.4343434 # 0.434343434  ShroutFleissICC11(dta[, 1], dta[,2]) #> [1] 0.4343434 # 0.434343434   dta2 <- data.frame(cbind(         clus <- c(1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3),         col1 <- c(1, 3, 3, 5, 3, 4, 7, 7, 4, 7, 8, 8),         col1 <- c(2, 4, 4, 6, 4, 5, 8, 8, 5, 8, 9, 9),         col1 <- c(3, 5, 5, 7, 5, 6, 9, 9, 6, 9, 10, 10)     ))   ShroutFleissICC1(dta2, 1, 2:4) #> [1] 0.754386 # 0.7543859649  ShroutFleissICC1k(dta2[, 1], dta2[,2:4]) #> [1] 0.754386 # 0.7543859649"},{"path":"http://dcousin3.github.io/superb/reference/slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Effect description — slope","title":"Effect description — slope","text":"four ways effects can defined GRD. `\"factor\" = slope(s)` vary means amount s step factor; `\"factor\" = extent(s)` vary means uniformly difference s first last factor level; `\"factor\" = custom(,b,c..)` alter means amount first, b second, etc. Finally `\"factor\" = Rexpression(\"R code\")` apply R code levels factors, altering base mean.","code":""},{"path":"http://dcousin3.github.io/superb/reference/slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effect description — slope","text":"","code":"slope(s)  extent(s)  custom(...)  Rexpression(str)"},{"path":"http://dcousin3.github.io/superb/reference/slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effect description — slope","text":"s size effect ... sequence sizes effects str R code string","code":""},{"path":"http://dcousin3.github.io/superb/reference/slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Effect description — slope","text":"internal functions meant used isolation meaningful way...","code":""},{"path":"http://dcousin3.github.io/superb/reference/subjectCenteringTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"subject-centering transform — subjectCenteringTransform","title":"subject-centering transform — subjectCenteringTransform","text":"subjectCenteringTransform transformation can applied matrix data. resulting matrix means centered grand mean, subject-wise c05superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/subjectCenteringTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subject-centering transform — subjectCenteringTransform","text":"","code":"subjectCenteringTransform(dta, variables)"},{"path":"http://dcousin3.github.io/superb/reference/subjectCenteringTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subject-centering transform — subjectCenteringTransform","text":"dta data.frame containing data wide format; variables vector column names transformation applied. remaining columns left unchanged","code":""},{"path":"http://dcousin3.github.io/superb/reference/subjectCenteringTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subject-centering transform — subjectCenteringTransform","text":"data.frame form dta variables transformed. function useful passed argument preprocessfct superb() performs modification data matrix.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/summaryStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional summary statistics — summaryStatistics","title":"Additional summary statistics — summaryStatistics","text":"superb adds summary statistics can used characterize dataset. comes SE.fct() CI.fct(). See htc14,htc15superb . superbPlot-compatible summary statistics functions must one parameter:","code":""},{"path":"http://dcousin3.github.io/superb/reference/summaryStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional summary statistics — summaryStatistics","text":"","code":"hmean(x)  gmean(x)  MAD(x)  fisherskew(x)  pearsonskew(x)  fisherkurtosis(x)"},{"path":"http://dcousin3.github.io/superb/reference/summaryStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional summary statistics — summaryStatistics","text":"x vector numbers, sample data (mandatory);","code":""},{"path":"http://dcousin3.github.io/superb/reference/summaryStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional summary statistics — summaryStatistics","text":"summary statistic describing sample.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/summaryStatistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional summary statistics — summaryStatistics","text":"","code":"# the confidence interval of the mean for default 95% and 90% confidence level gmean( c(1,2,3) )  # the geometric mean; also available in psych::geometric.mean    #> [1] 1.817121 hmean( c(1,2,3) )  # the harmonic mean;  also available in psych::harmonic.mean    #> [1] 1.636364 MAD( c(1,2,3) )    # the median absolute deviation to the median (not the same as mad) #> [1] 1 fisherskew( c(1,2,3) )     # the Fisher skew corrected for sample size #> [1] 0 fisherkurtosis( c(1,2,3) ) # the Fisher kurtosis corrected for sample size #> [1] NaN pearsonskew( c(1,2,3) )    # the Pearson skew #> [1] 0"},{"path":"http://dcousin3.github.io/superb/reference/superb-package.html","id":null,"dir":"Reference","previous_headings":"","what":"superb: Summary Plots with Adjusted Error Bars — superb-package","title":"superb: Summary Plots with Adjusted Error Bars — superb-package","text":"Computes standard error confidence interval various descriptive statistics various designs sampling schemes. main function, superb(), return plot. can also used obtain dataframe statistics precision intervals plotting environments (e.g., Excel) can used. See Cousineau colleagues (2021) doi:10.1177/25152459211035109  Cousineau (2017) doi:10.5709/acp-0214-z  review well Cousineau (2005) doi:10.20982/tqmp.01.1.p042 , Morey (2008) doi:10.20982/tqmp.04.2.p061 , Baguley (2012) doi:10.3758/s13428-011-0123-7 , Cousineau & Laurencelle (2016) doi:10.1037/met0000055 , Cousineau & O'Brien (2014) doi:10.3758/s13428-013-0441-z , Calderini & Harding doi:10.20982/tqmp.15.1.p001  specific references.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superb-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"superb: Summary Plots with Adjusted Error Bars — superb-package","text":"`suberb` library perform descriptive statistics plots based superb framework. nutshell, framework assert confidence intervals must devised according relevant information can used assess precision. example, confidence intervals informed presence within-subject design, fact sample random clustered, whether population finite infinite, etc. t-test independent groups know data paired? course, ! use classic \"stand-alone\" confidence interval ? classic confidence intervals oblivious relevant information. superb framework based idea correct, well-informed, confidence intervals can obtained succession simple corrections. call \"adjusted confidence intervals\". main function superb(formula, dataframe,  ...) df dataframe. details underlying math, see c05,c19,c17,cl16,m08,b12,lm94,gc19superb second function inserted package ch19superb GRD( ...) generates random datasets. easily generate ficticious dataset superbPlot can tested rapidly. function described ch19superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superb-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"superb: Summary Plots with Adjusted Error Bars — superb-package","text":"package includes additional, helper, functions: ShroutFleissICC1 compute intra-class correlation; epsilon compute sphericity measure; lambda compute cluster-sampling adjustment; MauchlySphericityTest perform test sphericity; WinerCompoundSymmetry perform test compound symmetry; example datasets described paper: dataFigure1 illustrate paradox using stand-alone CI -group design; dataFigure2 illustrate paradox using stand-alone CI within-subject design; dataFigure3 illustrate paradox using stand-alone CI cluster-randomized sampling study; dataFigure4 illustrate paradox using stand-alone CI population finite size.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superb-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"superb: Summary Plots with Adjusted Error Bars — superb-package","text":"Maintainer: Denis Cousineau denis.cousineau@uottawa.ca contributors: Bradley Harding bradley.harding@umoncton.ca [contributor] Marc-Andre Goulet magoulet101@gmail.com [contributor] Jesika Walker jwalk050@uottawa.ca [artist, presenter]","code":""},{"path":"http://dcousin3.github.io/superb/reference/superb.html","id":null,"dir":"Reference","previous_headings":"","what":"superb — superb","title":"superb — superb","text":"function superb() plots standard error confidence interval various descriptive statistics various designs, sampling schemes, population size purposes, according superb framework. See cgh21superb . functions superb() now entry point realize summary plots. Compared previously documented superbPlot(), superb() based formula accept long wide format.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superb — superb","text":"","code":"superb(   formula,   data,   WSFactors = NULL,   WSDesign = NULL,   factorOrder = NULL,   statistic = \"mean\",   errorbar = \"CI\",   gamma = 0.95,   adjustments = list(purpose = \"single\", popSize = Inf, decorrelation = \"none\",     samplingDesign = \"SRS\"),   showPlot = TRUE,   plotStyle = NULL,   plotLayout = \"line\",   preprocessfct = NULL,   postprocessfct = NULL,   clusterColumn = NULL,   ... )"},{"path":"http://dcousin3.github.io/superb/reference/superb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superb — superb","text":"formula formula describing design data frame data Dataframe wide long format WSFactors name within-subject factor(s) WSDesign within-subject design full factorial design (default \"fullfactorial\") factorOrder Order factors shown graph (order: x axis, groups, horizontal panels, vertical panels) statistic summary statistic function use string errorbar function computes error bar. \"CI\" \"SE\" function name defined custom function. Default \"CI\" gamma coverage factor; necessary errorbar == \"CI\". Default 0.95. adjustments List adjustments described . Default adjustments = list(purpose = \"single\", popSize = Inf,  decorrelation = \"none\", samplingDesign = \"SRS\") showPlot Defaults TRUE. Set FALSE want output summary statistics intervals. plotStyle  plotLayout type object plot graph. See full list . Defaults \"line\". preprocessfct transform (vector ) performed first data matrix group postprocessfct transform (vector ) clusterColumn used conjunction samplingDesign = \"CRS\", indicates column contains cluster membership ... addition parameters , superbPlot also accept number optional arguments transmitted plotting function, pointParams (list ggplot2 parameters input inside geoms; see ?geom_bar2) errorbarParams (list ggplot2 parameters geom_errorbar; see ?geom_errorbar)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superb — superb","text":"plot correct error bars table summary statistics. plot ggplot2 object can modified additional declarations.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"superb — superb","text":"possible adjustements following popsize: Size population study. Defaults Inf purpose: purpose comparisons. Defaults \"single\". Can \"single\", \"difference\", \"tryon\". decorrelation: Decorrelation method repeated measure designs. Chooses among methods \"CM\", \"LM\", \"CA\", \"UA\", \"LDr\" (r integer) \"none\". Defaults \"none\". \"CA\" correlation-adjusted c19superb; \"CM\" Cousineau-Morey b12superb; \"LM\" Loftus Masson lm94superb; \"UA\" based unitary Alpha method (derived Cronbach alpha; see lc22superb). \"LDr\" local decorrelation (useful long time series autoregressive correlation structures; see cppf24superb). samplingDesign: Sampling method obtain sample. implemented sampling \"SRS\" (Simple Randomize Sampling) \"CRS\" (Cluster-Randomized Sampling). formulas can long format data using | notation, e.g., superb( extra ~ group | ID, sleep ) wide format, using cbind() crange() notation, e.g., superb( cbind(DV.1.1, DV.2.1,DV.1.2, DV.2.2,DV.1.3, DV.2.3) ~ . , dta, WSFactors = c(\"(2)\",\"b(3)\")) superb( crange(DV.1.1, DV.2.3) ~ . , dta, WSFactors = c(\"(2)\",\"b(3)\")) layouts plots following: basic plots: \"bar\" Shows summary statistics bars error bars; \"line\" Shows summary statistics lines connecting conditions first factor; \"point\" Shows summary statistics isolated points \"lineband\" illustrates confidence intervals band; plots add distributional information addition \"pointjitter\" Shows summary statistics along jittered points depicting raw data; \"pointjitterviolin\" Also adds violin plots previous layout \"pointindividualline\" Connects raw data line along first factor (repeated-measure factor) \"raincloud\" Illustrates distribution cloud (half_violin_plot) jittered dots next . Looks better coordinates flipped +coord_flip() \"corset\" illustrates within-subject designs individual lines clouds. Circular plots (aka radar plots) results following layouts: \"circularpoint\" Shows summary statistics isolated points \"circularline\" Shows summary statistics lines; \"circularlineband\" Also adds error bands instead error bars; \"circularpointjitter\" Shows summary statistics error bars also jittered dots; \"circularpointlinejitter\" previous layout, connect points lines. New layouts added times time. Personalized layouts can also created (see Vignette5).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superb — superb","text":"","code":"######################################################################  # Basic example using a built-in dataframe as data.  # By default, the mean is computed and the error bar are 95% confidence intervals superb(len ~ dose + supp, ToothGrowth)    # Example changing the summary statistics to the median and # the error bar to 80% confidence intervals superb(len ~ dose + supp, ToothGrowth,        statistic = \"median\", errorbar = \"CI\", gamma = .80)    # Example introducing adjustments for pairwise comparisons  # and assuming that the whole population is limited to 200 persons superb(len ~ dose + supp, ToothGrowth,     adjustments = list( purpose = \"difference\", popSize = 200) )   # This example adds ggplot directives to the plot produced library(ggplot2) superb(len ~ dose + supp, ToothGrowth) +  xlab(\"Dose\") + ylab(\"Tooth Growth\") + theme_bw()   ######################################################################  # The following examples are based on repeated measures library(gridExtra) options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  # A simple example: The sleep data # The sleep data are paired data showing the additional time of sleep with  # the soporific drug #1 ((\"group = 1\") and with the soporific drug #2 (\"group = 2\").  # There is 10 participants with two measurements. # sleep is available in long format   # Makes the plots first without decorrelation: superb( extra ~ group | ID, sleep )  # As seen the error bar are very long. Lets take into consideration correlation... # ...  with decorrelation (technique Correlation-adjusted CA): superb(extra ~ group | ID, sleep,    # only difference:   adjustments = list(purpose = \"difference\", decorrelation = \"CA\") )  # The error bars shortened as the correlation is substantial (r = .795).   ######################################################################  # Another example: The Orange data # This example contains 5 trees whose diameter (in mm) has been measured at various age (in days): data(Orange)  # Makes the plots first without decorrelation: p1 <- superb( circumference ~ age | Tree, Orange,   adjustments = list(purpose = \"difference\", decorrelation = \"none\") ) +    xlab(\"Age level\") + ylab(\"Trunk diameter (mm)\") +   coord_cartesian( ylim = c(0,250) ) + labs(title=\"''Standalone'' confidence intervals\") # ... and then with decorrelation (technique Correlation-adjusted CA): p2 <- superb( circumference ~ age | Tree, Orange,   adjustments = list(purpose = \"difference\", decorrelation = \"CA\") ) +    xlab(\"Age level\") + ylab(\"Trunk diameter (mm)\") +   coord_cartesian( ylim = c(0,250) ) + labs(title=\"Decorrelated confidence intervals\")  # You can present both plots side-by-side grid.arrange(p1, p2, ncol=2)   ######################################################################"},{"path":"http://dcousin3.github.io/superb/reference/superbData.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain summary statistics with correct error bars. — superbData","title":"Obtain summary statistics with correct error bars. — superbData","text":"function suberbData() computes standard error confidence interval various descriptive statistics various designs, sampling schemes, population size purposes, according suberb framework. See cgh21superb .","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain summary statistics with correct error bars. — superbData","text":"","code":"superbData(   data,   BSFactors = NULL,   WSFactors = NULL,   WSDesign = \"fullfactorial\",   factorOrder = NULL,   variables,   statistic = \"mean\",   errorbar = \"CI\",   gamma = 0.95,   adjustments = list(purpose = \"single\", popSize = Inf, decorrelation = \"none\",     samplingDesign = \"SRS\"),   preprocessfct = NULL,   postprocessfct = NULL,   clusterColumn = \"\" )"},{"path":"http://dcousin3.github.io/superb/reference/superbData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain summary statistics with correct error bars. — superbData","text":"data Dataframe wide format BSFactors name columns containing -subject factor(s) WSFactors name within-subject factor(s) WSDesign within-subject design full factorial design (default \"fullfactorial\") factorOrder Order factors shown graph (x axis, groups, horizontal panels, vertical panels) variables dependent variable(s) statistic summary statistic function use errorbar function computes error bar. \"CI\" \"SE\" function name. Defaults \"CI\" gamma coverage factor; necessary errorbar == \"CI\". Default 0.95. adjustments List adjustments described . Default adjustments = list(purpose = \"single\", popSize = Inf, decorrelation = \"none\", samplingDesign = \"SRS\") preprocessfct transform (vector ) performed first data matrix group postprocessfct transform (vector ) clusterColumn used conjunction samplingDesign = \"CRS\", indicates column contains cluster membership","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain summary statistics with correct error bars. — superbData","text":"list (1) summary statistics summaryStatistics (2) raw data long format rawData (using numeric levels repeated-measure variables).","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain summary statistics with correct error bars. — superbData","text":"possible adjustements following popsize: Size population study. Defaults Inf purpose: purpose comparisons. Defaults \"single\". Can \"single\", \"difference\", \"tryon\". decorrelation: Decorrelation method repeated measure designs. Chooses among methods \"CM\", \"LM\", \"CA\" \"none\". Defaults \"none\". samplingDesign: Sampling method obtain sample. implemented sampling \"SRS\" (Simple Randomize Sampling) \"CRS\" (Cluster-Randomized Sampling).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain summary statistics with correct error bars. — superbData","text":"","code":"# Basic example using a built-in dataframe as data;  # by default, the mean is computed and the error bar are 95% confidence intervals # (it also produces a $rawData dataframe, not shown here) res <- superbData(ToothGrowth, BSFactors = c(\"dose\", \"supp\"),    variables = \"len\")  res$summaryStatistics #>   dose supp center lowerwidth upperwidth #> 1  0.5   OJ  13.23  -3.190283   3.190283 #> 2  0.5   VC   7.98  -1.964824   1.964824 #> 3    1   OJ  22.70  -2.797727   2.797727 #> 4    1   VC  16.77  -1.799343   1.799343 #> 5    2   OJ  26.06  -1.899314   1.899314 #> 6    2   VC  26.14  -3.432090   3.432090  # Example introducing adjustments for pairwise comparisons  # and assuming that the whole population is limited to 200 persons res <- superbData(ToothGrowth, BSFactors = c(\"dose\", \"supp\"),    variables = \"len\",     statistic = \"median\", errorbar = \"CI\", gamma = .80,   adjustments = list( purpose = \"difference\", popSize = 200) ) res$summaryStatistics #>   dose supp center lowerwidth upperwidth #> 1  0.5   OJ  12.25  -3.369569   3.369569 #> 2  0.5   VC   7.15  -2.075242   2.075242 #> 3    1   OJ  23.45  -2.954953   2.954953 #> 4    1   VC  16.50  -1.900462   1.900462 #> 5    2   OJ  25.95  -2.006051   2.006051 #> 6    2   VC  25.95  -3.624965   3.624965  # Note that you can achieve the same with formulas superb( len ~ dose + supp, ToothGrowth, showPlot=FALSE) #> $summaryStatistics #>   dose supp center lowerwidth upperwidth #> 1  0.5   OJ  13.23  -3.190283   3.190283 #> 2  0.5   VC   7.98  -1.964824   1.964824 #> 3    1   OJ  22.70  -2.797727   2.797727 #> 4    1   VC  16.77  -1.799343   1.799343 #> 5    2   OJ  26.06  -1.899314   1.899314 #> 6    2   VC  26.14  -3.432090   3.432090 #>  #> $rawData #>    dose supp id   DV #> 1   0.5   VC  1  4.2 #> 2   0.5   VC  2 11.5 #> 3   0.5   VC  3  7.3 #> 4   0.5   VC  4  5.8 #> 5   0.5   VC  5  6.4 #> 6   0.5   VC  6 10.0 #> 7   0.5   VC  7 11.2 #> 8   0.5   VC  8 11.2 #> 9   0.5   VC  9  5.2 #> 10  0.5   VC 10  7.0 #> 11    1   VC 11 16.5 #> 12    1   VC 12 16.5 #> 13    1   VC 13 15.2 #> 14    1   VC 14 17.3 #> 15    1   VC 15 22.5 #> 16    1   VC 16 17.3 #> 17    1   VC 17 13.6 #> 18    1   VC 18 14.5 #> 19    1   VC 19 18.8 #> 20    1   VC 20 15.5 #> 21    2   VC 21 23.6 #> 22    2   VC 22 18.5 #> 23    2   VC 23 33.9 #> 24    2   VC 24 25.5 #> 25    2   VC 25 26.4 #> 26    2   VC 26 32.5 #> 27    2   VC 27 26.7 #> 28    2   VC 28 21.5 #> 29    2   VC 29 23.3 #> 30    2   VC 30 29.5 #> 31  0.5   OJ 31 15.2 #> 32  0.5   OJ 32 21.5 #> 33  0.5   OJ 33 17.6 #> 34  0.5   OJ 34  9.7 #> 35  0.5   OJ 35 14.5 #> 36  0.5   OJ 36 10.0 #> 37  0.5   OJ 37  8.2 #> 38  0.5   OJ 38  9.4 #> 39  0.5   OJ 39 16.5 #> 40  0.5   OJ 40  9.7 #> 41    1   OJ 41 19.7 #> 42    1   OJ 42 23.3 #> 43    1   OJ 43 23.6 #> 44    1   OJ 44 26.4 #> 45    1   OJ 45 20.0 #> 46    1   OJ 46 25.2 #> 47    1   OJ 47 25.8 #> 48    1   OJ 48 21.2 #> 49    1   OJ 49 14.5 #> 50    1   OJ 50 27.3 #> 51    2   OJ 51 25.5 #> 52    2   OJ 52 26.4 #> 53    2   OJ 53 22.4 #> 54    2   OJ 54 24.5 #> 55    2   OJ 55 24.8 #> 56    2   OJ 56 30.9 #> 57    2   OJ 57 26.4 #> 58    2   OJ 58 27.3 #> 59    2   OJ 59 29.4 #> 60    2   OJ 60 23.0 #>"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.bar.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'bar' layout — superbPlot.bar","title":"superbPlot 'bar' layout — superbPlot.bar","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'bar' layout — superbPlot.bar","text":"","code":"superbPlot.bar(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   barParams = list(),   errorbarParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'bar' layout — superbPlot.bar","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors barParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'bar' layout — superbPlot.bar","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'bar' layout — superbPlot.bar","text":"","code":"# This will make a plot with bars superb(    len ~ dose + supp,     ToothGrowth,     plotLayout=\"bar\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp, #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.bar(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'boxplot' layout — superbPlot.boxplot","title":"superbPlot 'boxplot' layout — superbPlot.boxplot","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible create custom-make templates (see vignette 5). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'boxplot' layout — superbPlot.boxplot","text":"","code":"superbPlot.boxplot(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   errorbarParams = list(),   facetParams = list(),   boxplotParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'boxplot' layout — superbPlot.boxplot","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors; pointParams (optional) list graphic directives sent geom_bar layer; errorbarParams (optional) list graphic directives sent geom_superberrorbar layer; facetParams (optional) list graphic directives sent facet_grid layer; boxplotParams (optional) list f graphic directives sent geo_boxplot layer; xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete).","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'boxplot' layout — superbPlot.boxplot","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'boxplot' layout — superbPlot.boxplot","text":"","code":"# This will make a plot with boxes for interquartile (box), median (line) and outliers (whiskers) superb(    len ~ dose + supp,    ToothGrowth,     plotLayout = \"boxplot\"  )   # This layout of course is more meaningful if the statistic displayed is the median superb(    len ~ dose + supp,    ToothGrowth,     statistic = \"median\",    plotLayout = \"boxplot\"  )   # if you extracted the data with superbData, you can  # run this layout directly processedData <- superb(    len ~ dose + supp,    ToothGrowth,     statistic = \"median\",    showPlot  = FALSE )  superbPlot.boxplot(processedData$summaryStatistic,    \"dose\", \"supp\", \".~.\",    processedData$rawData)   # This will make a plot with customized boxplot parameters and black dots superb(    len ~ dose + supp,    ToothGrowth,     statistic = \"median\",    plotLayout = \"boxplot\",    boxplotParams = list( outlier.shape=8, outlier.size=4 ),    pointParams = list(color=\"black\")  )   # You can customize the plot in various ways, e.g. plt3 <- superb(    len ~ dose + supp,    ToothGrowth,     statistic = \"median\",    plotLayout = \"boxplot\",    pointParams = list(color=\"black\") )  # ... by changing the colors of the fillings library(ggplot2) # for scale_fill_manual, geom_jitter and geom_dotplot plt3 + scale_fill_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\"))   # ... by overlaying jittered dots of the raw data plt3 + geom_jitter(data = processedData$rawData, mapping=aes(x=dose, y=DV),     position= position_jitterdodge(jitter.width=0.5 , dodge.width=0.8 ) )    # ... by overlaying dots of the raw data, aligned along the center of the box plt3 + geom_dotplot(data = processedData$rawData, mapping=aes(x=dose, y=DV), dotsize=0.5,    binaxis='y', stackdir='center', position=position_dodge(0.7))   #> Bin width defaults to 1/30 of the range of the data. Pick better value with #> `binwidth`."},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularline.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'circularline' layout — superbPlot.circularline","title":"superbPlot 'circularline' layout — superbPlot.circularline","text":"superb comes circular layouts making plots. produces ggplot objects can customized.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'circularline' layout — superbPlot.circularline","text":"","code":"superbPlot.circularline(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   lineParams = list(),   errorbarParams = list(),   facetParams = list(),   radarParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'circularline' layout — superbPlot.circularline","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar() layer lineParams (optional) list graphic directives sent geom_line() layer errorbarParams (optional) list graphic directives sent geom_superberrorbar() layer facetParams (optional) list graphic directives sent facet_grid() layer radarParams (optional)  list arguments radar coordinates (seel coord_radial() ). xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'circularline' layout — superbPlot.circularline","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"superbPlot 'circularline' layout — superbPlot.circularline","text":"things note: can time undo polar coordinates using  + coord_cartesian(). sometimes easier developping plots. Also, ever want modify scale post-hoc (e.g., change labels group), can, scale_x_continuous must absolutely contains two arguments: scale_x_continuous( oob = scales::oob_keep, limits = c(0, 0.00001+ NUMBER CONDITIONS ), # argument labels = c(\"\",...) ) parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'circularline' layout — superbPlot.circularline","text":"","code":"# This will make a plot with lines superb(    len ~ dose + supp,     ToothGrowth,     plotLayout=\"circularline\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp, #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.circularline(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularlineBand.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'circularlineBand' layout — superbPlot.circularlineBand","title":"superbPlot 'circularlineBand' layout — superbPlot.circularlineBand","text":"superb comes circular layouts making plots. produces ggplot objects can customized. parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularlineBand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'circularlineBand' layout — superbPlot.circularlineBand","text":"","code":"superbPlot.circularlineBand(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   lineParams = list(),   errorbandParams = list(),   facetParams = list(),   radarParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularlineBand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'circularlineBand' layout — superbPlot.circularlineBand","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar() layer lineParams (optional) list graphic directives sent geom_line() layer errorbandParams (optional) list graphic directives sent geom_ribbon() layer facetParams (optional) list graphic directives sent facet_grid() layer radarParams (optional)  list arguments radar coordinates (seel coord_radial() ). xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularlineBand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'circularlineBand' layout — superbPlot.circularlineBand","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularlineBand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'circularlineBand' layout — superbPlot.circularlineBand","text":"","code":"# This will make a plot with points superbPlot(ToothGrowth,     BSFactors = c(\"dose\",\"supp\"), variables = \"len\",    plotLayout = \"circularlineBand\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superbData(ToothGrowth,  # BSFactors = c(\"dose\",\"supp\"), variables = \"len\" #) # #superbPlot.circularlineBand(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'circularpoint' layout — superbPlot.circularpoint","title":"superbPlot 'circularpoint' layout — superbPlot.circularpoint","text":"superb comes circular layouts making plots. produces ggplot objects can customized. parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'circularpoint' layout — superbPlot.circularpoint","text":"","code":"superbPlot.circularpoint(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   errorbarParams = list(),   facetParams = list(),   radarParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'circularpoint' layout — superbPlot.circularpoint","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer radarParams (optional)  list arguments radar coordinates (seel coord_radial() ). xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'circularpoint' layout — superbPlot.circularpoint","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'circularpoint' layout — superbPlot.circularpoint","text":"","code":"# This will make a plot with bars superb(    len ~ dose + supp,     ToothGrowth,     plotLayout=\"circularpoint\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp, #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.circularpoint(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointjitter.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'circularpointjitter' layout — superbPlot.circularpointjitter","title":"superbPlot 'circularpointjitter' layout — superbPlot.circularpointjitter","text":"superb comes circular layouts making plots. produces ggplot objects can customized. parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointjitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'circularpointjitter' layout — superbPlot.circularpointjitter","text":"","code":"superbPlot.circularpointjitter(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   jitterParams = list(),   errorbarParams = list(),   facetParams = list(),   radarParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointjitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'circularpointjitter' layout — superbPlot.circularpointjitter","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer jitterParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer radarParams (optional)  list arguments radar coordinates (seel coord_radial() ). xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointjitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'circularpointjitter' layout — superbPlot.circularpointjitter","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointjitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'circularpointjitter' layout — superbPlot.circularpointjitter","text":"","code":"# This will make a plot with points superbPlot(ToothGrowth,     BSFactors = c(\"dose\",\"supp\"), variables = \"len\",    plotLayout = \"circularpointjitter\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superbData(ToothGrowth,  # BSFactors = c(\"dose\",\"supp\"), variables = \"len\" #) # #superbPlot.circularpointjitter(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointlinejitter.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'circularpointlinejitter' layout — superbPlot.circularpointlinejitter","title":"superbPlot 'circularpointlinejitter' layout — superbPlot.circularpointlinejitter","text":"superb comes circular layouts making plots. produces ggplot objects can customized. parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointlinejitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'circularpointlinejitter' layout — superbPlot.circularpointlinejitter","text":"","code":"superbPlot.circularpointlinejitter(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   lineParams = list(),   jitterParams = list(),   errorbarParams = list(),   facetParams = list(),   radarParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointlinejitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'circularpointlinejitter' layout — superbPlot.circularpointlinejitter","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer lineParams (optional) list graphic directives sent geom_bar layer jitterParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer radarParams (optional)  list arguments radar coordinates (seel coord_radial() ). xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointlinejitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'circularpointlinejitter' layout — superbPlot.circularpointlinejitter","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.circularpointlinejitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'circularpointlinejitter' layout — superbPlot.circularpointlinejitter","text":"","code":"# This will make a plot with points superbPlot(ToothGrowth,     BSFactors = c(\"dose\",\"supp\"), variables = \"len\",    plotLayout = \"circularpointlinejitter\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superbData(ToothGrowth,  # BSFactors = c(\"dose\",\"supp\"), variables = \"len\" #) # #superbPlot.circularpointlinejitter(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.corset.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'corset' layout — superbPlot.corset","title":"superbPlot 'corset' layout — superbPlot.corset","text":"superbPlot comes built-templates making final plots. corset plot specifically devised 2-repeated-measure design: merges \"pointindividualline\" layout raincloud layout kb21superb. layout produces ggplot objects can customized. Additionally, possible create custom-make templates (see vignette 5). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.corset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'corset' layout — superbPlot.corset","text":"","code":"superbPlot.corset(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   lineParams = list(),   pointParams = list(),   errorbarParams = list(),   jitterParams = list(),   violinParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.corset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'corset' layout — superbPlot.corset","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors; lineParams (optional) list graphic directives sent geom_line layer including option colorize \"bySlope\", \"byId\" \"none\"; pointParams (optional) list graphic directives sent geom_bar layer; errorbarParams (optional) list graphic directives sent geom_superberrorbar layer; jitterParams (optional) list graphic directives sent geom_jitter layer; violinParams (optional) list graphic directives sent geom_boxplot layer; facetParams (optional) list graphic directives sent facet_grid layer; xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete).","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.corset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'corset' layout — superbPlot.corset","text":"ggplot object","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.corset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'corset' layout — superbPlot.corset","text":"","code":"# We first generate randomly a 2-measurement dataset with 50 participants and a large effect dta <- GRD(SubjectsPerGroup = 50, WSFactors = \"moment(2)\", Effects = list(\"moment\"=slope(3)))  # This will make a basic corset plot  superb(    cbind(DV.1, DV.2) ~ .,    dta,     WSFactors = \"moment(2)\",     plotLayout = \"corset\"  )   # This will color the increasing and decreasing individuals superb(    cbind(DV.1, DV.2) ~ .,     dta,     WSFactors = \"moment(2)\",     plotLayout = \"corset\",    lineParams = list(colorize=\"bySlope\")  )   # This layout has similarities with the \"pointindividualline\" layout superb(    cbind(DV.1, DV.2) ~ .,     dta,     WSFactors = \"moment(2)\",     plotLayout = \"pointindividualline\"  )   # if you extract the data with superbData, you can  # run this layout directly processedData <- superb(    cbind(DV.1, DV.2) ~ .,     dta,     WSFactors = \"moment(2)\",     showPlot  = FALSE )  superbPlot.corset(processedData$summaryStatistic,     \"moment\", NULL, \".~.\",     processedData$rawData,     lineParams = list(colorize=\"bySlope\") )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.halfwidthline.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'halfwidthline' layout — superbPlot.halfwidthline","title":"superbPlot 'halfwidthline' layout — superbPlot.halfwidthline","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. half-width confidence interval line plot EXPERIMENTAL. divides CI length two, one thick section one thin section. functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.halfwidthline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'halfwidthline' layout — superbPlot.halfwidthline","text":"","code":"superbPlot.halfwidthline(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   lineParams = list(),   errorbarParams = list(),   errorbarlightParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.halfwidthline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'halfwidthline' layout — superbPlot.halfwidthline","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer lineParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer errorbarlightParams (optional) graphic directives second half error bar; facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.halfwidthline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'halfwidthline' layout — superbPlot.halfwidthline","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.halfwidthline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'halfwidthline' layout — superbPlot.halfwidthline","text":"","code":"# This will make a plot with lines superb(    len ~ dose + supp,     ToothGrowth,     plotLayout=\"halfwidthline\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp,  #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.halfwidthline(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"summary plot of any statistics with adjusted error bars. — superbPlot","title":"summary plot of any statistics with adjusted error bars. — superbPlot","text":"function superbPlot() plots standard error confidence interval various descriptive statistics various designs, sampling schemes, population size purposes, according suberb framework. See cgh21superb . Note function superseded superb().","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary plot of any statistics with adjusted error bars. — superbPlot","text":"","code":"superbPlot(   data,   BSFactors = NULL,   WSFactors = NULL,   WSDesign = \"fullfactorial\",   factorOrder = NULL,   variables,   statistic = \"mean\",   errorbar = \"CI\",   gamma = 0.95,   adjustments = list(purpose = \"single\", popSize = Inf, decorrelation = \"none\",     samplingDesign = \"SRS\"),   showPlot = TRUE,   plotStyle = NULL,   plotLayout = \"line\",   preprocessfct = NULL,   postprocessfct = NULL,   clusterColumn = \"\",   ... )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary plot of any statistics with adjusted error bars. — superbPlot","text":"data Dataframe wide format BSFactors name columns containing -subject factor(s) WSFactors name within-subject factor(s) WSDesign within-subject design full factorial design (default \"fullfactorial\") factorOrder Order factors shown graph (order: x axis, groups, horizontal panels, vertical panels) variables dependent variable(s) strings statistic summary statistic function use string. errorbar function computes error bar. \"CI\" \"SE\" function name defined custom function. Default \"CI\" gamma coverage factor; necessary errorbar == \"CI\". Default 0.95. adjustments List adjustments described . Default adjustments = list(purpose = \"single\", popSize = Inf, decorrelation = \"none\", samplingDesign = \"SRS\") showPlot Defaults TRUE. Set FALSE want output summary statistics intervals. plotStyle  plotLayout layers plot graph. See full list . Defaults \"line\". preprocessfct transform (vector ) performed first data matrix group postprocessfct transform (vector ) clusterColumn used conjunction samplingDesign = \"CRS\", indicates column contains cluster membership ... addition parameters , superbPlot also accept number optional arguments transmitted plotting function, pointParams (list g`lot2 parameters input inside geoms; see ?geom_bar2) errorbarParams (list ggplot2 parameters geom_errorbar; see ?geom_errorbar)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary plot of any statistics with adjusted error bars. — superbPlot","text":"plot correct error bars table summary statistics. plot ggplot2 object can modified additional declarations.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"summary plot of any statistics with adjusted error bars. — superbPlot","text":"possible adjustements following popsize: Size population study. Defaults Inf purpose: purpose comparisons. Defaults \"single\". Can \"single\", \"difference\", \"tryon\". decorrelation: Decorrelation method repeated measure designs. Chooses among methods \"CM\", \"LM\", \"CA\", \"UA\", \"LDr\" (r integer) \"none\". Defaults \"none\". \"CA\" correlation-adjusted c19superb; \"UA\" based unitary Alpha method (derived Cronbach alpha; see lc22superb). \"LDr\" local decorrelation (useful long time series autoregressive correlation structures; see cppf24superb); . samplingDesign: Sampling method obtain sample. implemented sampling \"SRS\" (Simple Randomize Sampling) \"CRS\" (Cluster-Randomized Sampling). version 0.97.15, layouts plots following: \"bar\" Shows summary statistics bars error bars; \"line\" Shows summary statistics lines connecting conditions first factor; \"point\" Shows summary statistics isolated points \"pointjitter\" Shows summary statistics along jittered points depicting raw data; \"pointjitterviolin\" Also adds violin plots previous layout \"pointindividualline\" Connects raw data line along first factor (repeated-measure factor) \"raincloud\" Illustrates distribution cloud (half_violin_plot) jittered dots next . Looks better coordinates flipped +coord_flip(). \"corset\" Illustrates two repeated-measures individual lines clouds \"boxplot\" Illustrates limits, quartiles median using box refer superb() documentation kept date. EXPERIMENTAL: statistic function related errorbar function different namespace, may use notation \"namespace::funcname\" statistic argument. namespace used errorbar function.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary plot of any statistics with adjusted error bars. — superbPlot","text":"","code":"######################################################################  # Basic example using a built-in dataframe as data.  # By default, the mean is computed and the error bar are 95% confidence intervals superbPlot(ToothGrowth, BSFactors = c(\"dose\", \"supp\"),    variables = \"len\")    # Note that function superb() does the same with formula: superb( len ~ dose + supp, ToothGrowth )   # Example changing the summary statistics to the median and # the error bar to 80% confidence intervals superbPlot(ToothGrowth, BSFactors = c(\"dose\", \"supp\"),    variables = \"len\", statistic = \"median\", errorbar = \"CI\", gamma = .80)    # Example introducing adjustments for pairwise comparisons  # and assuming that the whole population is limited to 200 persons superbPlot(ToothGrowth, BSFactors = c(\"dose\", \"supp\"),    variables = \"len\",     adjustments = list( purpose = \"difference\", popSize = 200) )   # This example adds ggplot directives to the plot produced library(ggplot2) superbPlot(ToothGrowth, BSFactors = c(\"dose\", \"supp\"),    variables = \"len\") +  xlab(\"Dose\") + ylab(\"Tooth Growth\") + theme_bw()   ######################################################################  # The following examples are based on repeated measures library(gridExtra) options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  # A simple example: The sleep data # The sleep data are paired data showing the additional time of sleep with  # the soporific drugn #1 ((\"group = 1\") and with the soporific drug #2 (\"group = 2\").  # There is 10 participants with two measurements.  # sleep is available in long format so we transform it to the in wide format: sleep2 <- reshape(sleep, direction = \"wide\", idvar = \"ID\", timevar = \"group\") sleep2 #>    ID extra.1 extra.2 #> 1   1     0.7     1.9 #> 2   2    -1.6     0.8 #> 3   3    -0.2     1.1 #> 4   4    -1.2     0.1 #> 5   5    -0.1    -0.1 #> 6   6     3.4     4.4 #> 7   7     3.7     5.5 #> 8   8     0.8     1.6 #> 9   9     0.0     4.6 #> 10 10     2.0     3.4  # Makes the plots first without decorrelation: superbPlot(sleep2,    WSFactors = \"Times(2)\",    variables = c(\"extra.1\", \"extra.2\") )  # As seen the error bar are very long. Lets take into consideration correlation... # ...  with decorrelation (technique Correlation-adjusted CA): superbPlot(sleep2,    WSFactors = \"Times(2)\",    variables = c(\"extra.1\", \"extra.2\"),    # only difference:   adjustments = list(purpose = \"difference\", decorrelation = \"CA\") )  # The error bars shortened as the correlation is substantial (r = .795).   ######################################################################  # Another example: The Orange data data(Orange) # Use the Orange example, but let's define shorter column names... names(Orange) <- c(\"Tree\",\"age\",\"circ\") # ... and turn the data into a wide format using superbToWide: Orange.wide <- superbToWide(Orange, id = \"Tree\", WSFactors = \"age\", variable = \"circ\")   # This example contains 5 trees whose diameter (in mm) has been measured at various age (in days): Orange.wide #>   Tree circ.118 circ.484 circ.664 circ.1004 circ.1231 circ.1372 circ.1582 #> 1    3       30       51       75       108       115       139       140 #> 2    1       30       58       87       115       120       142       145 #> 3    5       30       49       81       125       142       174       177 #> 4    2       33       69      111       156       172       203       203 #> 5    4       32       62      112       167       179       209       214  # Makes the plots first without decorrelation: p1 <- superbPlot( Orange.wide, WSFactors = \"age(7)\",   variables = c(\"circ.118\",\"circ.484\",\"circ.664\",\"circ.1004\",\"circ.1231\",\"circ.1372\",\"circ.1582\"),   adjustments = list(purpose = \"difference\", decorrelation = \"none\") ) +    xlab(\"Age level\") + ylab(\"Trunk diameter (mm)\") +   coord_cartesian( ylim = c(0,250) ) + labs(title=\"''Standalone'' confidence intervals\") # ... and then with decorrelation (technique Correlation-adjusted CA): p2 <- superbPlot( Orange.wide, WSFactors = \"age(7)\",   variables = c(\"circ.118\",\"circ.484\",\"circ.664\",\"circ.1004\",\"circ.1231\",\"circ.1372\",\"circ.1582\"),   adjustments = list(purpose = \"difference\", decorrelation = \"CA\") ) +    xlab(\"Age level\") + ylab(\"Trunk diameter (mm)\") +   coord_cartesian( ylim = c(0,250) ) + labs(title=\"Decorrelated confidence intervals\")  # You can present both plots side-by-side grid.arrange(p1, p2, ncol=2)   ######################################################################"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.line.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'line' layout — superbPlot.line","title":"superbPlot 'line' layout — superbPlot.line","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'line' layout — superbPlot.line","text":"","code":"superbPlot.line(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   lineParams = list(),   errorbarParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'line' layout — superbPlot.line","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer lineParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'line' layout — superbPlot.line","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'line' layout — superbPlot.line","text":"","code":"# This will make a plot with lines superb(    len ~ dose + supp,     ToothGrowth,     plotLayout=\"line\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp, #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.line(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.lineBand.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'lineBand' layout — superbPlot.lineBand","title":"superbPlot 'lineBand' layout — superbPlot.lineBand","text":"lineBand layout displays error band instead individual error bars. layout convenient many points horizontal axis (error bars difficult distinguish) results fairly smooth. functions parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.lineBand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'lineBand' layout — superbPlot.lineBand","text":"","code":"superbPlot.lineBand(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata,   pointParams = list(),   lineParams = list(),   errorbandParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.lineBand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'lineBand' layout — superbPlot.lineBand","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_point layer lineParams (optional) list graphic directives sent geom_jitter layer errorbandParams (optional) list graphic directives sent geom_ribbon layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.lineBand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'lineBand' layout — superbPlot.lineBand","text":"ggplot object","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.lineBand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'lineBand' layout — superbPlot.lineBand","text":"","code":"# this creates a fictious time series at 100 time points obtained in two conditions: dta <- GRD( WSFactors = \"timepoints (50) : condition(2)\",      SubjectsPerGroup = 20,     RenameDV = \"activation\",     Effects = list(\"timepoints\" = extent(5), \"condition\" = extent(3) ),     Population=list(mean=50,stddev=10,rho=0.75) )  # This will make a plot with error band superb(    crange(activation.1.1, activation.50.2) ~ .,     dta,     WSFactors   = c(\"timepoints(50)\", \"condition(2)\"),    adjustments = list(         purpose       = \"single\",         decorrelation = \"CM\"        ## or none for no decorrelation    ),    plotLayout  = \"lineBand\",        # note the uppercase B     pointParams = list(size= 1)      # making points smaller has better look )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   crange(activation.1.1, activation.50.2) ~ .,  #   dta,  #   WSFactors   = c(\"timepoints(50)\", \"condition(2)\"), variables = colnames(dta)[2:101], #   adjustments = list( #        purpose       = \"single\", #        decorrelation = \"CM\"        ## or none for no decorrelation #   ) #) # #superbPlot.lineBand(processedData$summaryStatistic, #   \"timepoints\", #   \"condition\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.point.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'point' layout — superbPlot.point","title":"superbPlot 'point' layout — superbPlot.point","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'point' layout — superbPlot.point","text":"","code":"superbPlot.point(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   pointParams = list(),   errorbarParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'point' layout — superbPlot.point","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'point' layout — superbPlot.point","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'point' layout — superbPlot.point","text":"","code":"# This will make a plot with points superbPlot(ToothGrowth,     BSFactors = c(\"dose\",\"supp\"), variables = \"len\",    plotLayout = \"point\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superbData(ToothGrowth,  # BSFactors = c(\"dose\",\"supp\"), variables = \"len\" #) # #superbPlot.point(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointindividualline.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot point and individual-line layout for within-subject design — superbPlot.pointindividualline","title":"superbPlot point and individual-line layout for within-subject design — superbPlot.pointindividualline","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointindividualline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot point and individual-line layout for within-subject design — superbPlot.pointindividualline","text":"","code":"superbPlot.pointindividualline(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata,   datapointParams = list(),   pointParams = list(),   lineParams = list(),   errorbarParams = list(),   facetParams = list() )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointindividualline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot point and individual-line layout for within-subject design — superbPlot.pointindividualline","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors datapointParams (optional) list graphic directives sent geom_point layer individual lines pointParams (optional) list graphic directives sent geom_point layer lineParams (optional) list graphic directives sent geom_line layer; parameter colorize can used obtain distinct colors decreasing segments line (colorize = \"bySlope\"), obtain distinct colors participants (colorize = \"byId\"), gray (default colorize = \"none\"). errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointindividualline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot point and individual-line layout for within-subject design — superbPlot.pointindividualline","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointindividualline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot point and individual-line layout for within-subject design — superbPlot.pointindividualline","text":"","code":"# This will make a plot with points and individual lines for each subject's scores  # we take the Orange built-in data.frame but shorten the names... names(Orange) <- c(\"Tree\",\"age\",\"circ\") # Makes the plot:  superb( circ ~ age | Tree,     Orange,     adjustments = list(purpose = \"difference\", decorrelation = \"none\"),    plotLayout= \"pointindividualline\"  )   # if you extract the data, you can  # run this layout directly #processedData <- superb( circ ~ age | Tree,  #  Orange, #  adjustments = list(purpose = \"difference\", decorrelation = \"none\"), #) # #superbPlot.pointindividualline(processedData$summaryStatistic, #   \"age\", #   NULL, #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitter.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot point-and-jitter dots layout — superbPlot.pointjitter","title":"superbPlot point-and-jitter dots layout — superbPlot.pointjitter","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot point-and-jitter dots layout — superbPlot.pointjitter","text":"","code":"superbPlot.pointjitter(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata,   pointParams = list(),   jitterParams = list(),   errorbarParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot point-and-jitter dots layout — superbPlot.pointjitter","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer jitterParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot point-and-jitter dots layout — superbPlot.pointjitter","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot point-and-jitter dots layout — superbPlot.pointjitter","text":"","code":"# This will make a plot with jittered points, aka dot plots superb(    len ~ dose + supp,    ToothGrowth,     plotLayout=\"pointjitter\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp, #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.pointjitter(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitterviolin.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot point, jitter and violin plot layout — superbPlot.pointjitterviolin","title":"superbPlot point, jitter and violin plot layout — superbPlot.pointjitterviolin","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitterviolin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot point, jitter and violin plot layout — superbPlot.pointjitterviolin","text":"","code":"superbPlot.pointjitterviolin(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata,   pointParams = list(),   jitterParams = list(),   violinParams = list(),   errorbarParams = list(),   facetParams = list() )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitterviolin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot point, jitter and violin plot layout — superbPlot.pointjitterviolin","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer jitterParams (optional) list graphic directives sent geom_bar layer violinParams (optional) list graphic directives sent geom_bar layer modified geom_violin additional options \"direction\"/\"antagonize\" \"push\". errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitterviolin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot point, jitter and violin plot layout — superbPlot.pointjitterviolin","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointjitterviolin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot point, jitter and violin plot layout — superbPlot.pointjitterviolin","text":"","code":"# This will make a plot with jittered points and violins for the overall distribution superb(    len ~ dose + supp,    ToothGrowth,     plotLayout = \"pointjitterviolin\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp,  #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.pointjitterviolin(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointlinejitter.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot point-and-jitter lines layout — superbPlot.pointlinejitter","title":"superbPlot point-and-jitter lines layout — superbPlot.pointlinejitter","text":"superbPlot comes built-templates making final plots. produces ggplot objects can customized. Additionally, possible add custom-make templates (see vignette 6). functions, \"superbPlot-compatible\", must parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointlinejitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot point-and-jitter lines layout — superbPlot.pointlinejitter","text":"","code":"superbPlot.pointlinejitter(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata,   pointParams = list(),   lineParams = list(),   jitterParams = list(),   errorbarParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointlinejitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot point-and-jitter lines layout — superbPlot.pointlinejitter","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors pointParams (optional) list graphic directives sent geom_bar layer lineParams (optional) list graphic directives sent geom_bar layer jitterParams (optional) list graphic directives sent geom_bar layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointlinejitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot point-and-jitter lines layout — superbPlot.pointlinejitter","text":"ggplot object","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.pointlinejitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot point-and-jitter lines layout — superbPlot.pointlinejitter","text":"","code":"# This will make a plot with jittered points, aka dot plots superb(    len ~ dose + supp,    ToothGrowth,     plotLayout=\"pointlinejitter\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb( #   len ~ dose + supp, #   ToothGrowth,  #   showPlot = FALSE #) # #superbPlot.pointlinejitter(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.raincloud.html","id":null,"dir":"Reference","previous_headings":"","what":"superbPlot 'raincloud' layout — superbPlot.raincloud","title":"superbPlot 'raincloud' layout — superbPlot.raincloud","text":"raincloud layout display jittered dots well \"cloud\" (half violin) . See @allen2019. functions parameters:","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.raincloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbPlot 'raincloud' layout — superbPlot.raincloud","text":"","code":"superbPlot.raincloud(   summarydata,   xfactor,   groupingfactor,   addfactors,   rawdata = NULL,   violinParams = list(),   jitterParams = list(),   pointParams = list(),   errorbarParams = list(),   facetParams = list(),   xAsFactor = TRUE )"},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.raincloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbPlot 'raincloud' layout — superbPlot.raincloud","text":"summarydata data.frame columns \"center\", \"lowerwidth\" \"upperwidth\" level factors; xfactor string name column factor going horizontal axis given; groupingfactor string name column data grouped plot; addfactors string two additional factors make rows columns panels, form \"fact1 ~ fact2\"; rawdata always contains \"DV\" participants level factors violinParams (optional) list graphic directives sent geom_violin layer; modified geom_violin additional options \"direction\" \"push\". jitterParams (optional) list graphic directives sent geom_jitter layer pointParams (optional) list graphic directives sent geom_point layer errorbarParams (optional) list graphic directives sent geom_superberrorbar layer facetParams (optional) list graphic directives sent facet_grid layer xAsFactor (optional) Boolean indicate factor horizontal continuous discrete (default discrete)","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.raincloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbPlot 'raincloud' layout — superbPlot.raincloud","text":"ggplot object","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbPlot.raincloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbPlot 'raincloud' layout — superbPlot.raincloud","text":"","code":"# This will make a plot with raincloud; they are better seen rotated: +coord_flip() superb(    len ~ dose + supp,    ToothGrowth,     plotLayout=\"raincloud\"  )   # if you extract the data with superbData, you can  # run this layout directly #processedData <- superb(ToothGrowth,  #   len ~ dose + supp, #   showPlot = FALSE #) # #superbPlot.raincloud(processedData$summaryStatistic, #   \"dose\", #   \"supp\", #   \".~.\", #   processedData$rawData)"},{"path":"http://dcousin3.github.io/superb/reference/superbShiny.html","id":null,"dir":"Reference","previous_headings":"","what":"User Interface to get summary plot of any statistics with adjusted error bars. — superbShiny","title":"User Interface to get summary plot of any statistics with adjusted error bars. — superbShiny","text":"function suberbShiny() provides simple user interface plot standard error confidence interval various descriptive statistics various designs, population size purposes, according suberb framework. See cgh21superb . Also see video w21superb demo using shinyapps.io installation accessible dcousin3.shinyapps.io/superbshiny Limitations: possible use custom-made statistics graphical user interface, possible request adjustment cluster- randomized sampling. options available superb().","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbShiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User Interface to get summary plot of any statistics with adjusted error bars. — superbShiny","text":"","code":"superbShiny()"},{"path":"http://dcousin3.github.io/superb/reference/superbShiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User Interface to get summary plot of any statistics with adjusted error bars. — superbShiny","text":"plot can cut--paste.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbShiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"User Interface to get summary plot of any statistics with adjusted error bars. — superbShiny","text":"","code":"# Launch the user interface:  # \\donttest{ if (interactive())    superbShiny()  # }"},{"path":"http://dcousin3.github.io/superb/reference/superbToWide.html","id":null,"dir":"Reference","previous_headings":"","what":"superbToWide: Reshape long data frame to wide, suitable for superbPlot — superbToWide","title":"superbToWide: Reshape long data frame to wide, suitable for superbPlot — superbToWide","text":"function suberbToWide() extension Navarro's WideToLong function ample checks make sure legit, data suitably organized suberb. See cgh21superb . techniques available transform long wide, many asked within superb.","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbToWide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"superbToWide: Reshape long data frame to wide, suitable for superbPlot — superbToWide","text":"","code":"superbToWide(   data,   id = NULL,   BSFactors = NULL,   WSFactors = NULL,   variable = NULL )"},{"path":"http://dcousin3.github.io/superb/reference/superbToWide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"superbToWide: Reshape long data frame to wide, suitable for superbPlot — superbToWide","text":"data Dataframe long format id column unique identifiers per subject BSFactors name(s) -subject factor(s) string(s) WSFactors name(s) within-subject factor(s) string(s) variable dependent variable string","code":""},{"path":"http://dcousin3.github.io/superb/reference/superbToWide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"superbToWide: Reshape long data frame to wide, suitable for superbPlot — superbToWide","text":"wide-format data frame ready superbPlot() superbData(). variables erased.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/superbToWide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"superbToWide: Reshape long data frame to wide, suitable for superbPlot — superbToWide","text":"","code":"library(ggplot2) library(gridExtra)  # Example using the built-in dataframe Orange.  data(Orange) superbToWide(Orange, id = \"Tree\", WSFactors = c(\"age\"), variable = \"circumference\")  #>   Tree circumference.118 circumference.484 circumference.664 circumference.1004 #> 1    3                30                51                75                108 #> 2    1                30                58                87                115 #> 3    5                30                49                81                125 #> 4    2                33                69               111                156 #> 5    4                32                62               112                167 #>   circumference.1231 circumference.1372 circumference.1582 #> 1                115                139                140 #> 2                120                142                145 #> 3                142                174                177 #> 4                172                203                203 #> 5                179                209                214  # Optional: change column names to shorten \"circumference\" to \"DV\" names(Orange) <- c(\"Tree\",\"age\",\"DV\") # turn the data into a wide format Orange.wide <- superbToWide(Orange, id = \"Tree\", WSFactors = c(\"age\"), variable = \"DV\")   # Makes the plots two different way: p1=superbPlot( Orange.wide, WSFactors = \"age(7)\",   variables = c(\"DV.118\",\"DV.484\",\"DV.664\",\"DV.1004\",\"DV.1231\",\"DV.1372\",\"DV.1582\"),   adjustments = list(purpose = \"difference\", decorrelation = \"none\") ) +    xlab(\"Age level\") + ylab(\"Trunk diameter (mm)\") +   coord_cartesian( ylim = c(0,250) ) + labs(title=\"Basic confidence intervals\")  p2=superbPlot( Orange.wide, WSFactors = \"age(7)\",   variables = c(\"DV.118\",\"DV.484\",\"DV.664\",\"DV.1004\",\"DV.1231\",\"DV.1372\",\"DV.1582\"),   adjustments = list(purpose = \"difference\", decorrelation = \"CA\") ) +    xlab(\"Age level\") + ylab(\"Trunk diameter (mm)\") +   coord_cartesian( ylim = c(0,250) ) + labs(title=\"Decorrelated confidence intervals\") grid.arrange(p1,p2,ncol=2)   # Note that with superb(), there is no need to reformat # into a wide format anymore: superb( DV ~ age | Tree, Orange )"},{"path":"http://dcousin3.github.io/superb/reference/TMB1964r.html","id":null,"dir":"Reference","previous_headings":"","what":"Data of Tulving, Mandler, & Baumal, 1964 (reproduction of 2021) — TMB1964r","title":"Data of Tulving, Mandler, & Baumal, 1964 (reproduction of 2021) — TMB1964r","text":"data comes b21;textualsuperb. near exact replication original study tmb64superb. design (7) x 4 :  7 levels stimulus duration (within-subject) 4 -subject conditions. Additional variables included reproduction primary language participant /participated (mainly francophones anglophones; gender (mainly male female).","code":""},{"path":"http://dcousin3.github.io/superb/reference/TMB1964r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data of Tulving, Mandler, & Baumal, 1964 (reproduction of 2021) — TMB1964r","text":"","code":"data(TMB1964r)"},{"path":"http://dcousin3.github.io/superb/reference/TMB1964r.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data of Tulving, Mandler, & Baumal, 1964 (reproduction of 2021) — TMB1964r","text":"object class data.frame.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/TMB1964r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data of Tulving, Mandler, & Baumal, 1964 (reproduction of 2021) — TMB1964r","text":"","code":"library(ggplot2)  data(TMB1964r)  options(superb.feedback = 'none') # shut down 'warnings' and 'design' interpretation messages  # general plot ignoring covariates sex and languages with only defaults # We illustrate correlation- and difference-adjusted 95% confidence intervals of the mean superb(     crange(T1, T7) ~ Condition,     TMB1964r,     WSFactors = \"T(7)\",      # the within-subject factor (spanning 7 columns)     adjustments = list(purpose=\"difference\", decorrelation=\"CM\"),     plotLayout = \"line\" )   # We add directives for the error bars (thick), for the points (larger) and for the lines (thick) plt <- superb(     crange(T1, T7) ~ Condition,     TMB1964r,     WSFactors = \"T(7)\",     adjustments = list(purpose=\"difference\", decorrelation=\"CM\"),     plotLayout = \"line\",      errorbarParams = list(width = 0.5, linewidth=1.25, position = position_dodge(.5) ),     pointParams = list(size=2.5, position = position_dodge(.5)),     lineParams = list(linewidth=1.25) ) plt   # Additional directives to set manually the colors, shapes, thick marks and labels. plt +  scale_colour_manual(      labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),      values = c(\"blue\", \"black\", \"purple\", \"red\")) + scale_shape_manual(      labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),      values = c(\"circle\", \"triangle\", \"square\", \"plus\")) + theme_bw(base_size = 16) + labs(x = \"Exposure duration (ms)\", y = \"Mean of correct responses\",      colour = \"Context length\\n\", shape = \"Context length\\n\" ) +  scale_x_discrete(labels=c(\"1\" = \"16.67\", \"2\" = \"33.33\",     \"3\"=\"50.00\", \"4\" = \"66.67\", \"5\"=\"83.33\", \"6\"=\"100.00\", \"7\"=\"116.67\"))     # Exploring three factors simultaneously: T, Condition and Sex (last two between-group) superb(     crange(T1, T7) ~ Condition + Sex,     TMB1964r,     WSFactors = \"T(7)\",      # the within-subject factor (spanning 7 columns)     adjustments = list(purpose=\"difference\", decorrelation=\"CM\"),     plotLayout = \"line\",      errorbarParams = list(linewidth=0.15, position = position_dodge(.5) ),     pointParams = list(size=2.5, position = position_dodge(.5)),     lineParams = list(linewidth=0.25) ) +  scale_colour_manual(      labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),      values = c(\"blue\", \"black\", \"purple\", \"red\")) + scale_shape_manual(      labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),      values = c(\"circle\", \"triangle\", \"square\", \"plus\")) + theme_bw(base_size = 16) + labs(x = \"Exposure duration (ms)\", y = \"Mean of correct responses\",      colour = \"Context length\\n\", shape = \"Context length\\n\" ) +  scale_x_discrete(labels=c(\"1\" = \"16.67\", \"2\" = \"33.33\",     \"3\"=\"50.00\", \"4\" = \"66.67\", \"5\"=\"83.33\", \"6\"=\"100.00\", \"7\"=\"116.67\"))    #only keep 2 sex and 2 languages; the remaining cases are too sparse. mee3 <- TMB1964r[(TMB1964r$Language != \"I prefer not to answer\")&TMB1964r$Language !=\"Other\",]  ### This last example is commented as CRAN servers are too slow # # advanced plots are available, such as pointjitter  # and pointjitterviolin : a plot that superimposes the distribution as a violin plot #  # superb( #   crange(T1, T7) ~ Condition + Language, #   mee3, #   WSFactors = \"T(7)\", #   adjustments = list(purpose=\"difference\", decorrelation=\"CM\"),  #   plotLayout = \"pointjitterviolin\", #   jitterParams = list(alpha = 0.4), #near transparent jitter points #   violinParams = list(alpha = 0.2) #) +  #scale_fill_manual( name = \"Amount of context\",  #    labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),  #    values = c(\"blue\", \"black\", \"purple\", \"red\")) + #scale_colour_manual( name = \"Amount of context\",  #    labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),  #    values = c(\"blue\", \"black\", \"purple\", \"red\")) + #scale_shape_manual( name = \"Amount of context\", #    labels = c(\"Context 0\", \"Context 2\", \"Context 4\", \"Context 8\"),  #    values = c(\"circle\", \"triangle\", \"square\", \"cross\")) + #theme_bw(base_size = 16) + #labs(x = \"Exposure duration (ms)\", y = \"Mean of correct responses\" )+  #scale_x_discrete(labels=c(\"1\" = \"16.67\", \"2\" = \"33.33\", #    \"3\"=\"50.00\", \"4\" = \"66.67\", \"5\"=\"83.33\", \"6\"=\"100.00\", \"7\"=\"116.67\")) #"},{"path":"http://dcousin3.github.io/superb/reference/twoStepTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"two-step transform for subject centering and bias correction — twoStepTransform","title":"two-step transform for subject centering and bias correction — twoStepTransform","text":"twoStepTransform transformation can applied matrix data. resulting matrix subject-centered bias corrected, technique called CM technique b12,c05,m08superb","code":""},{"path":"http://dcousin3.github.io/superb/reference/twoStepTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"two-step transform for subject centering and bias correction — twoStepTransform","text":"","code":"twoStepTransform(dta, variables)"},{"path":"http://dcousin3.github.io/superb/reference/twoStepTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"two-step transform for subject centering and bias correction — twoStepTransform","text":"dta data.frame containing data wide format; variables vector column names transformation applied. remaining columns left unchanged","code":""},{"path":"http://dcousin3.github.io/superb/reference/twoStepTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"two-step transform for subject centering and bias correction — twoStepTransform","text":"data.frame form dta variables transformed. function useful passed argument preprocessfct superb() performs modification data matrix.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/WelchDegreeOfFreedom.html","id":null,"dir":"Reference","previous_headings":"","what":"Welch's rectified degree of freedom — WelchDegreeOfFreedom","title":"Welch's rectified degree of freedom — WelchDegreeOfFreedom","text":"variance across groups heterogeneous, Student t distribution n - 1 df exact distribution. However, w47superb, using methods moments, able find best-fitting t distribution. distribution degree freedom reduced based sample sizes variances group tests. present function returns rectified degree freedom","code":""},{"path":"http://dcousin3.github.io/superb/reference/WelchDegreeOfFreedom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Welch's rectified degree of freedom — WelchDegreeOfFreedom","text":"","code":"WelchDegreeOfFreedom(dta, cols, groupingcols)"},{"path":"http://dcousin3.github.io/superb/reference/WelchDegreeOfFreedom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Welch's rectified degree of freedom — WelchDegreeOfFreedom","text":"dta data frame containing within-subject measures, one participant per line; cols vector indicating columns containing measures. groupingcols vector indicating columns containing groups.","code":""},{"path":"http://dcousin3.github.io/superb/reference/WelchDegreeOfFreedom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Welch's rectified degree of freedom — WelchDegreeOfFreedom","text":"df degrees freedom rectified according Welch (1947).","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/WelchDegreeOfFreedom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Welch's rectified degree of freedom — WelchDegreeOfFreedom","text":"","code":"# creates a small data frame with 4 subject's scores for 5 measures: dta <- data.frame(cbind(         DV.1 = c(3., 6., 2., 2., 5.),         DV.2 = c(4., 5., 4., 4., 3.),         DV.3 = c(2., 7., 7., 8., 6.),         DV.4 = c(6., 8., 4., 6., 5.),         grp  = c(1., 1., 2., 2., 2.)     )) # performs the test (here rectified df = 1.898876) WelchDegreeOfFreedom(dta, \"DV.1\",\"grp\") #> [1] 1.898876"},{"path":"http://dcousin3.github.io/superb/reference/WinerCompoundSymmetryTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Winer's test of compound symmetry — WinerCompoundSymmetryTest","title":"Winer's test of compound symmetry — WinerCompoundSymmetryTest","text":"Run test compound symmetry. generates data frame random data suitable analyses. assesses significance null hypothesis covariance matrix compound symmetric. test given without demonstration w91superb, p. 517.","code":""},{"path":"http://dcousin3.github.io/superb/reference/WinerCompoundSymmetryTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Winer's test of compound symmetry — WinerCompoundSymmetryTest","text":"","code":"WinerCompoundSymmetryTest(dta, cols)"},{"path":"http://dcousin3.github.io/superb/reference/WinerCompoundSymmetryTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Winer's test of compound symmetry — WinerCompoundSymmetryTest","text":"dta data frame containing within-subject measures, one participant per line; cols vector indicating columns containing measures.","code":""},{"path":"http://dcousin3.github.io/superb/reference/WinerCompoundSymmetryTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Winer's test of compound symmetry — WinerCompoundSymmetryTest","text":"p p-value null hypothesis data compound symmetric.","code":""},{"path":[]},{"path":"http://dcousin3.github.io/superb/reference/WinerCompoundSymmetryTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Winer's test of compound symmetry — WinerCompoundSymmetryTest","text":"","code":"# creates a small data frames with 4 subject's scores for 5 measures: dta <- data.frame(cbind(         col1 <- c(3., 6., 2., 2., 5.),         col2 <- c(4., 5., 4., 4., 3.),         col3 <- c(2., 7., 7., 8., 6.),         col4 <- c(6., 8., 4., 6., 5.)     )) # performs the test (here p = 0.6733) WinerCompoundSymmetryTest(dta) #> [1] 0.6733123"},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-100-march-2025","dir":"Changelog","previous_headings":"","what":"superb 1.0.0 (March 2025)","title":"superb 1.0.0 (March 2025)","text":"Codename: 100% confident; Celebrating fourth anniversary superb! Corrected minor typos documentations; Deprecated plotStyle favor plotLayout; Made “line” default plotLayer instead “bar” Corrected minor bug performing Bartlett test","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09523-january-17th-2025","dir":"Changelog","previous_headings":"","what":"superb 0.95.23 (January 17th, 2025)","title":"superb 0.95.23 (January 17th, 2025)","text":"Codename: living dangerously; EXPERIMENTAL: Made allowance accept namespace::function statistics functions. Useful function may masked packages declaring functions name; Updated options EXPERIMENTAL messages can inhibited; Added range(low, high) Instrument specification.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09522-december-30th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.22 (December 30th, 2024)","title":"superb 0.95.22 (December 30th, 2024)","text":"Minor bug superbToWide(): missing subject first group, converting long poorly reshape(). Modified GRD() generate within-subject factors first factor cycling rapidly. consistent dcast() long--wide functions;","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09521-december-4th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.21 (December 4th, 2024)","title":"superb 0.95.21 (December 4th, 2024)","text":"Made superb() determine automatically WSDesign case design full factorial data long; Corrected bug mixed designs long format; Upgraded option colorize “lineindividualplot” layout; Added check GRD() validate effects bears legitimate factors.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09520-november-26th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.20 (November 26th, 2024)","title":"superb 0.95.20 (November 26th, 2024)","text":"Added one validation GRD() exclude DV IV. Added Instrument GRD() handle instrument-specific impacts generated scores (example, instrument may limited precision)","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09519-october-31st-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.19 (October 31st, 2024)","title":"superb 0.95.19 (October 31st, 2024)","text":"CRAN release: 2024-11-10 Codename: Spooky Remove deprecated arguments ggplot2 >=3.5.0 Added circular layouts radar plots error bars Cleaned bit documentation Upgraded bit ReadMe page Caught bug GRD() 9 levels used effect Cleaned bit geom_superberrorbar() added possibility two distinct colors vertical part error bar.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09518-october-15th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.18 (October 15th, 2024)","title":"superb 0.95.18 (October 15th, 2024)","text":"Corrected bug geom_superberrorbar()","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09517-september-31th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.17 (September 31th, 2024)","title":"superb 0.95.17 (September 31th, 2024)","text":"Added superb(), formula-based function. Modified separator ’_’ ‘.’ superbToWide()","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09516-september-13th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.16 (September 13th, 2024)","title":"superb 0.95.16 (September 13th, 2024)","text":"Added new plot layout: corset plot “corset”; Corrected bug superbShiny() graphical interface “corset”.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09515-august-18th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.15 (August 18th, 2024)","title":"superb 0.95.15 (August 18th, 2024)","text":"CRAN release: 2024-08-17 Added “antagonize” (boolean) option violin plots.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09514-august-11th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.14 (August 11th, 2024)","title":"superb 0.95.14 (August 11th, 2024)","text":"Updated use & vs. && according new R credo Corrected bug related LD adjustment mixed designs","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09513-august-3rd-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.13 (August 3rd, 2024)","title":"superb 0.95.13 (August 3rd, 2024)","text":"Modified violin plots half-violins can displayed direction (+1= left-half; -1=right-half; 0=symmetrical); push (translate half away medial line) modifications, corset plots can made easily superimposing violin plot halves individualline plot","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09512-may-30th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.12 (May 30th, 2024)","title":"superb 0.95.12 (May 30th, 2024)","text":"Revise FYI message un-balanced -group designs Corrected small bug un-balanced within-subject designs Added check correlations data without variance","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09511-may-7th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.11 (May 7th, 2024)","title":"superb 0.95.11 (May 7th, 2024)","text":"Added local decorrelation option “LDr” r radius. Small correction lineBand without -subject factors","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09510-march-9th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.10 (March 9th, 2024)","title":"superb 0.95.10 (March 9th, 2024)","text":"Regular maintenance.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0959-february-8th-2024","dir":"Changelog","previous_headings":"","what":"superb 0.95.9 (February 8th, 2024)","title":"superb 0.95.9 (February 8th, 2024)","text":"CRAN release: 2024-02-09 Added new plot layout, boxplot, display box plots. Adjusted testthat tests following new release ggplot2 Added unitaryAlpha technique compute average correlation Simplified documentation within-subject designs.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09583-november-11th-2023","dir":"Changelog","previous_headings":"","what":"superb 0.95.83 (November 11th, 2023)","title":"superb 0.95.83 (November 11th, 2023)","text":"Made message shown based option","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09582-august-19th-2023","dir":"Changelog","previous_headings":"","what":"superb 0.95.82 (August 19th, 2023)","title":"superb 0.95.82 (August 19th, 2023)","text":"Corrected labeling factors.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-09581-august-13th-2023","dir":"Changelog","previous_headings":"","what":"superb 0.95.81 (August 13th, 2023)","title":"superb 0.95.81 (August 13th, 2023)","text":"Updated CustomizingSuperbPlots vignettes.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0958-june-13th-2023","dir":"Changelog","previous_headings":"","what":"superb 0.95.8 (June 13th, 2023)","title":"superb 0.95.8 (June 13th, 2023)","text":"Added superbToWide() ease conversion wide format tiny corrections documentation Updated references Note updates spaced library now stable","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0957-january-19th-2023","dir":"Changelog","previous_headings":"","what":"superb 0.95.7 (January 19th, 2023)","title":"superb 0.95.7 (January 19th, 2023)","text":"CRAN release: 2023-01-22 Added pairwise deletion computation mean correlation case missing data CA Removed ggplot2 depleted functions “aes_string” favor “aes” Removed ggplot2 depleted attribute “size” favor “linewidth” Added lineBand plot Shiny interface","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0956-december-24th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.6 (December 24th, 2022)","title":"superb 0.95.6 (December 24th, 2022)","text":"Added documentation related plotting frequencies Harmonized bit vignettes’ format. Updated version shinyapps.io","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0955-november-18th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.5 (November 18th, 2022)","title":"superb 0.95.5 (November 18th, 2022)","text":"Tweaked column selection variable argument can given columns names different order order dataframe.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0954-september-9th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.4 (September 9th, 2022)","title":"superb 0.95.4 (September 9th, 2022)","text":"tweaked “pointing” error bars lying side central tendency, line pass throught central tendency.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0953-july-9th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.3 (July 9th, 2022)","title":"superb 0.95.3 (July 9th, 2022)","text":"Updated documentation.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0952-july-9th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.2 (July 9th, 2022)","title":"superb 0.95.2 (July 9th, 2022)","text":"Added option “pointing” error bars can pointing; “”, “” go “” directions (default).","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0951-may-12th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.1 (May 12th, 2022)","title":"superb 0.95.1 (May 12th, 2022)","text":"Corrected bug 0.9.7.9 (kept bugging !); Reduced image resolution vignettes.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0950-may-10th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.95.0 (May 10th, 2022)","title":"superb 0.95.0 (May 10th, 2022)","text":"CRAN release: 2022-05-11 Added new layout display precision using band rather error bars; changed numbering versions two-digits version code.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0979-january-15th-2022","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.9 (January 15th, 2022)","title":"superb 0.9.7.9 (January 15th, 2022)","text":"Corrected problem order conditions 10 present.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0978-december-10th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.8 (December 10th, 2021)","title":"superb 0.9.7.8 (December 10th, 2021)","text":"CRAN release: 2021-12-05 Corrected typos; population size superbShiny() limited 99,999. Corrected.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0977-november-19th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.7 (November 19th, 2021)","title":"superb 0.9.7.7 (November 19th, 2021)","text":"CRAN release: 2021-10-20 Added vignette superb SPSS; Corrected superbShiny() show doi remove graphic directives; Updated shinyapps.io version match version.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0976-november-4th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.6 (November 4th, 2021)","title":"superb 0.9.7.6 (November 4th, 2021)","text":"CRAN release: 2021-10-04 Corrected one bug regarding variables similar names; Integrated tibble data format superb; output missing VignetteC backtick missing VignetteA.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0975-june-23rd-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.5 (June 23rd, 2021)","title":"superb 0.9.7.5 (June 23rd, 2021)","text":"CRAN release: 2021-06-23 Codename: “two-tail 95% confident” Official release CRAN superb graphical user interface superbShiny(); Small changes vignette TheMakingOf.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0974-june-18th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.4 (June 18th, 2021)","title":"superb 0.9.7.4 (June 18th, 2021)","text":"Beta release superbShiny(), graphical user interface facilitate use superbPlot.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0970-may-28th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.7.0 (May 28th, 2021)","title":"superb 0.9.7.0 (May 28th, 2021)","text":"Added vignette implement Reference Intervals (RI) superb; Implemented makeTransparent() ease creation plots multiple error bars; Added distinct vertical color, vcolor, geom_superberrorbar(); Added argument “WSDesign” (default = “fullfactorial”) within-subject factors full-factorial; Added vignette plot non-full factorial datasets.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0960-april-30th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.6.0 (April 30th, 2021)","title":"superb 0.9.6.0 (April 30th, 2021)","text":"Integrated example robust statistic Vignette/Article 4: 20% trimmed mean confidence interval; Added showSignificance() annotate group differences; Added note missing data dataframe; Added automatic handling initializers (see Vignette/Article 9 example); Added vignette dedicated illustrate Cohen’s d; Added geom_superberrorbar() additional options tip markers; … way next release version 0.9.7.5. Stay tune best still come (shiny!)","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0950-april-13th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.5.0 (April 13th, 2021)","title":"superb 0.9.5.0 (April 13th, 2021)","text":"CRAN release: 2021-04-21 Second release CRAN, codename “95% confident”; Expanded documentation .","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0947-april-10th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.7 (April 10th, 2021)","title":"superb 0.9.4.7 (April 10th, 2021)","text":"Added two vignettes.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0946-april-7th-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.6 (April 7th, 2021)","title":"superb 0.9.4.6 (April 7th, 2021)","text":"Problem CAPITAL grd corrected; Rounded numbers messages 4 decimals (enough!); message/warnings/stop generated suberb now prefixed “superb::”; Added function WelchDegreeOfFreedom(); Added message indicate tryon adjustment value; Added vignette Welch, Tryon & superb.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0945-april-1st-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.5 (April 1st, 2021)","title":"superb 0.9.4.5 (April 1st, 2021)","text":"Implemented raincloud plots; Converted messages warning() message().","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0944-march-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.4 (March 2021)","title":"superb 0.9.4.4 (March 2021)","text":"Expanded function names lambda, epsilon; Made built-bootstrap estimators SE PI; Renamed option “debug” “feedback”; Changed debug information GRD(); Converted GRD level ranges, e.g., “diff(1,5)”, numeric levels.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0943-march-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.3 (March 2021)","title":"superb 0.9.4.3 (March 2021)","text":"Added superbData() shortcut superbPlot(... showPlot = FALSE); Changed debug information superbPlot() superbData(); Created logo improved web pages; Revised documentation.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0942-march-2021","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.2 (March 2021)","title":"superb 0.9.4.2 (March 2021)","text":"CRAN release: 2021-03-20 Initial release R version CRAN; Added optional argument facetParams plotting functions; Made plot function customizable; Wrote vignettes.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0940-september-2020","dir":"Changelog","previous_headings":"","what":"superb 0.9.4.0 (September 2020)","title":"superb 0.9.4.0 (September 2020)","text":"Beta release package superb GitHub; MeanPlot renamed superb (SUmmary Plot ERror Bars); Added pre post-processing operators; Packaged together GRD MeanPlot; Transcoded MeanPlot Mathematica R.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0050-january-2019","dir":"Changelog","previous_headings":"","what":"superb 0.0.5.0 (January 2019)","title":"superb 0.0.5.0 (January 2019)","text":"Initial release GRD() 2.0 R platform.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0040-march-2017","dir":"Changelog","previous_headings":"","what":"superb 0.0.4.0 (March 2017)","title":"superb 0.0.4.0 (March 2017)","text":"Last stable version maintained Mathematica; Cousineau (2017) doi: 10.5709/acp-0214-z; Updated legend manipulation following release Mathematica 9.0.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0030-october-2015","dir":"Changelog","previous_headings":"","what":"superb 0.0.3.0 (October 2015)","title":"superb 0.0.3.0 (October 2015)","text":"Release GRD 2.0 SPSS.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0020-july-2014","dir":"Changelog","previous_headings":"","what":"superb 0.0.2.0 (July 2014)","title":"superb 0.0.2.0 (July 2014)","text":"Release GRD 1.0 SPSS.","code":""},{"path":"http://dcousin3.github.io/superb/news/index.html","id":"superb-0010-and-prior-2009-2015","dir":"Changelog","previous_headings":"","what":"superb 0.0.1.0 (and prior; 2009-2015)","title":"superb 0.0.1.0 (and prior; 2009-2015)","text":"Development versions MeanPlot Mathematica framework; Added “popSize” “CRS” Cousineau & Laurencelle (2016) doi: 10.1037/met0000055; Grouped various adjustments “adjustments” list; Added “LM” decorrelation method.","code":""}]
